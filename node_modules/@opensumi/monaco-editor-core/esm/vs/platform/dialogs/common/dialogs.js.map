{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/dialogs/common/dialogs.ts","vs/platform/dialogs/common/dialogs.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAMhG,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAsI9E,MAAM,CAAC,MAAM,cAAc,GAAG,eAAe,CAAiB,eAAe,CAAC,CAAC","file":"dialogs.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport Severity from '../../../base/common/severity.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport interface IBaseDialogOptions {\n\treadonly type?: Severity | DialogType;\n\n\treadonly title?: string;\n\treadonly message: string;\n\treadonly detail?: string;\n\n\treadonly checkbox?: ICheckbox;\n\n\t/**\n\t * Allows to enforce use of custom dialog even in native environments.\n\t */\n\treadonly custom?: boolean | ICustomDialogOptions;\n}\n\nexport interface IConfirmation extends IBaseDialogOptions {\n\n\t/**\n\t * If not provided, defaults to `Yes`.\n\t */\n\treadonly primaryButton?: string;\n\n\t/**\n\t * If not provided, defaults to `Cancel`.\n\t */\n\treadonly cancelButton?: string;\n}\n\nexport interface IConfirmationResult extends ICheckboxResult {\n\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button pressed.\n\t */\n\treadonly confirmed: boolean;\n}\n\nexport interface IInput extends IConfirmation {\n\treadonly inputs: IInputElement[];\n\n\t/**\n\t * If not provided, defaults to `Ok`.\n\t */\n\treadonly primaryButton?: string;\n}\n\nexport interface IInputElement {\n\treadonly type?: 'text' | 'password';\n\treadonly value?: string;\n\treadonly placeholder?: string;\n}\n\nexport interface IInputResult extends IConfirmationResult {\n\n\t/**\n\t * Values for the input fields as provided by the user or `undefined` if none.\n\t */\n\treadonly values?: string[];\n}\n\nexport interface IPromptBaseButton<T> {\n\n\t/**\n\t * @returns the result of the prompt button will be returned\n\t * as result from the `prompt()` call.\n\t */\n\trun(checkbox: ICheckboxResult): T | Promise<T>;\n}\n\nexport interface IPromptButton<T> extends IPromptBaseButton<T> {\n\treadonly label: string;\n}\n\nexport interface IPromptCancelButton<T> extends IPromptBaseButton<T> {\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if not provided.\n\t */\n\treadonly label?: string;\n}\n\nexport interface IPrompt<T> extends IBaseDialogOptions {\n\n\t/**\n\t * The buttons to show in the prompt. Defaults to `OK`\n\t * if no buttons or cancel button is provided.\n\t */\n\treadonly buttons?: IPromptButton<T>[];\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if set to `true`.\n\t */\n\treadonly cancelButton?: IPromptCancelButton<T> | true | string;\n}\n\nexport interface IPromptWithCustomCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: IPromptCancelButton<T>;\n}\n\nexport interface IPromptWithDefaultCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: true | string;\n}\n\nexport interface IPromptResult<T> extends ICheckboxResult {\n\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: T;\n}\n\nexport interface IPromptResultWithCancel<T> extends IPromptResult<T> {\n\treadonly result: T;\n}\n\nexport type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';\n\nexport interface ICheckbox {\n\treadonly label: string;\n\treadonly checked?: boolean;\n}\n\nexport interface ICheckboxResult {\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\treadonly checkboxChecked?: boolean;\n}\n\nexport const IDialogService = createDecorator<IDialogService>('dialogService');\n\nexport interface ICustomDialogOptions {\n\treadonly buttonDetails?: string[];\n\treadonly markdownDetails?: ICustomDialogMarkdown[];\n\treadonly classes?: string[];\n\treadonly icon?: ThemeIcon;\n\treadonly disableCloseAction?: boolean;\n\treadonly closeOnLinkClick?: boolean;\n}\n\nexport interface ICustomDialogMarkdown {\n\treadonly markdown: IMarkdownString;\n\treadonly classes?: string[];\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that fires when a dialog is about to show.\n\t */\n\tonWillShowDialog: Event<void>;\n\n\t/**\n\t * An event that fires when a dialog did show (closed).\n\t */\n\tonDidShowDialog: Event<void>;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog. Provides a bit\n\t * more control over the dialog compared to the simpler\n\t * `confirm` method. Specifically, allows to show more\n\t * than 2 buttons and makes it easier to just show a\n\t * message to the user.\n\t *\n\t * @returns a promise that resolves to the `T` result\n\t * from the provided `IPromptButton<T>` or `undefined`.\n\t */\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Show a modal info dialog.\n\t */\n\tinfo(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal warning dialog.\n\t */\n\twarn(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal error dialog.\n\t */\n\terror(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { ThemeIcon } from '../../../base/common/themables.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport Severity from '../../../base/common/severity.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport interface IBaseDialogOptions {\n\treadonly type?: Severity | DialogType;\n\n\treadonly title?: string;\n\treadonly message: string;\n\treadonly detail?: string;\n\n\treadonly checkbox?: ICheckbox;\n\n\t/**\n\t * Allows to enforce use of custom dialog even in native environments.\n\t */\n\treadonly custom?: boolean | ICustomDialogOptions;\n}\n\nexport interface IConfirmation extends IBaseDialogOptions {\n\n\t/**\n\t * If not provided, defaults to `Yes`.\n\t */\n\treadonly primaryButton?: string;\n\n\t/**\n\t * If not provided, defaults to `Cancel`.\n\t */\n\treadonly cancelButton?: string;\n}\n\nexport interface IConfirmationResult extends ICheckboxResult {\n\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button pressed.\n\t */\n\treadonly confirmed: boolean;\n}\n\nexport interface IInput extends IConfirmation {\n\treadonly inputs: IInputElement[];\n\n\t/**\n\t * If not provided, defaults to `Ok`.\n\t */\n\treadonly primaryButton?: string;\n}\n\nexport interface IInputElement {\n\treadonly type?: 'text' | 'password';\n\treadonly value?: string;\n\treadonly placeholder?: string;\n}\n\nexport interface IInputResult extends IConfirmationResult {\n\n\t/**\n\t * Values for the input fields as provided by the user or `undefined` if none.\n\t */\n\treadonly values?: string[];\n}\n\nexport interface IPromptBaseButton<T> {\n\n\t/**\n\t * @returns the result of the prompt button will be returned\n\t * as result from the `prompt()` call.\n\t */\n\trun(checkbox: ICheckboxResult): T | Promise<T>;\n}\n\nexport interface IPromptButton<T> extends IPromptBaseButton<T> {\n\treadonly label: string;\n}\n\nexport interface IPromptCancelButton<T> extends IPromptBaseButton<T> {\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if not provided.\n\t */\n\treadonly label?: string;\n}\n\nexport interface IPrompt<T> extends IBaseDialogOptions {\n\n\t/**\n\t * The buttons to show in the prompt. Defaults to `OK`\n\t * if no buttons or cancel button is provided.\n\t */\n\treadonly buttons?: IPromptButton<T>[];\n\n\t/**\n\t * The cancel button to show in the prompt. Defaults to\n\t * `Cancel` if set to `true`.\n\t */\n\treadonly cancelButton?: IPromptCancelButton<T> | true | string;\n}\n\nexport interface IPromptWithCustomCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: IPromptCancelButton<T>;\n}\n\nexport interface IPromptWithDefaultCancel<T> extends IPrompt<T> {\n\treadonly cancelButton: true | string;\n}\n\nexport interface IPromptResult<T> extends ICheckboxResult {\n\n\t/**\n\t * The result of the `IPromptButton` that was pressed or `undefined` if none.\n\t */\n\treadonly result?: T;\n}\n\nexport interface IPromptResultWithCancel<T> extends IPromptResult<T> {\n\treadonly result: T;\n}\n\nexport type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';\n\nexport interface ICheckbox {\n\treadonly label: string;\n\treadonly checked?: boolean;\n}\n\nexport interface ICheckboxResult {\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkbox option defined.\n\t */\n\treadonly checkboxChecked?: boolean;\n}\n\nexport const IDialogService = createDecorator<IDialogService>('dialogService');\n\nexport interface ICustomDialogOptions {\n\treadonly buttonDetails?: string[];\n\treadonly markdownDetails?: ICustomDialogMarkdown[];\n\treadonly classes?: string[];\n\treadonly icon?: ThemeIcon;\n\treadonly disableCloseAction?: boolean;\n\treadonly closeOnLinkClick?: boolean;\n}\n\nexport interface ICustomDialogMarkdown {\n\treadonly markdown: IMarkdownString;\n\treadonly classes?: string[];\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that fires when a dialog is about to show.\n\t */\n\tonWillShowDialog: Event<void>;\n\n\t/**\n\t * An event that fires when a dialog did show (closed).\n\t */\n\tonDidShowDialog: Event<void>;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Prompt the user with a modal dialog. Provides a bit\n\t * more control over the dialog compared to the simpler\n\t * `confirm` method. Specifically, allows to show more\n\t * than 2 buttons and makes it easier to just show a\n\t * message to the user.\n\t *\n\t * @returns a promise that resolves to the `T` result\n\t * from the provided `IPromptButton<T>` or `undefined`.\n\t */\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\n\t/**\n\t * Present a modal dialog to the user asking for input.\n\t */\n\tinput(input: IInput): Promise<IInputResult>;\n\n\t/**\n\t * Show a modal info dialog.\n\t */\n\tinfo(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal warning dialog.\n\t */\n\twarn(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Show a modal error dialog.\n\t */\n\terror(message: string, detail?: string): Promise<void>;\n\n\t/**\n\t * Present the about dialog to the user.\n\t */\n\tabout(): Promise<void>;\n}\n"]}