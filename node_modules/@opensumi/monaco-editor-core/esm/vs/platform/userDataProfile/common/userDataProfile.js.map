{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/userDataProfile/common/userDataProfile.ts","vs/platform/userDataProfile/common/userDataProfile.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,6BAA6B,CAAC;AAElD,MAAM,CAAN,IAAkB,mBAOjB;AAPD,WAAkB,mBAAmB;IACpC,4CAAqB,CAAA;IACrB,kDAA2B,CAAA;IAC3B,4CAAqB,CAAA;IACrB,sCAAe,CAAA;IACf,gDAAyB,CAAA;IACzB,kDAA2B,CAAA;AAC5B,CAAC,EAPiB,mBAAmB,KAAnB,mBAAmB,QAOpC;AAyBD,MAAM,UAAU,iBAAiB,CAAC,KAAc;IAC/C,MAAM,SAAS,GAAG,KAAqC,CAAC;IAExD,OAAO,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ;WAChD,OAAO,SAAS,CAAC,EAAE,KAAK,QAAQ;WAChC,OAAO,SAAS,CAAC,SAAS,KAAK,SAAS;WACxC,OAAO,SAAS,CAAC,IAAI,KAAK,QAAQ;WAClC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;WAC7B,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,iBAAiB,CAAC;WACtC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC;WACrC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,mBAAmB,CAAC;WACxC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;WAClC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC;WACjC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAC1C,CAAC;AACH,CAAC","file":"userDataProfile.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["\nimport { URI } from '../../../base/common/uri.js';\n\nexport const enum ProfileResourceType {\n\tSettings = 'settings',\n\tKeybindings = 'keybindings',\n\tSnippets = 'snippets',\n\tTasks = 'tasks',\n\tExtensions = 'extensions',\n\tGlobalState = 'globalState',\n}\n\n/**\n * Flags to indicate whether to use the default profile or not.\n */\nexport type UseDefaultProfileFlags = { [key in ProfileResourceType]?: boolean };\n\nexport interface IUserDataProfile {\n\treadonly id: string;\n\treadonly isDefault: boolean;\n\treadonly name: string;\n\treadonly icon?: string;\n\treadonly location: URI;\n\treadonly globalStorageHome: URI;\n\treadonly settingsResource: URI;\n\treadonly keybindingsResource: URI;\n\treadonly tasksResource: URI;\n\treadonly snippetsHome: URI;\n\treadonly extensionsResource: URI;\n\treadonly cacheHome: URI;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly isTransient?: boolean;\n\treadonly workspaces?: readonly URI[];\n}\n\nexport function isUserDataProfile(thing: unknown): thing is IUserDataProfile {\n\tconst candidate = thing as IUserDataProfile | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& typeof candidate.isDefault === 'boolean'\n\t\t&& typeof candidate.name === 'string'\n\t\t&& URI.isUri(candidate.location)\n\t\t&& URI.isUri(candidate.globalStorageHome)\n\t\t&& URI.isUri(candidate.settingsResource)\n\t\t&& URI.isUri(candidate.keybindingsResource)\n\t\t&& URI.isUri(candidate.tasksResource)\n\t\t&& URI.isUri(candidate.snippetsHome)\n\t\t&& URI.isUri(candidate.extensionsResource)\n\t);\n}\n","\nimport { URI } from '../../../base/common/uri.js';\n\nexport const enum ProfileResourceType {\n\tSettings = 'settings',\n\tKeybindings = 'keybindings',\n\tSnippets = 'snippets',\n\tTasks = 'tasks',\n\tExtensions = 'extensions',\n\tGlobalState = 'globalState',\n}\n\n/**\n * Flags to indicate whether to use the default profile or not.\n */\nexport type UseDefaultProfileFlags = { [key in ProfileResourceType]?: boolean };\n\nexport interface IUserDataProfile {\n\treadonly id: string;\n\treadonly isDefault: boolean;\n\treadonly name: string;\n\treadonly icon?: string;\n\treadonly location: URI;\n\treadonly globalStorageHome: URI;\n\treadonly settingsResource: URI;\n\treadonly keybindingsResource: URI;\n\treadonly tasksResource: URI;\n\treadonly snippetsHome: URI;\n\treadonly extensionsResource: URI;\n\treadonly cacheHome: URI;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly isTransient?: boolean;\n\treadonly workspaces?: readonly URI[];\n}\n\nexport function isUserDataProfile(thing: unknown): thing is IUserDataProfile {\n\tconst candidate = thing as IUserDataProfile | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& typeof candidate.isDefault === 'boolean'\n\t\t&& typeof candidate.name === 'string'\n\t\t&& URI.isUri(candidate.location)\n\t\t&& URI.isUri(candidate.globalStorageHome)\n\t\t&& URI.isUri(candidate.settingsResource)\n\t\t&& URI.isUri(candidate.keybindingsResource)\n\t\t&& URI.isUri(candidate.tasksResource)\n\t\t&& URI.isUri(candidate.snippetsHome)\n\t\t&& URI.isUri(candidate.extensionsResource)\n\t);\n}\n"]}