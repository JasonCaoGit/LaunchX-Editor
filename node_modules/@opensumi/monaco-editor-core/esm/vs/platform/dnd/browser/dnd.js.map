{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/dnd/browser/dnd.ts","vs/platform/dnd/browser/dnd.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AAG5D,OAAO,EAAE,QAAQ,EAAE,MAAM,mCAAmC,CAAC;AAG7D,gCAAgC;AAEhC,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAChC,OAAO,EAAE,aAAa;IACtB,KAAK,EAAE,WAAW;IAClB,OAAO,EAAE,8BAA8B;CACvC,CAAC;AA6CF,MAAM,+BAA+B;IAArC;QACkB,mBAAc,GAAG,IAAI,GAAG,EAAoC,CAAC;IAY/E,CAAC;IAVA,QAAQ,CAAC,YAAsC;QAC9C,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,KAAK,CAAC,2CAA2C,YAAY,CAAC,aAAa,2BAA2B,CAAC,CAAC;QACnH,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;IACnE,CAAC;IAED,MAAM;QACL,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC;CACD;AAED,MAAM,CAAC,MAAM,UAAU,GAAG;IACzB,uBAAuB,EAAE,qCAAqC;CAC9D,CAAC;AAEF,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,uBAAuB,EAAE,IAAI,+BAA+B,EAAE,CAAC,CAAC;AAExF,YAAY;AAEZ,uBAAuB;AAEvB;;GAEG;AACH,MAAM,OAAO,sBAAsB;aAEV,aAAQ,GAAG,IAAI,sBAAsB,EAAE,CAAC;IAKhE;QACC,yCAAyC;IAC1C,CAAC;IAED,MAAM,CAAC,WAAW;QACjB,OAAO,sBAAsB,CAAC,QAAqC,CAAC;IACrE,CAAC;IAED,OAAO,CAAC,KAAQ;QACf,OAAO,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IACtC,CAAC;IAED,SAAS,CAAC,KAAQ;QACjB,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACvB,CAAC;IACF,CAAC;IAED,OAAO,CAAC,KAAQ;QACf,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,OAAO,CAAC,IAAS,EAAE,KAAQ;QAC1B,IAAI,KAAK,EAAE,CAAC;YACX,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACpB,CAAC;IACF,CAAC;;AAGF;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,IAAU;IACxC,IAAI,QAAQ,IAAI,OAAQ,UAAkB,CAAC,MAAM,EAAE,QAAQ,EAAE,cAAc,KAAK,UAAU,EAAE,CAAC;QAC5F,OAAQ,UAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,YAAY","file":"dnd.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["\nimport { DragMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { isNative } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IBaseTextResourceEditorInput, ITextEditorSelection } from '../../editor/common/editor.js';\nimport { Registry } from '../../registry/common/platform.js';\n\n\n//#region Editor / Resources DND\n\nexport const CodeDataTransfers = {\n\tEDITORS: 'CodeEditors',\n\tFILES: 'CodeFiles',\n\tSYMBOLS: 'application/vnd.code.symbols'\n};\n\nexport interface IDraggedResourceEditorInput extends IBaseTextResourceEditorInput {\n\tresource: URI | undefined;\n\n\t/**\n\t * A hint that the source of the dragged editor input\n\t * might not be the application but some external tool.\n\t */\n\tisExternal?: boolean;\n\n\t/**\n\t * Whether we probe for the dropped editor to be a workspace\n\t * (i.e. code-workspace file or even a folder), allowing to\n\t * open it as workspace instead of opening as editor.\n\t */\n\tallowWorkspaceOpen?: boolean;\n}\n\n//#region DND contributions\n\nexport interface IResourceStat {\n\treadonly resource: URI;\n\treadonly isDirectory?: boolean;\n\treadonly selection?: ITextEditorSelection;\n}\n\nexport interface IDragAndDropContributionRegistry {\n\t/**\n\t * Registers a drag and drop contribution.\n\t */\n\tregister(contribution: IDragAndDropContribution): void;\n\n\t/**\n\t * Returns all registered drag and drop contributions.\n\t */\n\tgetAll(): IterableIterator<IDragAndDropContribution>;\n}\n\ninterface IDragAndDropContribution {\n\treadonly dataFormatKey: string;\n\tgetEditorInputs(data: string): IDraggedResourceEditorInput[];\n\tsetData(resources: IResourceStat[], event: DragMouseEvent | DragEvent): void;\n}\n\nclass DragAndDropContributionRegistry implements IDragAndDropContributionRegistry {\n\tprivate readonly _contributions = new Map<string, IDragAndDropContribution>();\n\n\tregister(contribution: IDragAndDropContribution): void {\n\t\tif (this._contributions.has(contribution.dataFormatKey)) {\n\t\t\tthrow new Error(`A drag and drop contributiont with key '${contribution.dataFormatKey}' was already registered.`);\n\t\t}\n\t\tthis._contributions.set(contribution.dataFormatKey, contribution);\n\t}\n\n\tgetAll(): IterableIterator<IDragAndDropContribution> {\n\t\treturn this._contributions.values();\n\t}\n}\n\nexport const Extensions = {\n\tDragAndDropContribution: 'workbench.contributions.dragAndDrop'\n};\n\nRegistry.add(Extensions.DragAndDropContribution, new DragAndDropContributionRegistry());\n\n//#endregion\n\n//#region DND Utilities\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n\n\tprivate static readonly INSTANCE = new LocalSelectionTransfer();\n\n\tprivate data?: T[];\n\tprivate proto?: T;\n\n\tprivate constructor() {\n\t\t// protect against external instantiation\n\t}\n\n\tstatic getInstance<T>(): LocalSelectionTransfer<T> {\n\t\treturn LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n\t}\n\n\thasData(proto: T): boolean {\n\t\treturn proto && proto === this.proto;\n\t}\n\n\tclearData(proto: T): void {\n\t\tif (this.hasData(proto)) {\n\t\t\tthis.proto = undefined;\n\t\t\tthis.data = undefined;\n\t\t}\n\t}\n\n\tgetData(proto: T): T[] | undefined {\n\t\tif (this.hasData(proto)) {\n\t\t\treturn this.data;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tsetData(data: T[], proto: T): void {\n\t\tif (proto) {\n\t\t\tthis.data = data;\n\t\t\tthis.proto = proto;\n\t\t}\n\t}\n}\n\n/**\n * A helper to get access to Electrons `webUtils.getPathForFile` function\n * in a safe way without crashing the application when running in the web.\n */\nexport function getPathForFile(file: File): string | undefined {\n\tif (isNative && typeof (globalThis as any).vscode?.webUtils?.getPathForFile === 'function') {\n\t\treturn (globalThis as any).vscode.webUtils.getPathForFile(file);\n\t}\n\n\treturn undefined;\n}\n\n//#endregion\n","\nimport { DragMouseEvent } from '../../../base/browser/mouseEvent.js';\nimport { isNative } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { IBaseTextResourceEditorInput, ITextEditorSelection } from '../../editor/common/editor.js';\nimport { Registry } from '../../registry/common/platform.js';\n\n\n//#region Editor / Resources DND\n\nexport const CodeDataTransfers = {\n\tEDITORS: 'CodeEditors',\n\tFILES: 'CodeFiles',\n\tSYMBOLS: 'application/vnd.code.symbols'\n};\n\nexport interface IDraggedResourceEditorInput extends IBaseTextResourceEditorInput {\n\tresource: URI | undefined;\n\n\t/**\n\t * A hint that the source of the dragged editor input\n\t * might not be the application but some external tool.\n\t */\n\tisExternal?: boolean;\n\n\t/**\n\t * Whether we probe for the dropped editor to be a workspace\n\t * (i.e. code-workspace file or even a folder), allowing to\n\t * open it as workspace instead of opening as editor.\n\t */\n\tallowWorkspaceOpen?: boolean;\n}\n\n//#region DND contributions\n\nexport interface IResourceStat {\n\treadonly resource: URI;\n\treadonly isDirectory?: boolean;\n\treadonly selection?: ITextEditorSelection;\n}\n\nexport interface IDragAndDropContributionRegistry {\n\t/**\n\t * Registers a drag and drop contribution.\n\t */\n\tregister(contribution: IDragAndDropContribution): void;\n\n\t/**\n\t * Returns all registered drag and drop contributions.\n\t */\n\tgetAll(): IterableIterator<IDragAndDropContribution>;\n}\n\ninterface IDragAndDropContribution {\n\treadonly dataFormatKey: string;\n\tgetEditorInputs(data: string): IDraggedResourceEditorInput[];\n\tsetData(resources: IResourceStat[], event: DragMouseEvent | DragEvent): void;\n}\n\nclass DragAndDropContributionRegistry implements IDragAndDropContributionRegistry {\n\tprivate readonly _contributions = new Map<string, IDragAndDropContribution>();\n\n\tregister(contribution: IDragAndDropContribution): void {\n\t\tif (this._contributions.has(contribution.dataFormatKey)) {\n\t\t\tthrow new Error(`A drag and drop contributiont with key '${contribution.dataFormatKey}' was already registered.`);\n\t\t}\n\t\tthis._contributions.set(contribution.dataFormatKey, contribution);\n\t}\n\n\tgetAll(): IterableIterator<IDragAndDropContribution> {\n\t\treturn this._contributions.values();\n\t}\n}\n\nexport const Extensions = {\n\tDragAndDropContribution: 'workbench.contributions.dragAndDrop'\n};\n\nRegistry.add(Extensions.DragAndDropContribution, new DragAndDropContributionRegistry());\n\n//#endregion\n\n//#region DND Utilities\n\n/**\n * A singleton to store transfer data during drag & drop operations that are only valid within the application.\n */\nexport class LocalSelectionTransfer<T> {\n\n\tprivate static readonly INSTANCE = new LocalSelectionTransfer();\n\n\tprivate data?: T[];\n\tprivate proto?: T;\n\n\tprivate constructor() {\n\t\t// protect against external instantiation\n\t}\n\n\tstatic getInstance<T>(): LocalSelectionTransfer<T> {\n\t\treturn LocalSelectionTransfer.INSTANCE as LocalSelectionTransfer<T>;\n\t}\n\n\thasData(proto: T): boolean {\n\t\treturn proto && proto === this.proto;\n\t}\n\n\tclearData(proto: T): void {\n\t\tif (this.hasData(proto)) {\n\t\t\tthis.proto = undefined;\n\t\t\tthis.data = undefined;\n\t\t}\n\t}\n\n\tgetData(proto: T): T[] | undefined {\n\t\tif (this.hasData(proto)) {\n\t\t\treturn this.data;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tsetData(data: T[], proto: T): void {\n\t\tif (proto) {\n\t\t\tthis.data = data;\n\t\t\tthis.proto = proto;\n\t\t}\n\t}\n}\n\n/**\n * A helper to get access to Electrons `webUtils.getPathForFile` function\n * in a safe way without crashing the application when running in the web.\n */\nexport function getPathForFile(file: File): string | undefined {\n\tif (isNative && typeof (globalThis as any).vscode?.webUtils?.getPathForFile === 'function') {\n\t\treturn (globalThis as any).vscode.webUtils.getPathForFile(file);\n\t}\n\n\treturn undefined;\n}\n\n//#endregion\n"]}