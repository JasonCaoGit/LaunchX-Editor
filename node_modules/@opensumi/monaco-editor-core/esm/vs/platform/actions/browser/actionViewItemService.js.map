{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/actions/browser/actionViewItemService.ts","vs/platform/actions/browser/actionViewItemService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,OAAO,EAAS,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAe,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAC9E,OAAO,EAAqB,iBAAiB,EAAE,MAAM,0CAA0C,CAAC;AAChG,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAC9E,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAG9C,MAAM,CAAC,MAAM,sBAAsB,GAAG,eAAe,CAAyB,wBAAwB,CAAC,CAAC;AAexG,MAAM,qBAAqB;IAA3B;QAIkB,eAAU,GAAG,IAAI,GAAG,EAAmC,CAAC;QAExD,iBAAY,GAAG,IAAI,OAAO,EAAU,CAAC;QAC7C,gBAAW,GAAkB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IA8B/D,CAAC;IA5BA,OAAO;QACN,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,kBAAmC,EAAE,QAAiC,EAAE,KAAsB;QACpH,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,kBAAkB,aAAa,IAAI,yBAAyB,CAAC,CAAC;QAC7G,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAElC,MAAM,QAAQ,GAAG,KAAK,EAAE,CAAC,GAAG,EAAE;YAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC,GAAG,EAAE;YACxB,QAAQ,EAAE,OAAO,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,eAAgC;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;IAClE,CAAC;IAEO,QAAQ,CAAC,IAAY,EAAE,eAAgC;QAC9D,OAAO,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,eAAe,YAAY,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC;IACnG,CAAC;CACD;AAED,iBAAiB,CAAC,sBAAsB,EAAE,qBAAqB,oCAA4B,CAAC","file":"actionViewItemService.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IActionViewItemProvider } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { MenuId } from '../common/actions.js';\n\n\nexport const IActionViewItemService = createDecorator<IActionViewItemService>('IActionViewItemService');\n\nexport interface IActionViewItemService {\n\n\t_serviceBrand: undefined;\n\n\tonDidChange: Event<MenuId>;\n\n\tregister(menu: MenuId, submenu: MenuId, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable;\n\tregister(menu: MenuId, commandId: string, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable;\n\n\tlookUp(menu: MenuId, submenu: MenuId): IActionViewItemProvider | undefined;\n\tlookUp(menu: MenuId, commandId: string): IActionViewItemProvider | undefined;\n}\n\nclass ActionViewItemService implements IActionViewItemService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, IActionViewItemProvider>();\n\n\tprivate readonly _onDidChange = new Emitter<MenuId>();\n\treadonly onDidChange: Event<MenuId> = this._onDidChange.event;\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tregister(menu: MenuId, commandOrSubmenuId: string | MenuId, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable {\n\t\tconst id = this._makeKey(menu, commandOrSubmenuId);\n\t\tif (this._providers.has(id)) {\n\t\t\tthrow new Error(`A provider for the command ${commandOrSubmenuId} and menu ${menu} is already registered.`);\n\t\t}\n\t\tthis._providers.set(id, provider);\n\n\t\tconst listener = event?.(() => {\n\t\t\tthis._onDidChange.fire(menu);\n\t\t});\n\n\t\treturn toDisposable(() => {\n\t\t\tlistener?.dispose();\n\t\t\tthis._providers.delete(id);\n\t\t});\n\t}\n\n\tlookUp(menu: MenuId, commandOrMenuId: string | MenuId): IActionViewItemProvider | undefined {\n\t\treturn this._providers.get(this._makeKey(menu, commandOrMenuId));\n\t}\n\n\tprivate _makeKey(menu: MenuId, commandOrMenuId: string | MenuId) {\n\t\treturn `${menu.id}/${(commandOrMenuId instanceof MenuId ? commandOrMenuId.id : commandOrMenuId)}`;\n\t}\n}\n\nregisterSingleton(IActionViewItemService, ActionViewItemService, InstantiationType.Delayed);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IActionViewItemProvider } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { MenuId } from '../common/actions.js';\n\n\nexport const IActionViewItemService = createDecorator<IActionViewItemService>('IActionViewItemService');\n\nexport interface IActionViewItemService {\n\n\t_serviceBrand: undefined;\n\n\tonDidChange: Event<MenuId>;\n\n\tregister(menu: MenuId, submenu: MenuId, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable;\n\tregister(menu: MenuId, commandId: string, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable;\n\n\tlookUp(menu: MenuId, submenu: MenuId): IActionViewItemProvider | undefined;\n\tlookUp(menu: MenuId, commandId: string): IActionViewItemProvider | undefined;\n}\n\nclass ActionViewItemService implements IActionViewItemService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, IActionViewItemProvider>();\n\n\tprivate readonly _onDidChange = new Emitter<MenuId>();\n\treadonly onDidChange: Event<MenuId> = this._onDidChange.event;\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tregister(menu: MenuId, commandOrSubmenuId: string | MenuId, provider: IActionViewItemProvider, event?: Event<unknown>): IDisposable {\n\t\tconst id = this._makeKey(menu, commandOrSubmenuId);\n\t\tif (this._providers.has(id)) {\n\t\t\tthrow new Error(`A provider for the command ${commandOrSubmenuId} and menu ${menu} is already registered.`);\n\t\t}\n\t\tthis._providers.set(id, provider);\n\n\t\tconst listener = event?.(() => {\n\t\t\tthis._onDidChange.fire(menu);\n\t\t});\n\n\t\treturn toDisposable(() => {\n\t\t\tlistener?.dispose();\n\t\t\tthis._providers.delete(id);\n\t\t});\n\t}\n\n\tlookUp(menu: MenuId, commandOrMenuId: string | MenuId): IActionViewItemProvider | undefined {\n\t\treturn this._providers.get(this._makeKey(menu, commandOrMenuId));\n\t}\n\n\tprivate _makeKey(menu: MenuId, commandOrMenuId: string | MenuId) {\n\t\treturn `${menu.id}/${(commandOrMenuId instanceof MenuId ? commandOrMenuId.id : commandOrMenuId)}`;\n\t}\n}\n\nregisterSingleton(IActionViewItemService, ActionViewItemService, InstantiationType.Delayed);\n"]}