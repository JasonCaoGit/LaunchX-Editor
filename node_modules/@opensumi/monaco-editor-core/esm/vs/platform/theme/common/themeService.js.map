{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/theme/common/themeService.ts","vs/platform/theme/common/themeService.ts"],"names":[],"mappings":"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","file":"themeService.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorIdentifier } from './colorRegistry.js';\nimport { IconContribution, IconDefinition } from './iconRegistry.js';\nimport { ColorScheme, ThemeTypeSelector } from './theme.js';\n\nexport const IThemeService = createDecorator<IThemeService>('themeService');\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\nexport function getThemeTypeSelector(type: ColorScheme): ThemeTypeSelector {\n\tswitch (type) {\n\t\tcase ColorScheme.DARK: return ThemeTypeSelector.VS_DARK;\n\t\tcase ColorScheme.HIGH_CONTRAST_DARK: return ThemeTypeSelector.HC_BLACK;\n\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT: return ThemeTypeSelector.HC_LIGHT;\n\t\tdefault: return ThemeTypeSelector.VS;\n\t}\n}\n\nexport interface ITokenStyle {\n\treadonly foreground: number | undefined;\n\treadonly bold: boolean | undefined;\n\treadonly underline: boolean | undefined;\n\treadonly strikethrough: boolean | undefined;\n\treadonly italic: boolean | undefined;\n}\n\nexport interface IColorTheme {\n\n\treadonly type: ColorScheme;\n\n\treadonly label: string;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n\n\t/**\n\t * Returns the token style for a given classification. The result uses the <code>MetadataConsts</code> format\n\t */\n\tgetTokenStyleMetadata(type: string, modifiers: string[], modelLanguage: string): ITokenStyle | undefined;\n\n\t/**\n\t * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.\n\t */\n\treadonly tokenColorMap: string[];\n\n\t/**\n\t * Defines whether semantic highlighting should be enabled for the theme.\n\t */\n\treadonly semanticHighlighting: boolean;\n}\n\nexport interface IFileIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface IProductIconTheme {\n\t/**\n\t * Resolves the definition for the given icon as defined by the theme.\n\t *\n\t * @param iconContribution The icon\n\t */\n\tgetIcon(iconContribution: IconContribution): IconDefinition | undefined;\n}\n\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(theme: IColorTheme, collector: ICssStyleCollector, environment: IEnvironmentService): void;\n}\n\nexport interface IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tgetColorTheme(): IColorTheme;\n\n\treadonly onDidColorThemeChange: Event<IColorTheme>;\n\n\tgetFileIconTheme(): IFileIconTheme;\n\n\treadonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n\n\tgetProductIconTheme(): IProductIconTheme;\n\n\treadonly onDidProductIconThemeChange: Event<IProductIconTheme>;\n\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: 'base.contributions.theming'\n};\n\nexport interface IThemingRegistry {\n\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonColorThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter = new Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onColorThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(participant: IThemingParticipant): IDisposable {\n\treturn themingRegistry.onColorThemeChange(participant);\n}\n\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n\tprotected theme: IColorTheme;\n\n\tconstructor(\n\t\tprotected themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.theme = themeService.getColorTheme();\n\n\t\t// Hook up to theme changes\n\t\tthis._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n\t}\n\n\tprotected onThemeChange(theme: IColorTheme): void {\n\t\tthis.theme = theme;\n\n\t\tthis.updateStyles();\n\t}\n\n\tupdateStyles(): void {\n\t\t// Subclasses to override\n\t}\n\n\tprotected getColor(id: string, modify?: (color: Color, theme: IColorTheme) => Color): string | null {\n\t\tlet color = this.theme.getColor(id);\n\n\t\tif (color && modify) {\n\t\t\tcolor = modify(color, this.theme);\n\t\t}\n\n\t\treturn color ? color.toString() : null;\n\t}\n}\n","\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { ColorIdentifier } from './colorRegistry.js';\nimport { IconContribution, IconDefinition } from './iconRegistry.js';\nimport { ColorScheme, ThemeTypeSelector } from './theme.js';\n\nexport const IThemeService = createDecorator<IThemeService>('themeService');\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\nexport function getThemeTypeSelector(type: ColorScheme): ThemeTypeSelector {\n\tswitch (type) {\n\t\tcase ColorScheme.DARK: return ThemeTypeSelector.VS_DARK;\n\t\tcase ColorScheme.HIGH_CONTRAST_DARK: return ThemeTypeSelector.HC_BLACK;\n\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT: return ThemeTypeSelector.HC_LIGHT;\n\t\tdefault: return ThemeTypeSelector.VS;\n\t}\n}\n\nexport interface ITokenStyle {\n\treadonly foreground: number | undefined;\n\treadonly bold: boolean | undefined;\n\treadonly underline: boolean | undefined;\n\treadonly strikethrough: boolean | undefined;\n\treadonly italic: boolean | undefined;\n}\n\nexport interface IColorTheme {\n\n\treadonly type: ColorScheme;\n\n\treadonly label: string;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n\n\t/**\n\t * Returns the token style for a given classification. The result uses the <code>MetadataConsts</code> format\n\t */\n\tgetTokenStyleMetadata(type: string, modifiers: string[], modelLanguage: string): ITokenStyle | undefined;\n\n\t/**\n\t * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.\n\t */\n\treadonly tokenColorMap: string[];\n\n\t/**\n\t * Defines whether semantic highlighting should be enabled for the theme.\n\t */\n\treadonly semanticHighlighting: boolean;\n}\n\nexport interface IFileIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface IProductIconTheme {\n\t/**\n\t * Resolves the definition for the given icon as defined by the theme.\n\t *\n\t * @param iconContribution The icon\n\t */\n\tgetIcon(iconContribution: IconContribution): IconDefinition | undefined;\n}\n\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(theme: IColorTheme, collector: ICssStyleCollector, environment: IEnvironmentService): void;\n}\n\nexport interface IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tgetColorTheme(): IColorTheme;\n\n\treadonly onDidColorThemeChange: Event<IColorTheme>;\n\n\tgetFileIconTheme(): IFileIconTheme;\n\n\treadonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n\n\tgetProductIconTheme(): IProductIconTheme;\n\n\treadonly onDidProductIconThemeChange: Event<IProductIconTheme>;\n\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: 'base.contributions.theming'\n};\n\nexport interface IThemingRegistry {\n\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonColorThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter = new Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onColorThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(participant: IThemingParticipant): IDisposable {\n\treturn themingRegistry.onColorThemeChange(participant);\n}\n\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n\tprotected theme: IColorTheme;\n\n\tconstructor(\n\t\tprotected themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.theme = themeService.getColorTheme();\n\n\t\t// Hook up to theme changes\n\t\tthis._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n\t}\n\n\tprotected onThemeChange(theme: IColorTheme): void {\n\t\tthis.theme = theme;\n\n\t\tthis.updateStyles();\n\t}\n\n\tupdateStyles(): void {\n\t\t// Subclasses to override\n\t}\n\n\tprotected getColor(id: string, modify?: (color: Color, theme: IColorTheme) => Color): string | null {\n\t\tlet color = this.theme.getColor(id);\n\n\t\tif (color && modify) {\n\t\t\tcolor = modify(color, this.theme);\n\t\t}\n\n\t\treturn color ? color.toString() : null;\n\t}\n}\n"]}