{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/accessibility/browser/accessibleView.ts","vs/platform/accessibility/browser/accessibleView.ts"],"names":[],"mappings":"AAMA,OAAO,EAAe,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAE5E,MAAM,CAAN,IAAkB,wBAuBjB;AAvBD,WAAkB,wBAAwB;IACzC,iDAAqB,CAAA;IACrB,0DAA8B,CAAA;IAC9B,0DAA8B,CAAA;IAC9B,qDAAyB,CAAA;IACzB,mDAAuB,CAAA;IACvB,qDAAyB,CAAA;IACzB,mDAAuB,CAAA;IACvB,mEAAuC,CAAA;IACvC,mEAAuC,CAAA;IACvC,iDAAqB,CAAA;IACrB,qDAAyB,CAAA;IACzB,6CAAiB,CAAA;IACjB,2CAAe,CAAA;IACf,yDAA6B,CAAA;IAC7B,+DAAmC,CAAA;IACnC,iDAAqB,CAAA;IACrB,2DAA+B,CAAA;IAC/B,yCAAa,CAAA;IACb,iDAAqB,CAAA;IACrB,uDAA2B,CAAA;IAC3B,uDAA2B,CAAA;IAC3B,iDAAqB,CAAA;AACtB,CAAC,EAvBiB,wBAAwB,KAAxB,wBAAwB,QAuBzC;AAED,MAAM,CAAN,IAAkB,kBAGjB;AAHD,WAAkB,kBAAkB;IACnC,mCAAa,CAAA;IACb,mCAAa,CAAA;AACd,CAAC,EAHiB,kBAAkB,KAAlB,kBAAkB,QAGnC;AA+DD,MAAM,OAAO,yBAA0B,SAAQ,UAAU;IAExD,YACQ,EAA4B,EAC5B,OAA+B,EAC/B,cAA4B,EAC5B,OAAmB,EACnB,mBAA2B,EAC3B,MAAmB,EACnB,OAAmB,EACnB,kBAA6C,EAC7C,sBAAiD,EACjD,kBAAgC,EAChC,SAAuC,EACvC,UAA0C,EAC1C,6BAA+D;QAEtE,KAAK,EAAE,CAAC;QAdD,OAAE,GAAF,EAAE,CAA0B;QAC5B,YAAO,GAAP,OAAO,CAAwB;QAC/B,mBAAc,GAAd,cAAc,CAAc;QAC5B,YAAO,GAAP,OAAO,CAAY;QACnB,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,WAAM,GAAN,MAAM,CAAa;QACnB,YAAO,GAAP,OAAO,CAAY;QACnB,uBAAkB,GAAlB,kBAAkB,CAA2B;QAC7C,2BAAsB,GAAtB,sBAAsB,CAA2B;QACjD,uBAAkB,GAAlB,kBAAkB,CAAc;QAChC,cAAS,GAAT,SAAS,CAA8B;QACvC,eAAU,GAAV,UAAU,CAAgC;QAC1C,kCAA6B,GAA7B,6BAA6B,CAAkC;IAGvE,CAAC;CACD;AAED,MAAM,OAAO,wBAAyB,SAAQ,UAAU;IAEvD,YACiB,EAAU,EACnB,OAA+B,EAC/B,cAA4B,EAC5B,OAAmB,EACnB,MAAmB,EACnB,kBAA6C,EAC7C,sBAAiD,EACjD,OAAmB,EACnB,kBAAgC;QAEvC,KAAK,EAAE,CAAC;QAVQ,OAAE,GAAF,EAAE,CAAQ;QACnB,YAAO,GAAP,OAAO,CAAwB;QAC/B,mBAAc,GAAd,cAAc,CAAc;QAC5B,YAAO,GAAP,OAAO,CAAY;QACnB,WAAM,GAAN,MAAM,CAAa;QACnB,uBAAkB,GAAlB,kBAAkB,CAA2B;QAC7C,2BAAsB,GAAtB,sBAAsB,CAA2B;QACjD,YAAO,GAAP,OAAO,CAAY;QACnB,uBAAkB,GAAlB,kBAAkB,CAAc;IAGxC,CAAC;CACD","file":"accessibleView.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["\nimport { IKeyboardEvent } from '../../keybinding/common/keybinding.js';\nimport { IPickerQuickAccessItem } from '../../quickinput/browser/pickerQuickAccess.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IAction } from '../../../base/common/actions.js';\nimport { IQuickPickItem } from '../../quickinput/common/quickInput.js';\nimport { IDisposable, Disposable } from '../../../base/common/lifecycle.js';\n\nexport const enum AccessibleViewProviderId {\n\tTerminal = 'terminal',\n\tTerminalChat = 'terminal-chat',\n\tTerminalHelp = 'terminal-help',\n\tDiffEditor = 'diffEditor',\n\tPanelChat = 'panelChat',\n\tInlineChat = 'inlineChat',\n\tQuickChat = 'quickChat',\n\tInlineCompletions = 'inlineCompletions',\n\tKeybindingsEditor = 'keybindingsEditor',\n\tNotebook = 'notebook',\n\tReplEditor = 'replEditor',\n\tEditor = 'editor',\n\tHover = 'hover',\n\tNotification = 'notification',\n\tEmptyEditorHint = 'emptyEditorHint',\n\tComments = 'comments',\n\tCommentThread = 'commentThread',\n\tRepl = 'repl',\n\tReplHelp = 'replHelp',\n\tRunAndDebug = 'runAndDebug',\n\tWalkthrough = 'walkthrough',\n\tSourceControl = 'scm'\n}\n\nexport const enum AccessibleViewType {\n\tHelp = 'help',\n\tView = 'view'\n}\n\nexport interface IAccessibleViewOptions {\n\treadMoreUrl?: string;\n\t/**\n\t * Defaults to markdown\n\t */\n\tlanguage?: string;\n\ttype: AccessibleViewType;\n\t/**\n\t * By default, places the cursor on the top line of the accessible view.\n\t * If set to 'initial-bottom', places the cursor on the bottom line of the accessible view and preserves it henceforth.\n\t * If set to 'bottom', places the cursor on the bottom line of the accessible view.\n\t */\n\tposition?: 'bottom' | 'initial-bottom';\n\t/**\n\t * @returns a string that will be used as the content of the help dialog\n\t * instead of the one provided by default.\n\t */\n\tcustomHelp?: () => string;\n\t/**\n\t * If this provider might want to request to be shown again, provide an ID.\n\t */\n\tid?: AccessibleViewProviderId;\n\n\t/**\n\t * Keybinding items to configure\n\t */\n\tconfigureKeybindingItems?: IQuickPickItem[];\n\n\t/**\n\t * Keybinding items that are already configured\n\t */\n\tconfiguredKeybindingItems?: IQuickPickItem[];\n}\n\n\nexport interface IAccessibleViewContentProvider extends IBasicContentProvider, IDisposable {\n\tid: AccessibleViewProviderId;\n\tverbositySettingKey: string;\n\t/**\n\t * Note that a Codicon class should be provided for each action.\n\t * If not, a default will be used.\n\t */\n\tonKeyDown?(e: IKeyboardEvent): void;\n\t/**\n\t * When the language is markdown, this is provided by default.\n\t */\n\tgetSymbols?(): IAccessibleViewSymbol[];\n\t/**\n\t * Note that this will only take effect if the provider has an ID.\n\t */\n\tonDidRequestClearLastProvider?: Event<AccessibleViewProviderId>;\n}\n\n\nexport interface IAccessibleViewSymbol extends IPickerQuickAccessItem {\n\tmarkdownToParse?: string;\n\tfirstListItem?: string;\n\tlineNumber?: number;\n\tendLineNumber?: number;\n}\n\nexport class AccessibleContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\n\tconstructor(\n\t\tpublic id: AccessibleViewProviderId,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic verbositySettingKey: string,\n\t\tpublic onOpen?: () => void,\n\t\tpublic actions?: IAction[],\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic onDidChangeContent?: Event<void>,\n\t\tpublic onKeyDown?: (e: IKeyboardEvent) => void,\n\t\tpublic getSymbols?: () => IAccessibleViewSymbol[],\n\t\tpublic onDidRequestClearLastProvider?: Event<AccessibleViewProviderId>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class ExtensionContentProvider extends Disposable implements IBasicContentProvider {\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic onOpen?: () => void,\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic actions?: IAction[],\n\t\tpublic onDidChangeContent?: Event<void>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport interface IBasicContentProvider extends IDisposable {\n\tid: string;\n\toptions: IAccessibleViewOptions;\n\tonClose(): void;\n\tprovideContent(): string;\n\tonOpen?(): void;\n\tactions?: IAction[];\n\tprovidePreviousContent?(): void;\n\tprovideNextContent?(): void;\n\tonDidChangeContent?: Event<void>;\n}\n","\nimport { IKeyboardEvent } from '../../keybinding/common/keybinding.js';\nimport { IPickerQuickAccessItem } from '../../quickinput/browser/pickerQuickAccess.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IAction } from '../../../base/common/actions.js';\nimport { IQuickPickItem } from '../../quickinput/common/quickInput.js';\nimport { IDisposable, Disposable } from '../../../base/common/lifecycle.js';\n\nexport const enum AccessibleViewProviderId {\n\tTerminal = 'terminal',\n\tTerminalChat = 'terminal-chat',\n\tTerminalHelp = 'terminal-help',\n\tDiffEditor = 'diffEditor',\n\tPanelChat = 'panelChat',\n\tInlineChat = 'inlineChat',\n\tQuickChat = 'quickChat',\n\tInlineCompletions = 'inlineCompletions',\n\tKeybindingsEditor = 'keybindingsEditor',\n\tNotebook = 'notebook',\n\tReplEditor = 'replEditor',\n\tEditor = 'editor',\n\tHover = 'hover',\n\tNotification = 'notification',\n\tEmptyEditorHint = 'emptyEditorHint',\n\tComments = 'comments',\n\tCommentThread = 'commentThread',\n\tRepl = 'repl',\n\tReplHelp = 'replHelp',\n\tRunAndDebug = 'runAndDebug',\n\tWalkthrough = 'walkthrough',\n\tSourceControl = 'scm'\n}\n\nexport const enum AccessibleViewType {\n\tHelp = 'help',\n\tView = 'view'\n}\n\nexport interface IAccessibleViewOptions {\n\treadMoreUrl?: string;\n\t/**\n\t * Defaults to markdown\n\t */\n\tlanguage?: string;\n\ttype: AccessibleViewType;\n\t/**\n\t * By default, places the cursor on the top line of the accessible view.\n\t * If set to 'initial-bottom', places the cursor on the bottom line of the accessible view and preserves it henceforth.\n\t * If set to 'bottom', places the cursor on the bottom line of the accessible view.\n\t */\n\tposition?: 'bottom' | 'initial-bottom';\n\t/**\n\t * @returns a string that will be used as the content of the help dialog\n\t * instead of the one provided by default.\n\t */\n\tcustomHelp?: () => string;\n\t/**\n\t * If this provider might want to request to be shown again, provide an ID.\n\t */\n\tid?: AccessibleViewProviderId;\n\n\t/**\n\t * Keybinding items to configure\n\t */\n\tconfigureKeybindingItems?: IQuickPickItem[];\n\n\t/**\n\t * Keybinding items that are already configured\n\t */\n\tconfiguredKeybindingItems?: IQuickPickItem[];\n}\n\n\nexport interface IAccessibleViewContentProvider extends IBasicContentProvider, IDisposable {\n\tid: AccessibleViewProviderId;\n\tverbositySettingKey: string;\n\t/**\n\t * Note that a Codicon class should be provided for each action.\n\t * If not, a default will be used.\n\t */\n\tonKeyDown?(e: IKeyboardEvent): void;\n\t/**\n\t * When the language is markdown, this is provided by default.\n\t */\n\tgetSymbols?(): IAccessibleViewSymbol[];\n\t/**\n\t * Note that this will only take effect if the provider has an ID.\n\t */\n\tonDidRequestClearLastProvider?: Event<AccessibleViewProviderId>;\n}\n\n\nexport interface IAccessibleViewSymbol extends IPickerQuickAccessItem {\n\tmarkdownToParse?: string;\n\tfirstListItem?: string;\n\tlineNumber?: number;\n\tendLineNumber?: number;\n}\n\nexport class AccessibleContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\n\tconstructor(\n\t\tpublic id: AccessibleViewProviderId,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic verbositySettingKey: string,\n\t\tpublic onOpen?: () => void,\n\t\tpublic actions?: IAction[],\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic onDidChangeContent?: Event<void>,\n\t\tpublic onKeyDown?: (e: IKeyboardEvent) => void,\n\t\tpublic getSymbols?: () => IAccessibleViewSymbol[],\n\t\tpublic onDidRequestClearLastProvider?: Event<AccessibleViewProviderId>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport class ExtensionContentProvider extends Disposable implements IBasicContentProvider {\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic options: IAccessibleViewOptions,\n\t\tpublic provideContent: () => string,\n\t\tpublic onClose: () => void,\n\t\tpublic onOpen?: () => void,\n\t\tpublic provideNextContent?: () => string | undefined,\n\t\tpublic providePreviousContent?: () => string | undefined,\n\t\tpublic actions?: IAction[],\n\t\tpublic onDidChangeContent?: Event<void>,\n\t) {\n\t\tsuper();\n\t}\n}\n\nexport interface IBasicContentProvider extends IDisposable {\n\tid: string;\n\toptions: IAccessibleViewOptions;\n\tonClose(): void;\n\tprovideContent(): string;\n\tonOpen?(): void;\n\tactions?: IAction[];\n\tprovidePreviousContent?(): void;\n\tprovideNextContent?(): void;\n\tonDidChangeContent?: Event<void>;\n}\n"]}