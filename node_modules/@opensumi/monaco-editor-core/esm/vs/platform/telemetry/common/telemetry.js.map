{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/telemetry/common/telemetry.ts","vs/platform/telemetry/common/telemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAG9E,MAAM,CAAC,MAAM,iBAAiB,GAAG,eAAe,CAAoB,kBAAkB,CAAC,CAAC;AA+CxF,MAAM,CAAN,IAAkB,cAKjB;AALD,WAAkB,cAAc;IAC/B,mDAAQ,CAAA;IACR,qDAAS,CAAA;IACT,qDAAS,CAAA;IACT,qDAAS,CAAA;AACV,CAAC,EALiB,cAAc,KAAd,cAAc,QAK/B","file":"telemetry.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from './gdprTypings.js';\n\nexport const ITelemetryService = createDecorator<ITelemetryService>('telemetryService');\n\nexport interface ITelemetryData {\n\tfrom?: string;\n\ttarget?: string;\n\t[key: string]: any;\n}\n\nexport interface ITelemetryService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly telemetryLevel: TelemetryLevel;\n\n\treadonly sessionId: string;\n\treadonly machineId: string;\n\treadonly sqmId: string;\n\treadonly devDeviceId: string;\n\treadonly firstSessionDate: string;\n\treadonly msftInternal?: boolean;\n\n\t/**\n\t * Whether error telemetry will get sent. If false, `publicLogError` will no-op.\n\t */\n\treadonly sendErrorTelemetry: boolean;\n\n\t/**\n\t * @deprecated Use publicLog2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLog(eventName: string, data?: ITelemetryData): void;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\t/**\n\t * @deprecated Use publicLogError2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): void;\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\tsetExperimentProperty(name: string, value: string): void;\n}\n\nexport const enum TelemetryLevel {\n\tNONE = 0,\n\tCRASH = 1,\n\tERROR = 2,\n\tUSAGE = 3\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from './gdprTypings.js';\n\nexport const ITelemetryService = createDecorator<ITelemetryService>('telemetryService');\n\nexport interface ITelemetryData {\n\tfrom?: string;\n\ttarget?: string;\n\t[key: string]: any;\n}\n\nexport interface ITelemetryService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly telemetryLevel: TelemetryLevel;\n\n\treadonly sessionId: string;\n\treadonly machineId: string;\n\treadonly sqmId: string;\n\treadonly devDeviceId: string;\n\treadonly firstSessionDate: string;\n\treadonly msftInternal?: boolean;\n\n\t/**\n\t * Whether error telemetry will get sent. If false, `publicLogError` will no-op.\n\t */\n\treadonly sendErrorTelemetry: boolean;\n\n\t/**\n\t * @deprecated Use publicLog2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLog(eventName: string, data?: ITelemetryData): void;\n\n\t/**\n\t * Sends a telemetry event that has been privacy approved.\n\t * Do not call this unless you have been given approval.\n\t */\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\t/**\n\t * @deprecated Use publicLogError2 and the typescript GDPR annotation where possible\n\t */\n\tpublicLogError(errorEventName: string, data?: ITelemetryData): void;\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void;\n\n\tsetExperimentProperty(name: string, value: string): void;\n}\n\nexport const enum TelemetryLevel {\n\tNONE = 0,\n\tCRASH = 1,\n\tERROR = 2,\n\tUSAGE = 3\n}\n"]}