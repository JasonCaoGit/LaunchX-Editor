{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/platform/observable/common/platformObservableUtils.ts","vs/platform/observable/common/platformObservableUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,WAAW,EAAwB,uBAAuB,EAAE,MAAM,oCAAoC,CAAC;AAIhH,qEAAqE;AACrE,MAAM,UAAU,qBAAqB,CAAI,GAAW,EAAE,YAAe,EAAE,oBAA2C;IACjH,OAAO,uBAAuB,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,sBAAsB,GAAG,GAAG,GAAG,EAChF,CAAC,YAAY,EAAE,EAAE,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;QACnE,IAAI,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,EAAE,CAAC;YACjC,YAAY,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;IACF,CAAC,CAAC,EACF,GAAG,EAAE,CAAC,oBAAoB,CAAC,QAAQ,CAAI,GAAG,CAAC,IAAI,YAAY,CAC3D,CAAC;AACH,CAAC;AAED,0EAA0E;AAC1E,MAAM,UAAU,cAAc,CAA4B,GAAqB,EAAE,OAA2B,EAAE,YAAoC;IACjJ,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACrC,OAAO,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,oBAAoB,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,MAAM,CAAC,EAAE;QAChF,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;AACJ,CAAC","file":"platformObservableUtils.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { autorunOpts, IObservable, IReader, observableFromEventOpts } from '../../../base/common/observable.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ContextKeyValue, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\n\n/** Creates an observable update when a configuration key updates. */\nexport function observableConfigValue<T>(key: string, defaultValue: T, configurationService: IConfigurationService): IObservable<T> {\n\treturn observableFromEventOpts({ debugName: () => `Configuration Key \"${key}\"`, },\n\t\t(handleChange) => configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(key)) {\n\t\t\t\thandleChange(e);\n\t\t\t}\n\t\t}),\n\t\t() => configurationService.getValue<T>(key) ?? defaultValue\n\t);\n}\n\n/** Update the configuration key with a value derived from observables. */\nexport function bindContextKey<T extends ContextKeyValue>(key: RawContextKey<T>, service: IContextKeyService, computeValue: (reader: IReader) => T): IDisposable {\n\tconst boundKey = key.bindTo(service);\n\treturn autorunOpts({ debugName: () => `Set Context Key \"${key.key}\"` }, reader => {\n\t\tboundKey.set(computeValue(reader));\n\t});\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { autorunOpts, IObservable, IReader, observableFromEventOpts } from '../../../base/common/observable.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { ContextKeyValue, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\n\n/** Creates an observable update when a configuration key updates. */\nexport function observableConfigValue<T>(key: string, defaultValue: T, configurationService: IConfigurationService): IObservable<T> {\n\treturn observableFromEventOpts({ debugName: () => `Configuration Key \"${key}\"`, },\n\t\t(handleChange) => configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(key)) {\n\t\t\t\thandleChange(e);\n\t\t\t}\n\t\t}),\n\t\t() => configurationService.getValue<T>(key) ?? defaultValue\n\t);\n}\n\n/** Update the configuration key with a value derived from observables. */\nexport function bindContextKey<T extends ContextKeyValue>(key: RawContextKey<T>, service: IContextKeyService, computeValue: (reader: IReader) => T): IDisposable {\n\tconst boundKey = key.bindTo(service);\n\treturn autorunOpts({ debugName: () => `Set Context Key \"${key.key}\"` }, reader => {\n\t\tboundKey.set(computeValue(reader));\n\t});\n}\n\n"]}