/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
/* ---------------------------------------------------------------------------------------------
 * 本文件用于为 esm 版本的 monaco-editor 提供 nls 多语言支持
 * 不适用于其他版本 (dev/min)
 *---------------------------------------------------------------------------------------------*/
// eslint-disable-next-line local/code-import-patterns
import { getNLSLanguage } from './nls.messages.js';
// eslint-disable-next-line local/code-import-patterns
export { getNLSLanguage, getNLSMessages } from './nls.messages.js';
// @ts-ignore
const zhCnBundle = require('../nls.messages.zh-cn.json');
let defaultLocale;
let CURRENT_LOCALE_DATA = null;
let initialized = false;
const KAITIAN_LANGUAGE_KEY = 'general.language';
export var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["Default"] = 0] = "Default";
    PreferenceScope[PreferenceScope["User"] = 1] = "User";
})(PreferenceScope || (PreferenceScope = {}));
export const setLocale = (locale) => {
    defaultLocale = locale;
};
/**
 * 提供手动设置语言的方法 #setLocale
 * 如果在第一次调用 localize 前没有设置过 locale，则会走这里 fallback 的逻辑
 */
function initialLocaleBundle() {
    // @ts-ignore
    if (!global.localStorage || !self.localStorage) {
        return;
    }
    if (!defaultLocale) {
        if (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {
            setLocale(localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]);
        }
        else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {
            setLocale(localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]);
        }
        else {
            setLocale('zh-CN');
        }
    }
    // 由于目前仅支持中/英文，所以如果locale 为 'zh-cn'，则表示已经设置了中文，否则仅使用默认值，无需加载语言包
    if (defaultLocale?.toLowerCase() === 'zh-cn') {
        CURRENT_LOCALE_DATA = zhCnBundle;
    }
    initialized = true;
}
const isPseudo = getNLSLanguage() === 'pseudo' || (typeof document !== 'undefined' && document.location && typeof document.location.hash === 'string' && document.location.hash.indexOf('pseudo=true') >= 0);
function _format(message, args) {
    let result;
    if (args.length === 0) {
        result = message;
    }
    else {
        result = message.replace(/\{(\d+)\}/g, (match, rest) => {
            let index = rest[0];
            let arg = args[index];
            let result = match;
            if (typeof arg === 'string') {
                result = arg;
            }
            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {
                result = String(arg);
            }
            return result;
        });
    }
    if (isPseudo) {
        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]
        result = '\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\uFF3D';
    }
    return result;
}
export function localize(path, index, ...args) {
    // 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑
    if (!defaultLocale || !initialized) {
        initialLocaleBundle();
    }
    if (typeof path === 'string') {
        if (!CURRENT_LOCALE_DATA || !CURRENT_LOCALE_DATA[path]) {
            const [defaultMessage, ...otherArgs] = args;
            return _format(defaultMessage, otherArgs);
        }
        const dataBundle = CURRENT_LOCALE_DATA[path];
        const [defaultMessage, ...otherArgs] = args;
        return _format(dataBundle[index] || defaultMessage, otherArgs);
    }
    return _format(index, args);
}
export function localize2(path, index, ...args) {
    const res = localize(path, index, ...args);
    return {
        original: res,
        value: res
    };
}
//# sourceMappingURL=nls.js.map