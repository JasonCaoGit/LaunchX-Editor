{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/nls.ts","vs/nls.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG;;;iGAGiG;AACjG,sDAAsD;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,sDAAsD;AACtD,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnE,aAAa;AACb,MAAM,UAAU,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAEzD,IAAI,aAAiC,CAAC;AACtC,IAAI,mBAAmB,GAAwC,IAAI,CAAC;AACpE,IAAI,WAAW,GAAG,KAAK,CAAC;AACxB,MAAM,oBAAoB,GAAG,kBAAkB,CAAC;AAGhD,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IAC1B,2DAAO,CAAA;IACP,qDAAI,CAAA;AACL,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AACD,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,MAAkB,EAAQ,EAAE;IACrD,aAAa,GAAG,MAAM,CAAC;AACxB,CAAC,CAAA;AACD;;;GAGG;AACH,SAAS,mBAAmB;IAC3B,aAAa;IACb,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAChD,OAAO;IACR,CAAC;IACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACpB,IAAI,YAAY,CAAC,GAAG,eAAe,CAAC,IAAI,IAAI,oBAAoB,EAAE,CAAC,EAAE,CAAC;YACrE,SAAS,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC,IAAI,IAAI,oBAAoB,EAAE,CAAC,CAAC,CAAA;QAC3E,CAAC;aAAM,IAAI,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,IAAI,oBAAoB,EAAE,CAAC,EAAE,CAAC;YAC/E,SAAS,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,IAAI,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAC/E,CAAC;aAAM,CAAC;YACP,SAAS,CAAC,OAAO,CAAC,CAAA;QACnB,CAAC;IACF,CAAC;IACD,+DAA+D;IAC/D,IAAI,aAAa,EAAE,WAAW,EAAE,KAAK,OAAO,EAAE,CAAC;QAC9C,mBAAmB,GAAG,UAAU,CAAC;IAClC,CAAC;IACD,WAAW,GAAG,IAAI,CAAC;AACpB,CAAC;AAED,MAAM,QAAQ,GAAG,cAAc,EAAE,KAAK,QAAQ,IAAI,CAAC,OAAO,QAAQ,KAAK,WAAW,IAAI,QAAQ,CAAC,QAAQ,IAAI,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;AAY7M,SAAS,OAAO,CAAC,OAAe,EAAE,IAAsD;IACvF,IAAI,MAAc,CAAC;IAEnB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,MAAM,GAAG,OAAO,CAAC;IAClB,CAAC;SAAM,CAAC;QACP,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YACtD,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,IAAI,MAAM,GAAG,KAAK,CAAC;YACnB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAC7B,MAAM,GAAG,GAAG,CAAC;YACd,CAAC;iBAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,KAAK,CAAC,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;gBAClG,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC;YACD,OAAO,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,QAAQ,EAAE,CAAC;QACd,kEAAkE;QAClE,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC;IACnE,CAAC;IAED,OAAO,MAAM,CAAC;AACf,CAAC;AAWD,MAAM,UAAU,QAAQ,CAAC,IAA4B,EAAE,KAAsB,EAAE,GAAG,IAAW;IAC5F,6CAA6C;IAC7C,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,mBAAmB,EAAE,CAAC;IACvB,CAAC;IACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,mBAAmB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;YACxD,MAAM,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;YAC5C,OAAO,OAAO,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,cAAc,EAAE,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC;QAC5C,OAAO,OAAO,CAAC,UAAU,CAAC,KAA0B,CAAC,IAAI,cAAc,EAAE,SAAS,CAAC,CAAC;IACrF,CAAC;IACD,OAAO,OAAO,CAAC,KAA0B,EAAE,IAAI,CAAC,CAAC;AAClD,CAAC;AAID,MAAM,UAAU,SAAS,CAAC,IAA4B,EAAE,KAAsB,EAAE,GAAG,IAAW;IAC7F,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,KAAe,EAAE,GAAG,IAAI,CAAC,CAAC;IACrD,OAAO;QACN,QAAQ,EAAE,GAAG;QACb,KAAK,EAAE,GAAG;KACV,CAAC;AACH,CAAC","file":"nls.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* ---------------------------------------------------------------------------------------------\n * 本文件用于为 esm 版本的 monaco-editor 提供 nls 多语言支持\n * 不适用于其他版本 (dev/min)\n *---------------------------------------------------------------------------------------------*/\n// eslint-disable-next-line local/code-import-patterns\nimport { getNLSLanguage } from './nls.messages.js';\n// eslint-disable-next-line local/code-import-patterns\nexport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\n\n// @ts-ignore\nconst zhCnBundle = require('../nls.messages.zh-cn.json');\n\nlet defaultLocale: string | undefined;\nlet CURRENT_LOCALE_DATA: { [prop: string]: string[] } | null = null;\nlet initialized = false;\nconst KAITIAN_LANGUAGE_KEY = 'general.language';\n// 标准语种代码，目前仅支持中、英文\nexport type LocaleType = 'zh-CN' | 'en-US';\nexport enum PreferenceScope {\n\tDefault,\n\tUser,\n}\nexport const setLocale = (locale: LocaleType): void => {\n\tdefaultLocale = locale;\n}\n/**\n * 提供手动设置语言的方法 #setLocale\n * 如果在第一次调用 localize 前没有设置过 locale，则会走这里 fallback 的逻辑\n */\nfunction initialLocaleBundle() {\n\t// @ts-ignore\n\tif (!global.localStorage || !self.localStorage) {\n\t\treturn;\n\t}\n\tif (!defaultLocale) {\n\t\tif (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\tsetLocale(localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`])\n\t\t} else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\tsetLocale(localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]);\n\t\t} else {\n\t\t\tsetLocale('zh-CN')\n\t\t}\n\t}\n\t// 由于目前仅支持中/英文，所以如果locale 为 'zh-cn'，则表示已经设置了中文，否则仅使用默认值，无需加载语言包\n\tif (defaultLocale?.toLowerCase() === 'zh-cn') {\n\t\tCURRENT_LOCALE_DATA = zhCnBundle;\n\t}\n\tinitialized = true;\n}\n\nconst isPseudo = getNLSLanguage() === 'pseudo' || (typeof document !== 'undefined' && document.location && typeof document.location.hash === 'string' && document.location.hash.indexOf('pseudo=true') >= 0);\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport interface ILocalizedString {\n\toriginal: string;\n\tvalue: string;\n}\n\nfunction _format(message: string, args: (string | number | boolean | undefined | null)[]): string {\n\tlet result: string;\n\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n\t\t\tlet index = rest[0];\n\t\t\tlet arg = args[index];\n\t\t\tlet result = match;\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tresult = arg;\n\t\t\t} else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n\t\t\t\tresult = String(arg);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tif (isPseudo) {\n\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\tresult = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n\t}\n\n\treturn result;\n}\n\n/**\n * 这里的类型注释本质是为了让编译时类型校验能通过\n * @param data\n * @param message\n *\n * 在编译后，localize 调用方式为\n * localize('path/to/file', index, defaultMessage, ...args);\n */\nexport function localize(data: string | ILocalizeInfo, message: string, ...args: any[]): string;\nexport function localize(path: string | ILocalizeInfo, index: number | string, ...args: any[]): string {\n\t// 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑\n\tif (!defaultLocale || !initialized) {\n\t\tinitialLocaleBundle();\n\t}\n\tif (typeof path === 'string') {\n\t\tif (!CURRENT_LOCALE_DATA || !CURRENT_LOCALE_DATA[path]) {\n\t\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\t\treturn _format(defaultMessage, otherArgs);\n\t\t}\n\t\tconst dataBundle = CURRENT_LOCALE_DATA[path];\n\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\treturn _format(dataBundle[index as unknown as number] || defaultMessage, otherArgs);\n\t}\n\treturn _format(index as unknown as string, args);\n}\n\n\nexport function localize2(data: string | ILocalizeInfo, message: string, ...args: any[]): ILocalizedString;\nexport function localize2(path: string | ILocalizeInfo, index: number | string, ...args: any[]): ILocalizedString {\n\tconst res = localize(path, index as string, ...args);\n\treturn {\n\t\toriginal: res,\n\t\tvalue: res\n\t};\n}\n\nexport interface INLSLanguagePackConfiguration {\n\n\t/**\n\t * The path to the translations config file that contains pointers to\n\t * all message bundles for `main` and extensions.\n\t */\n\treadonly translationsConfigFile: string;\n\n\t/**\n\t * The path to the file containing the translations for this language\n\t * pack as flat string array.\n\t */\n\treadonly messagesFile: string;\n\n\t/**\n\t * The path to the file that can be used to signal a corrupt language\n\t * pack, for example when reading the `messagesFile` fails. This will\n\t * instruct the application to re-create the cache on next startup.\n\t */\n\treadonly corruptMarkerFile: string;\n}\n\nexport interface INLSConfiguration {\n\n\t/**\n\t * Locale as defined in `argv.json` or `app.getLocale()`.\n\t */\n\treadonly userLocale: string;\n\n\t/**\n\t * Locale as defined by the OS (e.g. `app.getPreferredSystemLanguages()`).\n\t */\n\treadonly osLocale: string;\n\n\t/**\n\t * The actual language of the UI that ends up being used considering `userLocale`\n\t * and `osLocale`.\n\t */\n\treadonly resolvedLanguage: string;\n\n\t/**\n\t * Defined if a language pack is used that is not the\n\t * default english language pack. This requires a language\n\t * pack to be installed as extension.\n\t */\n\treadonly languagePack?: INLSLanguagePackConfiguration;\n\n\t/**\n\t * The path to the file containing the default english messages\n\t * as flat string array. The file is only present in built\n\t * versions of the application.\n\t */\n\treadonly defaultMessagesFile: string;\n\n\t/**\n\t * Below properties are deprecated and only there to continue support\n\t * for `vscode-nls` module that depends on them.\n\t * Refs https://github.com/microsoft/vscode-nls/blob/main/src/node/main.ts#L36-L46\n\t */\n\t/** @deprecated */\n\treadonly locale: string;\n\t/** @deprecated */\n\treadonly availableLanguages: Record<string, string>;\n\t/** @deprecated */\n\treadonly _languagePackSupport?: boolean;\n\t/** @deprecated */\n\treadonly _languagePackId?: string;\n\t/** @deprecated */\n\treadonly _translationsConfigFile?: string;\n\t/** @deprecated */\n\treadonly _cacheRoot?: string;\n\t/** @deprecated */\n\treadonly _resolvedLanguagePackCoreLocation?: string;\n\t/** @deprecated */\n\treadonly _corruptedFile?: string;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* ---------------------------------------------------------------------------------------------\n * 本文件用于为 esm 版本的 monaco-editor 提供 nls 多语言支持\n * 不适用于其他版本 (dev/min)\n *---------------------------------------------------------------------------------------------*/\n// eslint-disable-next-line local/code-import-patterns\nimport { getNLSLanguage } from './nls.messages.js';\n// eslint-disable-next-line local/code-import-patterns\nexport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\n\n// @ts-ignore\nconst zhCnBundle = require('../nls.messages.zh-cn.json');\n\nlet defaultLocale: string | undefined;\nlet CURRENT_LOCALE_DATA: { [prop: string]: string[] } | null = null;\nlet initialized = false;\nconst KAITIAN_LANGUAGE_KEY = 'general.language';\n// 标准语种代码，目前仅支持中、英文\nexport type LocaleType = 'zh-CN' | 'en-US';\nexport enum PreferenceScope {\n\tDefault,\n\tUser,\n}\nexport const setLocale = (locale: LocaleType): void => {\n\tdefaultLocale = locale;\n}\n/**\n * 提供手动设置语言的方法 #setLocale\n * 如果在第一次调用 localize 前没有设置过 locale，则会走这里 fallback 的逻辑\n */\nfunction initialLocaleBundle() {\n\t// @ts-ignore\n\tif (!global.localStorage || !self.localStorage) {\n\t\treturn;\n\t}\n\tif (!defaultLocale) {\n\t\tif (localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\tsetLocale(localStorage[`${PreferenceScope.User}:${KAITIAN_LANGUAGE_KEY}`])\n\t\t} else if (localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]) {\n\t\t\tsetLocale(localStorage[`${PreferenceScope.Default}:${KAITIAN_LANGUAGE_KEY}`]);\n\t\t} else {\n\t\t\tsetLocale('zh-CN')\n\t\t}\n\t}\n\t// 由于目前仅支持中/英文，所以如果locale 为 'zh-cn'，则表示已经设置了中文，否则仅使用默认值，无需加载语言包\n\tif (defaultLocale?.toLowerCase() === 'zh-cn') {\n\t\tCURRENT_LOCALE_DATA = zhCnBundle;\n\t}\n\tinitialized = true;\n}\n\nconst isPseudo = getNLSLanguage() === 'pseudo' || (typeof document !== 'undefined' && document.location && typeof document.location.hash === 'string' && document.location.hash.indexOf('pseudo=true') >= 0);\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\nexport interface ILocalizedString {\n\toriginal: string;\n\tvalue: string;\n}\n\nfunction _format(message: string, args: (string | number | boolean | undefined | null)[]): string {\n\tlet result: string;\n\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n\t\t\tlet index = rest[0];\n\t\t\tlet arg = args[index];\n\t\t\tlet result = match;\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tresult = arg;\n\t\t\t} else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n\t\t\t\tresult = String(arg);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tif (isPseudo) {\n\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\tresult = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n\t}\n\n\treturn result;\n}\n\n/**\n * 这里的类型注释本质是为了让编译时类型校验能通过\n * @param data\n * @param message\n *\n * 在编译后，localize 调用方式为\n * localize('path/to/file', index, defaultMessage, ...args);\n */\nexport function localize(data: string | ILocalizeInfo, message: string, ...args: any[]): string;\nexport function localize(path: string | ILocalizeInfo, index: number | string, ...args: any[]): string {\n\t// 第一次调用 localize 时如果没有默认语言，或语言包尚未初始化，则走初始化逻辑\n\tif (!defaultLocale || !initialized) {\n\t\tinitialLocaleBundle();\n\t}\n\tif (typeof path === 'string') {\n\t\tif (!CURRENT_LOCALE_DATA || !CURRENT_LOCALE_DATA[path]) {\n\t\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\t\treturn _format(defaultMessage, otherArgs);\n\t\t}\n\t\tconst dataBundle = CURRENT_LOCALE_DATA[path];\n\t\tconst [defaultMessage, ...otherArgs] = args;\n\t\treturn _format(dataBundle[index as unknown as number] || defaultMessage, otherArgs);\n\t}\n\treturn _format(index as unknown as string, args);\n}\n\n\nexport function localize2(data: string | ILocalizeInfo, message: string, ...args: any[]): ILocalizedString;\nexport function localize2(path: string | ILocalizeInfo, index: number | string, ...args: any[]): ILocalizedString {\n\tconst res = localize(path, index as string, ...args);\n\treturn {\n\t\toriginal: res,\n\t\tvalue: res\n\t};\n}\n\nexport interface INLSLanguagePackConfiguration {\n\n\t/**\n\t * The path to the translations config file that contains pointers to\n\t * all message bundles for `main` and extensions.\n\t */\n\treadonly translationsConfigFile: string;\n\n\t/**\n\t * The path to the file containing the translations for this language\n\t * pack as flat string array.\n\t */\n\treadonly messagesFile: string;\n\n\t/**\n\t * The path to the file that can be used to signal a corrupt language\n\t * pack, for example when reading the `messagesFile` fails. This will\n\t * instruct the application to re-create the cache on next startup.\n\t */\n\treadonly corruptMarkerFile: string;\n}\n\nexport interface INLSConfiguration {\n\n\t/**\n\t * Locale as defined in `argv.json` or `app.getLocale()`.\n\t */\n\treadonly userLocale: string;\n\n\t/**\n\t * Locale as defined by the OS (e.g. `app.getPreferredSystemLanguages()`).\n\t */\n\treadonly osLocale: string;\n\n\t/**\n\t * The actual language of the UI that ends up being used considering `userLocale`\n\t * and `osLocale`.\n\t */\n\treadonly resolvedLanguage: string;\n\n\t/**\n\t * Defined if a language pack is used that is not the\n\t * default english language pack. This requires a language\n\t * pack to be installed as extension.\n\t */\n\treadonly languagePack?: INLSLanguagePackConfiguration;\n\n\t/**\n\t * The path to the file containing the default english messages\n\t * as flat string array. The file is only present in built\n\t * versions of the application.\n\t */\n\treadonly defaultMessagesFile: string;\n\n\t/**\n\t * Below properties are deprecated and only there to continue support\n\t * for `vscode-nls` module that depends on them.\n\t * Refs https://github.com/microsoft/vscode-nls/blob/main/src/node/main.ts#L36-L46\n\t */\n\t/** @deprecated */\n\treadonly locale: string;\n\t/** @deprecated */\n\treadonly availableLanguages: Record<string, string>;\n\t/** @deprecated */\n\treadonly _languagePackSupport?: boolean;\n\t/** @deprecated */\n\treadonly _languagePackId?: string;\n\t/** @deprecated */\n\treadonly _translationsConfigFile?: string;\n\t/** @deprecated */\n\treadonly _cacheRoot?: string;\n\t/** @deprecated */\n\treadonly _resolvedLanguagePackCoreLocation?: string;\n\t/** @deprecated */\n\treadonly _corruptedFile?: string;\n}\n"]}