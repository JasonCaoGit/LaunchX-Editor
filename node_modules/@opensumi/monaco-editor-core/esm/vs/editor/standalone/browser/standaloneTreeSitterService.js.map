{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/standalone/browser/standaloneTreeSitterService.ts","vs/editor/standalone/browser/standaloneTreeSitterService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AAItD;;;GAGG;AACH,MAAM,OAAO,iCAAiC;IAA9C;QAOC,oBAAe,GAA2B,KAAK,CAAC,IAAI,CAAC;QAErD,qBAAgB,GAAqD,KAAK,CAAC,IAAI,CAAC;IAQjF,CAAC;IAhBA,KAAK,CAAC,sBAAsB,CAAC,KAAiB,EAAE,gBAA0B;QACzE,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,KAAK,CAAC,OAAO,CAAC,OAAe,EAAE,UAAkB;QAChD,OAAO,SAAS,CAAC;IAClB,CAAC;IAKD,iBAAiB,CAAC,WAAmB;QACpC,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,cAAc,CAAC,SAAqB;QACnC,OAAO,SAAS,CAAC;IAClB,CAAC;CACD","file":"standaloneTreeSitterService.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../../common/model.js';\nimport { ITextModelTreeSitter, ITreeSitterParseResult, ITreeSitterParserService, TreeUpdateEvent } from '../../common/services/treeSitterParserService.js';\n\n/**\n * The monaco build doesn't like the dynamic import of tree sitter in the real service.\n * We use a dummy sertive here to make the build happy.\n */\nexport class StandaloneTreeSitterParserService implements ITreeSitterParserService {\n\tasync getTextModelTreeSitter(model: ITextModel, parseImmediately?: boolean): Promise<ITextModelTreeSitter | undefined> {\n\t\treturn undefined;\n\t}\n\tasync getTree(content: string, languageId: string): Promise<Parser.Tree | undefined> {\n\t\treturn undefined;\n\t}\n\tonDidUpdateTree: Event<TreeUpdateEvent> = Event.None;\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }> = Event.None;\n\n\tgetOrInitLanguage(_languageId: string): Parser.Language | undefined {\n\t\treturn undefined;\n\t}\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\treturn undefined;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../../common/model.js';\nimport { ITextModelTreeSitter, ITreeSitterParseResult, ITreeSitterParserService, TreeUpdateEvent } from '../../common/services/treeSitterParserService.js';\n\n/**\n * The monaco build doesn't like the dynamic import of tree sitter in the real service.\n * We use a dummy sertive here to make the build happy.\n */\nexport class StandaloneTreeSitterParserService implements ITreeSitterParserService {\n\tasync getTextModelTreeSitter(model: ITextModel, parseImmediately?: boolean): Promise<ITextModelTreeSitter | undefined> {\n\t\treturn undefined;\n\t}\n\tasync getTree(content: string, languageId: string): Promise<Parser.Tree | undefined> {\n\t\treturn undefined;\n\t}\n\tonDidUpdateTree: Event<TreeUpdateEvent> = Event.None;\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }> = Event.None;\n\n\tgetOrInitLanguage(_languageId: string): Parser.Language | undefined {\n\t\treturn undefined;\n\t}\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\treturn undefined;\n\t}\n}\n"]}