{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/inputMode.ts","vs/editor/common/inputMode.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,OAAO,EAAS,MAAM,4BAA4B,CAAC;AAE5D,MAAM,aAAa;IAAnB;QAES,eAAU,GAA0B,QAAQ,CAAC;QACpC,0BAAqB,GAAG,IAAI,OAAO,EAAyB,CAAC;QAC9D,yBAAoB,GAAiC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;IAUvG,CAAC;IARO,YAAY;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAEM,YAAY,CAAC,SAAgC;QACnD,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;CACD;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC","file":"inputMode.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../base/common/event.js';\n\nclass InputModeImpl {\n\n\tprivate _inputMode: 'overtype' | 'insert' = 'insert';\n\tprivate readonly _onDidChangeInputMode = new Emitter<'overtype' | 'insert'>();\n\tpublic readonly onDidChangeInputMode: Event<'overtype' | 'insert'> = this._onDidChangeInputMode.event;\n\n\tpublic getInputMode(): 'overtype' | 'insert' {\n\t\treturn this._inputMode;\n\t}\n\n\tpublic setInputMode(inputMode: 'overtype' | 'insert'): void {\n\t\tthis._inputMode = inputMode;\n\t\tthis._onDidChangeInputMode.fire(this._inputMode);\n\t}\n}\n\n/**\n * Controls the type mode, whether insert or overtype\n */\nexport const InputMode = new InputModeImpl();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../base/common/event.js';\n\nclass InputModeImpl {\n\n\tprivate _inputMode: 'overtype' | 'insert' = 'insert';\n\tprivate readonly _onDidChangeInputMode = new Emitter<'overtype' | 'insert'>();\n\tpublic readonly onDidChangeInputMode: Event<'overtype' | 'insert'> = this._onDidChangeInputMode.event;\n\n\tpublic getInputMode(): 'overtype' | 'insert' {\n\t\treturn this._inputMode;\n\t}\n\n\tpublic setInputMode(inputMode: 'overtype' | 'insert'): void {\n\t\tthis._inputMode = inputMode;\n\t\tthis._onDidChangeInputMode.fire(this._inputMode);\n\t}\n}\n\n/**\n * Controls the type mode, whether insert or overtype\n */\nexport const InputMode = new InputModeImpl();\n"]}