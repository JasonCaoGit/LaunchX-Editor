{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/model/treeSitterTokenStoreService.ts","vs/editor/common/model/treeSitterTokenStoreService.ts"],"names":[],"mappings":"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","file":"treeSitterTokenStoreService.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { TokenStore, TokenUpdate } from './tokenStore.js';\nimport { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\n\nexport interface ITreeSitterTokenizationStoreService {\n\treadonly _serviceBrand: undefined;\n\tsetTokens(model: ITextModel, tokens: TokenUpdate[]): void;\n\tgetTokens(model: ITextModel, line: number): Uint32Array | undefined;\n\tupdateTokens(model: ITextModel, version: number, updates: { oldRangeLength: number; newTokens: TokenUpdate[] }[]): void;\n\tmarkForRefresh(model: ITextModel, range: Range): void;\n\tgetNeedsRefresh(model: ITextModel): { range: Range; startOffset: number; endOffset: number }[];\n\thasTokens(model: ITextModel, accurateForRange?: Range): boolean;\n}\n\nexport const ITreeSitterTokenizationStoreService = createDecorator<ITreeSitterTokenizationStoreService>('treeSitterTokenizationStoreService');\n\nclass TreeSitterTokenizationStoreService implements ITreeSitterTokenizationStoreService, IDisposable {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly tokens = new Map<ITextModel, { store: TokenStore; accurateVersion: number; guessVersion: number; readonly disposables: DisposableStore }>();\n\n\tconstructor() { }\n\n\tsetTokens(model: ITextModel, tokens: TokenUpdate[]): void {\n\t\tconst disposables = new DisposableStore();\n\t\tconst store = disposables.add(new TokenStore(model));\n\t\tthis.tokens.set(model, { store: store, accurateVersion: model.getVersionId(), disposables, guessVersion: model.getVersionId() });\n\n\t\tstore.buildStore(tokens);\n\t\tdisposables.add(model.onDidChangeContent(e => {\n\t\t\tconst storeInfo = this.tokens.get(model);\n\t\t\tif (!storeInfo) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreInfo.guessVersion = e.versionId;\n\t\t\tfor (const change of e.changes) {\n\t\t\t\tif (change.text.length > change.rangeLength) {\n\t\t\t\t\tconst oldToken = storeInfo.store.getTokenAt(change.rangeOffset);\n\t\t\t\t\tlet newToken: TokenUpdate;\n\t\t\t\t\tif (oldToken) {\n\t\t\t\t\t\t// Insert. Just grow the token at this position to include the insert.\n\t\t\t\t\t\tnewToken = { startOffsetInclusive: oldToken.startOffsetInclusive, length: oldToken.length + change.text.length - change.rangeLength, token: oldToken.token };\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// The document got larger and the change is at the end of the document.\n\t\t\t\t\t\tnewToken = { startOffsetInclusive: change.rangeOffset, length: change.text.length, token: 0 };\n\t\t\t\t\t}\n\t\t\t\t\tstoreInfo.store.update(oldToken?.length ?? 0, [newToken], true);\n\t\t\t\t} else if (change.text.length < change.rangeLength) {\n\t\t\t\t\t// Delete. Delete the tokens at the corresponding range.\n\t\t\t\t\tconst deletedCharCount = change.rangeLength - change.text.length;\n\t\t\t\t\tstoreInfo.store.delete(deletedCharCount, change.rangeOffset);\n\t\t\t\t}\n\t\t\t\tconst refreshLength = change.rangeLength > change.text.length ? change.rangeLength : change.text.length;\n\t\t\t\tstoreInfo.store.markForRefresh(change.rangeOffset, change.rangeOffset + refreshLength);\n\t\t\t}\n\t\t}));\n\t\tdisposables.add(model.onWillDispose(() => {\n\t\t\tconst storeInfo = this.tokens.get(model);\n\t\t\tif (storeInfo) {\n\t\t\t\tstoreInfo.disposables.dispose();\n\t\t\t\tthis.tokens.delete(model);\n\t\t\t}\n\t\t}));\n\t}\n\n\thasTokens(model: ITextModel, accurateForRange?: Range): boolean {\n\t\tconst tokens = this.tokens.get(model);\n\t\tif (!tokens) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!accurateForRange || (tokens.guessVersion === tokens.accurateVersion)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !tokens.store.rangeNeedsRefresh(model.getOffsetAt(accurateForRange.getStartPosition()), model.getOffsetAt(accurateForRange.getEndPosition()));\n\t}\n\n\tgetTokens(model: ITextModel, line: number): Uint32Array | undefined {\n\t\tconst tokens = this.tokens.get(model)?.store;\n\t\tif (!tokens) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst lineStartOffset = model.getOffsetAt({ lineNumber: line, column: 1 });\n\t\tconst lineTokens = tokens.getTokensInRange(lineStartOffset, model.getOffsetAt({ lineNumber: line, column: model.getLineMaxColumn(line) }) + 1);\n\t\tconst result = new Uint32Array(lineTokens.length * 2);\n\t\tfor (let i = 0; i < lineTokens.length; i++) {\n\t\t\tresult[i * 2] = lineTokens[i].startOffsetInclusive - lineStartOffset + lineTokens[i].length;\n\t\t\tresult[i * 2 + 1] = lineTokens[i].token;\n\t\t}\n\t\treturn result;\n\t}\n\n\tupdateTokens(model: ITextModel, version: number, updates: { oldRangeLength: number; newTokens: TokenUpdate[] }[]): void {\n\t\tconst existingTokens = this.tokens.get(model);\n\t\tif (!existingTokens) {\n\t\t\treturn;\n\t\t}\n\n\t\texistingTokens.accurateVersion = version;\n\t\tfor (const update of updates) {\n\t\t\tconst lastToken = update.newTokens.length > 0 ? update.newTokens[update.newTokens.length - 1] : undefined;\n\t\t\tconst oldRangeLength = ((existingTokens.guessVersion >= version) && lastToken) ? (lastToken.startOffsetInclusive + lastToken.length - update.newTokens[0].startOffsetInclusive) : update.oldRangeLength;\n\t\t\texistingTokens.store.update(oldRangeLength, update.newTokens);\n\t\t}\n\t}\n\n\tmarkForRefresh(model: ITextModel, range: Range): void {\n\t\tconst tree = this.tokens.get(model)?.store;\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\n\t\ttree.markForRefresh(model.getOffsetAt(range.getStartPosition()), model.getOffsetAt(range.getEndPosition()));\n\t}\n\n\tgetNeedsRefresh(model: ITextModel): { range: Range; startOffset: number; endOffset: number }[] {\n\t\tconst needsRefreshOffsetRanges = this.tokens.get(model)?.store.getNeedsRefresh();\n\t\tif (!needsRefreshOffsetRanges) {\n\t\t\treturn [];\n\t\t}\n\t\treturn needsRefreshOffsetRanges.map(range => ({\n\t\t\trange: Range.fromPositions(model.getPositionAt(range.startOffset), model.getPositionAt(range.endOffset)),\n\t\t\tstartOffset: range.startOffset,\n\t\t\tendOffset: range.endOffset\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tfor (const [, value] of this.tokens) {\n\t\t\tvalue.disposables.dispose();\n\t\t}\n\t}\n}\n\nregisterSingleton(ITreeSitterTokenizationStoreService, TreeSitterTokenizationStoreService, InstantiationType.Delayed);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { TokenStore, TokenUpdate } from './tokenStore.js';\nimport { InstantiationType, registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { DisposableStore, IDisposable } from '../../../base/common/lifecycle.js';\n\nexport interface ITreeSitterTokenizationStoreService {\n\treadonly _serviceBrand: undefined;\n\tsetTokens(model: ITextModel, tokens: TokenUpdate[]): void;\n\tgetTokens(model: ITextModel, line: number): Uint32Array | undefined;\n\tupdateTokens(model: ITextModel, version: number, updates: { oldRangeLength: number; newTokens: TokenUpdate[] }[]): void;\n\tmarkForRefresh(model: ITextModel, range: Range): void;\n\tgetNeedsRefresh(model: ITextModel): { range: Range; startOffset: number; endOffset: number }[];\n\thasTokens(model: ITextModel, accurateForRange?: Range): boolean;\n}\n\nexport const ITreeSitterTokenizationStoreService = createDecorator<ITreeSitterTokenizationStoreService>('treeSitterTokenizationStoreService');\n\nclass TreeSitterTokenizationStoreService implements ITreeSitterTokenizationStoreService, IDisposable {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly tokens = new Map<ITextModel, { store: TokenStore; accurateVersion: number; guessVersion: number; readonly disposables: DisposableStore }>();\n\n\tconstructor() { }\n\n\tsetTokens(model: ITextModel, tokens: TokenUpdate[]): void {\n\t\tconst disposables = new DisposableStore();\n\t\tconst store = disposables.add(new TokenStore(model));\n\t\tthis.tokens.set(model, { store: store, accurateVersion: model.getVersionId(), disposables, guessVersion: model.getVersionId() });\n\n\t\tstore.buildStore(tokens);\n\t\tdisposables.add(model.onDidChangeContent(e => {\n\t\t\tconst storeInfo = this.tokens.get(model);\n\t\t\tif (!storeInfo) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstoreInfo.guessVersion = e.versionId;\n\t\t\tfor (const change of e.changes) {\n\t\t\t\tif (change.text.length > change.rangeLength) {\n\t\t\t\t\tconst oldToken = storeInfo.store.getTokenAt(change.rangeOffset);\n\t\t\t\t\tlet newToken: TokenUpdate;\n\t\t\t\t\tif (oldToken) {\n\t\t\t\t\t\t// Insert. Just grow the token at this position to include the insert.\n\t\t\t\t\t\tnewToken = { startOffsetInclusive: oldToken.startOffsetInclusive, length: oldToken.length + change.text.length - change.rangeLength, token: oldToken.token };\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// The document got larger and the change is at the end of the document.\n\t\t\t\t\t\tnewToken = { startOffsetInclusive: change.rangeOffset, length: change.text.length, token: 0 };\n\t\t\t\t\t}\n\t\t\t\t\tstoreInfo.store.update(oldToken?.length ?? 0, [newToken], true);\n\t\t\t\t} else if (change.text.length < change.rangeLength) {\n\t\t\t\t\t// Delete. Delete the tokens at the corresponding range.\n\t\t\t\t\tconst deletedCharCount = change.rangeLength - change.text.length;\n\t\t\t\t\tstoreInfo.store.delete(deletedCharCount, change.rangeOffset);\n\t\t\t\t}\n\t\t\t\tconst refreshLength = change.rangeLength > change.text.length ? change.rangeLength : change.text.length;\n\t\t\t\tstoreInfo.store.markForRefresh(change.rangeOffset, change.rangeOffset + refreshLength);\n\t\t\t}\n\t\t}));\n\t\tdisposables.add(model.onWillDispose(() => {\n\t\t\tconst storeInfo = this.tokens.get(model);\n\t\t\tif (storeInfo) {\n\t\t\t\tstoreInfo.disposables.dispose();\n\t\t\t\tthis.tokens.delete(model);\n\t\t\t}\n\t\t}));\n\t}\n\n\thasTokens(model: ITextModel, accurateForRange?: Range): boolean {\n\t\tconst tokens = this.tokens.get(model);\n\t\tif (!tokens) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!accurateForRange || (tokens.guessVersion === tokens.accurateVersion)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !tokens.store.rangeNeedsRefresh(model.getOffsetAt(accurateForRange.getStartPosition()), model.getOffsetAt(accurateForRange.getEndPosition()));\n\t}\n\n\tgetTokens(model: ITextModel, line: number): Uint32Array | undefined {\n\t\tconst tokens = this.tokens.get(model)?.store;\n\t\tif (!tokens) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst lineStartOffset = model.getOffsetAt({ lineNumber: line, column: 1 });\n\t\tconst lineTokens = tokens.getTokensInRange(lineStartOffset, model.getOffsetAt({ lineNumber: line, column: model.getLineMaxColumn(line) }) + 1);\n\t\tconst result = new Uint32Array(lineTokens.length * 2);\n\t\tfor (let i = 0; i < lineTokens.length; i++) {\n\t\t\tresult[i * 2] = lineTokens[i].startOffsetInclusive - lineStartOffset + lineTokens[i].length;\n\t\t\tresult[i * 2 + 1] = lineTokens[i].token;\n\t\t}\n\t\treturn result;\n\t}\n\n\tupdateTokens(model: ITextModel, version: number, updates: { oldRangeLength: number; newTokens: TokenUpdate[] }[]): void {\n\t\tconst existingTokens = this.tokens.get(model);\n\t\tif (!existingTokens) {\n\t\t\treturn;\n\t\t}\n\n\t\texistingTokens.accurateVersion = version;\n\t\tfor (const update of updates) {\n\t\t\tconst lastToken = update.newTokens.length > 0 ? update.newTokens[update.newTokens.length - 1] : undefined;\n\t\t\tconst oldRangeLength = ((existingTokens.guessVersion >= version) && lastToken) ? (lastToken.startOffsetInclusive + lastToken.length - update.newTokens[0].startOffsetInclusive) : update.oldRangeLength;\n\t\t\texistingTokens.store.update(oldRangeLength, update.newTokens);\n\t\t}\n\t}\n\n\tmarkForRefresh(model: ITextModel, range: Range): void {\n\t\tconst tree = this.tokens.get(model)?.store;\n\t\tif (!tree) {\n\t\t\treturn;\n\t\t}\n\n\t\ttree.markForRefresh(model.getOffsetAt(range.getStartPosition()), model.getOffsetAt(range.getEndPosition()));\n\t}\n\n\tgetNeedsRefresh(model: ITextModel): { range: Range; startOffset: number; endOffset: number }[] {\n\t\tconst needsRefreshOffsetRanges = this.tokens.get(model)?.store.getNeedsRefresh();\n\t\tif (!needsRefreshOffsetRanges) {\n\t\t\treturn [];\n\t\t}\n\t\treturn needsRefreshOffsetRanges.map(range => ({\n\t\t\trange: Range.fromPositions(model.getPositionAt(range.startOffset), model.getPositionAt(range.endOffset)),\n\t\t\tstartOffset: range.startOffset,\n\t\t\tendOffset: range.endOffset\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tfor (const [, value] of this.tokens) {\n\t\t\tvalue.disposables.dispose();\n\t\t}\n\t}\n}\n\nregisterSingleton(ITreeSitterTokenizationStoreService, TreeSitterTokenizationStoreService, InstantiationType.Delayed);\n"]}