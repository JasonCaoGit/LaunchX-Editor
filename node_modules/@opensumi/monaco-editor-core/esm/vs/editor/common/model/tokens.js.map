{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/model/tokens.ts","vs/editor/common/model/tokens.ts"],"names":[],"mappings":"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","file":"tokens.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { IAttachedView } from '../model.js';\nimport { TextModel } from './textModel.js';\nimport { IModelContentChangedEvent, IModelTokensChangedEvent } from '../textModelEvents.js';\nimport { BackgroundTokenizationState } from '../tokenizationTextModelPart.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{ view: IAttachedView; state: IAttachedViewState | undefined }>();\n\tpublic readonly onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IAttachedViewState {\n\treadonly visibleLineRanges: readonly LineRange[];\n\treadonly stabilized: boolean;\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tconstructor(private readonly handleStateChange: (state: IAttachedViewState) => void) { }\n\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void {\n\t\tconst visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n\t\tthis.handleStateChange({ visibleLineRanges, stabilized });\n\t}\n}\n\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: IAttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractTokens extends Disposable {\n\tprotected _backgroundTokenizationState = BackgroundTokenizationState.InProgress;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected readonly _onDidChangeBackgroundTokenizationState = this._register(new Emitter<void>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeBackgroundTokenizationState: Event<void> = this._onDidChangeBackgroundTokenizationState.event;\n\n\tprotected readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t\tprotected getLanguageId: () => string,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;\n\n\tpublic abstract tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../languages.js';\nimport { IAttachedView } from '../model.js';\nimport { TextModel } from './textModel.js';\nimport { IModelContentChangedEvent, IModelTokensChangedEvent } from '../textModelEvents.js';\nimport { BackgroundTokenizationState } from '../tokenizationTextModelPart.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{ view: IAttachedView; state: IAttachedViewState | undefined }>();\n\tpublic readonly onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t}\n}\n\n/**\n * @internal\n */\nexport interface IAttachedViewState {\n\treadonly visibleLineRanges: readonly LineRange[];\n\treadonly stabilized: boolean;\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tconstructor(private readonly handleStateChange: (state: IAttachedViewState) => void) { }\n\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void {\n\t\tconst visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n\t\tthis.handleStateChange({ visibleLineRanges, stabilized });\n\t}\n}\n\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: IAttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractTokens extends Disposable {\n\tprotected _backgroundTokenizationState = BackgroundTokenizationState.InProgress;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected readonly _onDidChangeBackgroundTokenizationState = this._register(new Emitter<void>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeBackgroundTokenizationState: Event<void> = this._onDidChangeBackgroundTokenizationState.event;\n\n\tprotected readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t\tprotected getLanguageId: () => string,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;\n\n\tpublic abstract tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n"]}