{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/model/treeSitterTokens.ts","vs/editor/common/model/treeSitterTokens.ts"],"names":[],"mappings":"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","file":"treeSitterTokens.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec, ITreeSitterTokenizationSupport, TreeSitterTokenizationRegistry } from '../languages.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { TextModel } from './textModel.js';\nimport { IModelContentChangedEvent } from '../textModelEvents.js';\nimport { AbstractTokens } from './tokens.js';\nimport { IDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { ITreeSitterTokenizationStoreService } from './treeSitterTokenStoreService.js';\nimport { Range } from '../core/range.js';\n\nexport class TreeSitterTokens extends AbstractTokens {\n\tprivate _tokenizationSupport: ITreeSitterTokenizationSupport | null = null;\n\tprivate _lastLanguageId: string | undefined;\n\tprivate readonly _tokensChangedListener: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\n\tconstructor(languageIdCodec: ILanguageIdCodec,\n\t\ttextModel: TextModel,\n\t\tlanguageId: () => string,\n\t\t@ITreeSitterTokenizationStoreService private readonly _tokenStore: ITreeSitterTokenizationStoreService) {\n\t\tsuper(languageIdCodec, textModel, languageId);\n\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize() {\n\t\tconst newLanguage = this.getLanguageId();\n\t\tif (!this._tokenizationSupport || this._lastLanguageId !== newLanguage) {\n\t\t\tthis._lastLanguageId = newLanguage;\n\t\t\tthis._tokenizationSupport = TreeSitterTokenizationRegistry.get(newLanguage);\n\t\t\tthis._tokensChangedListener.value = this._tokenizationSupport?.onDidChangeTokens((e) => {\n\t\t\t\tif (e.textModel === this._textModel) {\n\t\t\t\t\tthis._onDidChangeTokens.fire(e.changes);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst content = this._textModel.getLineContent(lineNumber);\n\t\tif (this._tokenizationSupport) {\n\t\t\tconst rawTokens = this._tokenStore.getTokens(this._textModel, lineNumber);\n\t\t\tif (rawTokens) {\n\t\t\t\treturn new LineTokens(rawTokens, content, this._languageIdCodec);\n\t\t\t}\n\t\t}\n\t\treturn LineTokens.createEmpty(content, this._languageIdCodec);\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent: boolean = true): void {\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\tthis._initialize();\n\t}\n\n\tpublic override handleDidChangeAttached(): void {\n\t\t// TODO @alexr00 implement for background tokenization\n\t}\n\n\tpublic override handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t}\n\t}\n\n\tpublic override forceTokenization(lineNumber: number): void {\n\t\tif (this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport.tokenizeEncoded(lineNumber, this._textModel);\n\t\t}\n\t}\n\n\tpublic override hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\treturn this._tokenStore.hasTokens(this._textModel, new Range(lineNumber, 1, lineNumber, this._textModel.getLineMaxColumn(lineNumber)));\n\t}\n\n\tpublic override isCheapToTokenize(lineNumber: number): boolean {\n\t\t// TODO @alexr00 determine what makes it cheap to tokenize?\n\t\treturn true;\n\t}\n\n\tpublic override getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\t// TODO @alexr00 implement once we have custom parsing and don't just feed in the whole text model value\n\t\treturn StandardTokenType.Other;\n\t}\n\tpublic override tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null {\n\t\t// TODO @alexr00 understand what this is for and implement\n\t\treturn null;\n\t}\n\tpublic override get hasTokens(): boolean {\n\t\treturn this._tokenStore.hasTokens(this._textModel);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec, ITreeSitterTokenizationSupport, TreeSitterTokenizationRegistry } from '../languages.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { StandardTokenType } from '../encodedTokenAttributes.js';\nimport { TextModel } from './textModel.js';\nimport { IModelContentChangedEvent } from '../textModelEvents.js';\nimport { AbstractTokens } from './tokens.js';\nimport { IDisposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { ITreeSitterTokenizationStoreService } from './treeSitterTokenStoreService.js';\nimport { Range } from '../core/range.js';\n\nexport class TreeSitterTokens extends AbstractTokens {\n\tprivate _tokenizationSupport: ITreeSitterTokenizationSupport | null = null;\n\tprivate _lastLanguageId: string | undefined;\n\tprivate readonly _tokensChangedListener: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\n\tconstructor(languageIdCodec: ILanguageIdCodec,\n\t\ttextModel: TextModel,\n\t\tlanguageId: () => string,\n\t\t@ITreeSitterTokenizationStoreService private readonly _tokenStore: ITreeSitterTokenizationStoreService) {\n\t\tsuper(languageIdCodec, textModel, languageId);\n\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize() {\n\t\tconst newLanguage = this.getLanguageId();\n\t\tif (!this._tokenizationSupport || this._lastLanguageId !== newLanguage) {\n\t\t\tthis._lastLanguageId = newLanguage;\n\t\t\tthis._tokenizationSupport = TreeSitterTokenizationRegistry.get(newLanguage);\n\t\t\tthis._tokensChangedListener.value = this._tokenizationSupport?.onDidChangeTokens((e) => {\n\t\t\t\tif (e.textModel === this._textModel) {\n\t\t\t\t\tthis._onDidChangeTokens.fire(e.changes);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst content = this._textModel.getLineContent(lineNumber);\n\t\tif (this._tokenizationSupport) {\n\t\t\tconst rawTokens = this._tokenStore.getTokens(this._textModel, lineNumber);\n\t\t\tif (rawTokens) {\n\t\t\t\treturn new LineTokens(rawTokens, content, this._languageIdCodec);\n\t\t\t}\n\t\t}\n\t\treturn LineTokens.createEmpty(content, this._languageIdCodec);\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent: boolean = true): void {\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\t\tthis._initialize();\n\t}\n\n\tpublic override handleDidChangeAttached(): void {\n\t\t// TODO @alexr00 implement for background tokenization\n\t}\n\n\tpublic override handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t}\n\t}\n\n\tpublic override forceTokenization(lineNumber: number): void {\n\t\tif (this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport.tokenizeEncoded(lineNumber, this._textModel);\n\t\t}\n\t}\n\n\tpublic override hasAccurateTokensForLine(lineNumber: number): boolean {\n\t\treturn this._tokenStore.hasTokens(this._textModel, new Range(lineNumber, 1, lineNumber, this._textModel.getLineMaxColumn(lineNumber)));\n\t}\n\n\tpublic override isCheapToTokenize(lineNumber: number): boolean {\n\t\t// TODO @alexr00 determine what makes it cheap to tokenize?\n\t\treturn true;\n\t}\n\n\tpublic override getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\t// TODO @alexr00 implement once we have custom parsing and don't just feed in the whole text model value\n\t\treturn StandardTokenType.Other;\n\t}\n\tpublic override tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null {\n\t\t// TODO @alexr00 understand what this is for and implement\n\t\treturn null;\n\t}\n\tpublic override get hasTokens(): boolean {\n\t\treturn this._tokenStore.hasTokens(this._textModel);\n\t}\n}\n"]}