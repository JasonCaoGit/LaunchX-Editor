{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/services/treeSitterParserService.ts","vs/editor/common/services/treeSitterParserService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAKhG,OAAO,EAAE,eAAe,EAAE,MAAM,yDAAyD,CAAC;AAG1F,MAAM,CAAC,MAAM,wBAAwB,GAAG,eAAe,CAA2B,yBAAyB,CAAC,CAAC","file":"treeSitterParserService.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../model.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { Range } from '../core/range.js';\n\nexport const ITreeSitterParserService = createDecorator<ITreeSitterParserService>('treeSitterParserService');\n\nexport interface RangeChange {\n\tnewRange: Range;\n\toldRangeLength: number;\n\tnewRangeStartOffset: number;\n\tnewRangeEndOffset: number;\n}\n\nexport interface TreeUpdateEvent {\n\ttextModel: ITextModel;\n\tranges: RangeChange[];\n\tversionId: number;\n}\n\nexport interface ITreeSitterParserService {\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }>;\n\tgetOrInitLanguage(languageId: string): Parser.Language | undefined;\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined;\n\tgetTree(content: string, languageId: string): Promise<Parser.Tree | undefined>;\n\tonDidUpdateTree: Event<TreeUpdateEvent>;\n\t/**\n\t * For testing purposes so that the time to parse can be measured.\n\t*/\n\tgetTextModelTreeSitter(model: ITextModel, parseImmediately?: boolean): Promise<ITextModelTreeSitter | undefined>;\n}\n\nexport interface ITreeSitterParseResult {\n\treadonly tree: Parser.Tree | undefined;\n\treadonly language: Parser.Language;\n\tversionId: number;\n}\n\nexport interface ITextModelTreeSitter {\n\t/**\n\t * For testing purposes so that the time to parse can be measured.\n\t */\n\tparse(languageId?: string): Promise<ITreeSitterParseResult | undefined>;\n\tdispose(): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../model.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { Range } from '../core/range.js';\n\nexport const ITreeSitterParserService = createDecorator<ITreeSitterParserService>('treeSitterParserService');\n\nexport interface RangeChange {\n\tnewRange: Range;\n\toldRangeLength: number;\n\tnewRangeStartOffset: number;\n\tnewRangeEndOffset: number;\n}\n\nexport interface TreeUpdateEvent {\n\ttextModel: ITextModel;\n\tranges: RangeChange[];\n\tversionId: number;\n}\n\nexport interface ITreeSitterParserService {\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }>;\n\tgetOrInitLanguage(languageId: string): Parser.Language | undefined;\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined;\n\tgetTree(content: string, languageId: string): Promise<Parser.Tree | undefined>;\n\tonDidUpdateTree: Event<TreeUpdateEvent>;\n\t/**\n\t * For testing purposes so that the time to parse can be measured.\n\t*/\n\tgetTextModelTreeSitter(model: ITextModel, parseImmediately?: boolean): Promise<ITextModelTreeSitter | undefined>;\n}\n\nexport interface ITreeSitterParseResult {\n\treadonly tree: Parser.Tree | undefined;\n\treadonly language: Parser.Language;\n\tversionId: number;\n}\n\nexport interface ITextModelTreeSitter {\n\t/**\n\t * For testing purposes so that the time to parse can be measured.\n\t */\n\tparse(languageId?: string): Promise<ITreeSitterParseResult | undefined>;\n\tdispose(): void;\n}\n"]}