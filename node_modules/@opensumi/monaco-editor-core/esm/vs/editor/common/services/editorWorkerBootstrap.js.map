{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/common/services/editorWorkerBootstrap.ts","vs/editor/common/services/editorWorkerBootstrap.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAiB,kBAAkB,EAAE,MAAM,6CAA6C,CAAC;AAChG,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAWzD,IAAI,WAAW,GAAG,KAAK,CAAC;AAExB,MAAM,UAAU,UAAU,CAAC,OAAY;IACtC,IAAI,WAAW,EAAE,CAAC;QACjB,OAAO;IACR,CAAC;IACD,WAAW,GAAG,IAAI,CAAC;IAEnB,MAAM,YAAY,GAAG,IAAI,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;QACnD,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,EAAE,CAAC,YAA2B,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,gBAAgB,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAE7G,UAAU,CAAC,SAAS,GAAG,CAAC,CAAe,EAAE,EAAE;QAC1C,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC;AACH,CAAC;AAED,UAAU,CAAC,SAAS,GAAG,CAAC,CAAe,EAAE,EAAE;IAC1C,0EAA0E;IAC1E,IAAI,CAAC,WAAW,EAAE,CAAC;QAClB,UAAU,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;AACF,CAAC,CAAC","file":"editorWorkerBootstrap.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkerServer, SimpleWorkerServer } from '../../../base/common/worker/simpleWorker.js';\nimport { EditorSimpleWorker } from './editorSimpleWorker.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\n\ntype MessageEvent = {\n\tdata: any;\n};\n\ndeclare const globalThis: {\n\tpostMessage: (message: any) => void;\n\tonmessage: (event: MessageEvent) => void;\n};\n\nlet initialized = false;\n\nexport function initialize(factory: any) {\n\tif (initialized) {\n\t\treturn;\n\t}\n\tinitialized = true;\n\n\tconst simpleWorker = new SimpleWorkerServer((msg) => {\n\t\tglobalThis.postMessage(msg);\n\t}, (workerServer: IWorkerServer) => new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null));\n\n\tglobalThis.onmessage = (e: MessageEvent) => {\n\t\tsimpleWorker.onmessage(e.data);\n\t};\n}\n\nglobalThis.onmessage = (e: MessageEvent) => {\n\t// Ignore first message in this case and initialize if not yet initialized\n\tif (!initialized) {\n\t\tinitialize(null);\n\t}\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkerServer, SimpleWorkerServer } from '../../../base/common/worker/simpleWorker.js';\nimport { EditorSimpleWorker } from './editorSimpleWorker.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\n\ntype MessageEvent = {\n\tdata: any;\n};\n\ndeclare const globalThis: {\n\tpostMessage: (message: any) => void;\n\tonmessage: (event: MessageEvent) => void;\n};\n\nlet initialized = false;\n\nexport function initialize(factory: any) {\n\tif (initialized) {\n\t\treturn;\n\t}\n\tinitialized = true;\n\n\tconst simpleWorker = new SimpleWorkerServer((msg) => {\n\t\tglobalThis.postMessage(msg);\n\t}, (workerServer: IWorkerServer) => new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null));\n\n\tglobalThis.onmessage = (e: MessageEvent) => {\n\t\tsimpleWorker.onmessage(e.data);\n\t};\n}\n\nglobalThis.onmessage = (e: MessageEvent) => {\n\t// Ignore first message in this case and initialize if not yet initialized\n\tif (!initialized) {\n\t\tinitialize(null);\n\t}\n};\n"]}