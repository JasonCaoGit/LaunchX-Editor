{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/model/ghostText.ts","vs/editor/contrib/inlineCompletions/browser/model/ghostText.ts"],"names":[],"mappings":"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","file":"ghostText.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../../base/common/arrays.js';\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../../common/core/textEdit.js';\nimport { ColumnRange } from '../utils.js';\n\nexport class GhostText {\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly parts: GhostTextPart[],\n\t) {\n\t}\n\n\tequals(other: GhostText): boolean {\n\t\treturn this.lineNumber === other.lineNumber &&\n\t\t\tthis.parts.length === other.parts.length &&\n\t\t\tthis.parts.every((part, index) => part.equals(other.parts[index]));\n\t}\n\n\t/**\n\t * Only used for testing/debugging.\n\t*/\n\trender(documentText: string, debug: boolean = false): string {\n\t\treturn new TextEdit([\n\t\t\t...this.parts.map(p => new SingleTextEdit(\n\t\t\t\tRange.fromPositions(new Position(this.lineNumber, p.column)),\n\t\t\t\tdebug ? `[${p.lines.join('\\n')}]` : p.lines.join('\\n')\n\t\t\t)),\n\t\t]).applyToString(documentText);\n\t}\n\n\trenderForScreenReader(lineText: string): string {\n\t\tif (this.parts.length === 0) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lastPart = this.parts[this.parts.length - 1];\n\n\t\tconst cappedLineText = lineText.substr(0, lastPart.column - 1);\n\t\tconst text = new TextEdit([\n\t\t\t...this.parts.map(p => new SingleTextEdit(\n\t\t\t\tRange.fromPositions(new Position(1, p.column)),\n\t\t\t\tp.lines.join('\\n')\n\t\t\t)),\n\t\t]).applyToString(cappedLineText);\n\n\t\treturn text.substring(this.parts[0].column - 1);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every(p => p.lines.length === 0);\n\t}\n\n\tget lineCount(): number {\n\t\treturn 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n\t}\n}\n\nexport class GhostTextPart {\n\tconstructor(\n\t\treadonly column: number,\n\t\treadonly text: string,\n\t\t/**\n\t\t * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n\t\t*/\n\t\treadonly preview: boolean,\n\t) {\n\t}\n\n\treadonly lines = splitLines(this.text);\n\n\tequals(other: GhostTextPart): boolean {\n\t\treturn this.column === other.column &&\n\t\t\tthis.lines.length === other.lines.length &&\n\t\t\tthis.lines.every((line, index) => line === other.lines[index]);\n\t}\n}\n\nexport class GhostTextReplacement {\n\tpublic readonly parts: ReadonlyArray<GhostTextPart> = [\n\t\tnew GhostTextPart(\n\t\t\tthis.columnRange.endColumnExclusive,\n\t\t\tthis.text,\n\t\t\tfalse\n\t\t),\n\t];\n\n\tconstructor(\n\t\treadonly lineNumber: number,\n\t\treadonly columnRange: ColumnRange,\n\t\treadonly text: string,\n\t\tpublic readonly additionalReservedLineCount: number = 0,\n\t) { }\n\n\treadonly newLines = splitLines(this.text);\n\n\trenderForScreenReader(_lineText: string): string {\n\t\treturn this.newLines.join('\\n');\n\t}\n\n\trender(documentText: string, debug: boolean = false): string {\n\t\tconst replaceRange = this.columnRange.toRange(this.lineNumber);\n\n\t\tif (debug) {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(Range.fromPositions(replaceRange.getStartPosition()), '('),\n\t\t\t\tnew SingleTextEdit(Range.fromPositions(replaceRange.getEndPosition()), `)[${this.newLines.join('\\n')}]`),\n\t\t\t]).applyToString(documentText);\n\t\t} else {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(replaceRange, this.newLines.join('\\n')),\n\t\t\t]).applyToString(documentText);\n\t\t}\n\t}\n\n\tget lineCount(): number {\n\t\treturn this.newLines.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every(p => p.lines.length === 0);\n\t}\n\n\tequals(other: GhostTextReplacement): boolean {\n\t\treturn this.lineNumber === other.lineNumber &&\n\t\t\tthis.columnRange.equals(other.columnRange) &&\n\t\t\tthis.newLines.length === other.newLines.length &&\n\t\t\tthis.newLines.every((line, index) => line === other.newLines[index]) &&\n\t\t\tthis.additionalReservedLineCount === other.additionalReservedLineCount;\n\t}\n}\n\nexport type GhostTextOrReplacement = GhostText | GhostTextReplacement;\n\nexport function ghostTextsOrReplacementsEqual(a: readonly GhostTextOrReplacement[] | undefined, b: readonly GhostTextOrReplacement[] | undefined): boolean {\n\treturn equals(a, b, ghostTextOrReplacementEquals);\n}\n\nexport function ghostTextOrReplacementEquals(a: GhostTextOrReplacement | undefined, b: GhostTextOrReplacement | undefined): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tif (a instanceof GhostText && b instanceof GhostText) {\n\t\treturn a.equals(b);\n\t}\n\tif (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n\t\treturn a.equals(b);\n\t}\n\treturn false;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../../base/common/arrays.js';\nimport { splitLines } from '../../../../../base/common/strings.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../../common/core/textEdit.js';\nimport { ColumnRange } from '../utils.js';\n\nexport class GhostText {\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly parts: GhostTextPart[],\n\t) {\n\t}\n\n\tequals(other: GhostText): boolean {\n\t\treturn this.lineNumber === other.lineNumber &&\n\t\t\tthis.parts.length === other.parts.length &&\n\t\t\tthis.parts.every((part, index) => part.equals(other.parts[index]));\n\t}\n\n\t/**\n\t * Only used for testing/debugging.\n\t*/\n\trender(documentText: string, debug: boolean = false): string {\n\t\treturn new TextEdit([\n\t\t\t...this.parts.map(p => new SingleTextEdit(\n\t\t\t\tRange.fromPositions(new Position(this.lineNumber, p.column)),\n\t\t\t\tdebug ? `[${p.lines.join('\\n')}]` : p.lines.join('\\n')\n\t\t\t)),\n\t\t]).applyToString(documentText);\n\t}\n\n\trenderForScreenReader(lineText: string): string {\n\t\tif (this.parts.length === 0) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lastPart = this.parts[this.parts.length - 1];\n\n\t\tconst cappedLineText = lineText.substr(0, lastPart.column - 1);\n\t\tconst text = new TextEdit([\n\t\t\t...this.parts.map(p => new SingleTextEdit(\n\t\t\t\tRange.fromPositions(new Position(1, p.column)),\n\t\t\t\tp.lines.join('\\n')\n\t\t\t)),\n\t\t]).applyToString(cappedLineText);\n\n\t\treturn text.substring(this.parts[0].column - 1);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every(p => p.lines.length === 0);\n\t}\n\n\tget lineCount(): number {\n\t\treturn 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n\t}\n}\n\nexport class GhostTextPart {\n\tconstructor(\n\t\treadonly column: number,\n\t\treadonly text: string,\n\t\t/**\n\t\t * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n\t\t*/\n\t\treadonly preview: boolean,\n\t) {\n\t}\n\n\treadonly lines = splitLines(this.text);\n\n\tequals(other: GhostTextPart): boolean {\n\t\treturn this.column === other.column &&\n\t\t\tthis.lines.length === other.lines.length &&\n\t\t\tthis.lines.every((line, index) => line === other.lines[index]);\n\t}\n}\n\nexport class GhostTextReplacement {\n\tpublic readonly parts: ReadonlyArray<GhostTextPart> = [\n\t\tnew GhostTextPart(\n\t\t\tthis.columnRange.endColumnExclusive,\n\t\t\tthis.text,\n\t\t\tfalse\n\t\t),\n\t];\n\n\tconstructor(\n\t\treadonly lineNumber: number,\n\t\treadonly columnRange: ColumnRange,\n\t\treadonly text: string,\n\t\tpublic readonly additionalReservedLineCount: number = 0,\n\t) { }\n\n\treadonly newLines = splitLines(this.text);\n\n\trenderForScreenReader(_lineText: string): string {\n\t\treturn this.newLines.join('\\n');\n\t}\n\n\trender(documentText: string, debug: boolean = false): string {\n\t\tconst replaceRange = this.columnRange.toRange(this.lineNumber);\n\n\t\tif (debug) {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(Range.fromPositions(replaceRange.getStartPosition()), '('),\n\t\t\t\tnew SingleTextEdit(Range.fromPositions(replaceRange.getEndPosition()), `)[${this.newLines.join('\\n')}]`),\n\t\t\t]).applyToString(documentText);\n\t\t} else {\n\t\t\treturn new TextEdit([\n\t\t\t\tnew SingleTextEdit(replaceRange, this.newLines.join('\\n')),\n\t\t\t]).applyToString(documentText);\n\t\t}\n\t}\n\n\tget lineCount(): number {\n\t\treturn this.newLines.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.parts.every(p => p.lines.length === 0);\n\t}\n\n\tequals(other: GhostTextReplacement): boolean {\n\t\treturn this.lineNumber === other.lineNumber &&\n\t\t\tthis.columnRange.equals(other.columnRange) &&\n\t\t\tthis.newLines.length === other.newLines.length &&\n\t\t\tthis.newLines.every((line, index) => line === other.newLines[index]) &&\n\t\t\tthis.additionalReservedLineCount === other.additionalReservedLineCount;\n\t}\n}\n\nexport type GhostTextOrReplacement = GhostText | GhostTextReplacement;\n\nexport function ghostTextsOrReplacementsEqual(a: readonly GhostTextOrReplacement[] | undefined, b: readonly GhostTextOrReplacement[] | undefined): boolean {\n\treturn equals(a, b, ghostTextOrReplacementEquals);\n}\n\nexport function ghostTextOrReplacementEquals(a: GhostTextOrReplacement | undefined, b: GhostTextOrReplacement | undefined): boolean {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tif (a instanceof GhostText && b instanceof GhostText) {\n\t\treturn a.equals(b);\n\t}\n\tif (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n\t\treturn a.equals(b);\n\t}\n\treturn false;\n}\n"]}