{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineDiffView.ts","vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineDiffView.ts"],"names":[],"mappings":"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","file":"inlineDiffView.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { autorunWithStore, constObservable, derived, IObservable, observableFromEvent } from '../../../../../../base/common/observable.js';\nimport { ICodeEditor } from '../../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../../browser/observableCodeEditor.js';\nimport { rangeIsSingleLine } from '../../../../../browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.js';\nimport { LineSource, renderLines, RenderOptions } from '../../../../../browser/widget/diffEditor/components/diffEditorViewZones/renderLines.js';\nimport { diffAddDecoration } from '../../../../../browser/widget/diffEditor/registrations.contribution.js';\nimport { applyViewZones, IObservableViewZone } from '../../../../../browser/widget/diffEditor/utils.js';\nimport { EditorOption } from '../../../../../common/config/editorOptions.js';\nimport { OffsetRange } from '../../../../../common/core/offsetRange.js';\nimport { Range } from '../../../../../common/core/range.js';\nimport { AbstractText } from '../../../../../common/core/textEdit.js';\nimport { DetailedLineRangeMapping } from '../../../../../common/diff/rangeMapping.js';\nimport { EndOfLinePreference, IModelDeltaDecoration, ITextModel } from '../../../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../../../common/model/textModel.js';\nimport { InlineDecoration, InlineDecorationType } from '../../../../../common/viewModel.js';\nimport { IInlineEditsView } from './sideBySideDiff.js';\nimport { classNames } from './utils.js';\n\nexport interface IOriginalEditorInlineDiffViewState {\n\tdiff: DetailedLineRangeMapping[];\n\tmodifiedText: AbstractText;\n\tmode: 'mixedLines' | 'insertionInline' | 'interleavedLines' | 'sideBySide' | 'deletion';\n\n\tmodifiedCodeEditor: ICodeEditor;\n}\n\nexport class OriginalEditorInlineDiffView extends Disposable implements IInlineEditsView {\n\tpublic static supportsInlineDiffRendering(mapping: DetailedLineRangeMapping): boolean {\n\t\treturn allowsTrueInlineDiffRendering(mapping);\n\t}\n\n\treadonly isHovered = constObservable(false);\n\n\tprivate readonly _tokenizationFinished = modelTokenizationFinished(this._modifiedTextModel);\n\n\tconstructor(\n\t\tprivate readonly _originalEditor: ICodeEditor,\n\t\tprivate readonly _state: IObservable<IOriginalEditorInlineDiffViewState | undefined>,\n\t\tprivate readonly _modifiedTextModel: ITextModel,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(observableCodeEditor(this._originalEditor).setDecorations(this._decorations.map(d => d?.originalDecorations ?? [])));\n\n\t\tconst modifiedCodeEditor = this._state.map(s => s?.modifiedCodeEditor);\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tconst e = modifiedCodeEditor.read(reader);\n\t\t\tif (e) {\n\t\t\t\tstore.add(observableCodeEditor(e).setDecorations(this._decorations.map(d => d?.modifiedDecorations ?? [])));\n\t\t\t}\n\t\t}));\n\n\t\tconst editor = observableCodeEditor(this._originalEditor);\n\n\t\tconst originalViewZones = derived(this, (reader) => {\n\t\t\tconst originalModel = editor.model.read(reader);\n\t\t\tif (!originalModel) { return []; }\n\n\t\t\tconst origViewZones: IObservableViewZone[] = [];\n\t\t\tconst renderOptions = RenderOptions.fromEditor(this._originalEditor);\n\t\t\tconst modLineHeight = editor.getOption(EditorOption.lineHeight).read(reader);\n\n\t\t\tconst s = this._state.read(reader);\n\t\t\tif (!s) { return origViewZones; }\n\n\t\t\tfor (const diff of s.diff) {\n\t\t\t\tif (s.mode !== 'interleavedLines') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._tokenizationFinished.read(reader); // Update view-zones once tokenization completes\n\n\t\t\t\tconst source = new LineSource(diff.modified.mapToLineArray(l => this._modifiedTextModel.tokenization.getLineTokens(l)));\n\n\t\t\t\tconst decorations: InlineDecoration[] = [];\n\t\t\t\tfor (const i of diff.innerChanges || []) {\n\t\t\t\t\tdecorations.push(new InlineDecoration(\n\t\t\t\t\t\ti.modifiedRange.delta(-(diff.original.startLineNumber - 1)),\n\t\t\t\t\t\tdiffAddDecoration.className!,\n\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t\tconst deletedCodeDomNode = document.createElement('div');\n\t\t\t\tdeletedCodeDomNode.classList.add('view-lines', 'line-insert', 'monaco-mouse-cursor-text');\n\t\t\t\t// .inline-deleted-margin-view-zone\n\n\t\t\t\tconst result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);\n\n\t\t\t\torigViewZones.push({\n\t\t\t\t\tafterLineNumber: diff.original.endLineNumberExclusive - 1,\n\t\t\t\t\tdomNode: deletedCodeDomNode,\n\t\t\t\t\theightInPx: result.heightInLines * modLineHeight,\n\t\t\t\t\tminWidthInPx: result.minWidthInPx,\n\n\t\t\t\t\tshowInHiddenAreas: true,\n\t\t\t\t\tsuppressMouseDown: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn origViewZones;\n\t\t});\n\n\t\tthis._register(applyViewZones(this._originalEditor, originalViewZones));\n\t}\n\n\tprivate readonly _decorations = derived(this, reader => {\n\t\tconst diff = this._state.read(reader);\n\t\tif (!diff) { return undefined; }\n\n\t\tconst modified = diff.modifiedText;\n\t\tconst showInline = diff.mode === 'mixedLines' || diff.mode === 'insertionInline';\n\n\t\tconst showEmptyDecorations = true;\n\n\t\tconst originalDecorations: IModelDeltaDecoration[] = [];\n\t\tconst modifiedDecorations: IModelDeltaDecoration[] = [];\n\n\t\tconst diffLineAddDecorationBackground = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-line-insert',\n\t\t\tdescription: 'line-insert',\n\t\t\tisWholeLine: true,\n\t\t\tmarginClassName: 'gutter-insert',\n\t\t});\n\n\t\tconst diffLineDeleteDecorationBackground = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-line-delete',\n\t\t\tdescription: 'line-delete',\n\t\t\tisWholeLine: true,\n\t\t\tmarginClassName: 'gutter-delete',\n\t\t});\n\n\t\tconst diffWholeLineDeleteDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-delete',\n\t\t\tdescription: 'char-delete',\n\t\t\tisWholeLine: false,\n\t\t});\n\n\t\tconst diffWholeLineAddDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert',\n\t\t\tdescription: 'char-insert',\n\t\t\tisWholeLine: true,\n\t\t});\n\n\t\tconst diffAddDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert',\n\t\t\tdescription: 'char-insert',\n\t\t\tshouldFillLineOnLineBreak: true,\n\t\t});\n\n\t\tconst diffAddDecorationEmpty = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert diff-range-empty',\n\t\t\tdescription: 'char-insert diff-range-empty',\n\t\t});\n\n\t\tfor (const m of diff.diff) {\n\t\t\tconst showFullLineDecorations = diff.mode !== 'sideBySide';\n\t\t\tif (showFullLineDecorations) {\n\t\t\t\tif (!m.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\trange: m.original.toInclusiveRange()!,\n\t\t\t\t\t\toptions: diffLineDeleteDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!m.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\trange: m.modified.toInclusiveRange()!,\n\t\t\t\t\t\toptions: diffLineAddDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (m.modified.isEmpty || m.original.isEmpty) {\n\t\t\t\tif (!m.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({ range: m.original.toInclusiveRange()!, options: diffWholeLineDeleteDecoration });\n\t\t\t\t}\n\t\t\t\tif (!m.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({ range: m.modified.toInclusiveRange()!, options: diffWholeLineAddDecoration });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst useInlineDiff = showInline && allowsTrueInlineDiffRendering(m);\n\t\t\t\tfor (const i of m.innerChanges || []) {\n\t\t\t\t\t// Don't show empty markers outside the line range\n\t\t\t\t\tif (m.original.contains(i.originalRange.startLineNumber)) {\n\t\t\t\t\t\tconst replacedText = this._originalEditor.getModel()?.getValueInRange(i.originalRange, EndOfLinePreference.LF);\n\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\trange: i.originalRange,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tdescription: 'char-delete',\n\t\t\t\t\t\t\t\tshouldFillLineOnLineBreak: false,\n\t\t\t\t\t\t\t\tclassName: classNames(\n\t\t\t\t\t\t\t\t\t'inlineCompletions-char-delete',\n\t\t\t\t\t\t\t\t\ti.originalRange.isSingleLine() && diff.mode === 'insertionInline' && 'single-line-inline',\n\t\t\t\t\t\t\t\t\ti.originalRange.isEmpty() && 'empty',\n\t\t\t\t\t\t\t\t\t((i.originalRange.isEmpty() || diff.mode === 'deletion' && replacedText === '\\n') && showEmptyDecorations && !useInlineDiff) && 'diff-range-empty'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tinlineClassName: useInlineDiff ? classNames('strike-through', 'inlineCompletions') : null,\n\t\t\t\t\t\t\t\tzIndex: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (m.modified.contains(i.modifiedRange.startLineNumber)) {\n\t\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\t\trange: i.modifiedRange,\n\t\t\t\t\t\t\toptions: (i.modifiedRange.isEmpty() && showEmptyDecorations && !useInlineDiff)\n\t\t\t\t\t\t\t\t? diffAddDecorationEmpty\n\t\t\t\t\t\t\t\t: diffAddDecoration\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (useInlineDiff) {\n\t\t\t\t\t\tconst insertedText = modified.getValueOfRange(i.modifiedRange);\n\t\t\t\t\t\t// when the injected text becomes long, the editor will split it into multiple spans\n\t\t\t\t\t\t// to be able to get the border around the start and end of the text, we need to split it into multiple segments\n\t\t\t\t\t\tconst textSegments = insertedText.length > 3 ?\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(0, 1), extraClasses: ['start'], offsetRange: new OffsetRange(i.modifiedRange.startColumn - 1, i.modifiedRange.startColumn) },\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(1, -1), extraClasses: [], offsetRange: new OffsetRange(i.modifiedRange.startColumn, i.modifiedRange.endColumn - 2) },\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(-1), extraClasses: ['end'], offsetRange: new OffsetRange(i.modifiedRange.endColumn - 2, i.modifiedRange.endColumn - 1) }\n\t\t\t\t\t\t\t] :\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ text: insertedText, extraClasses: ['start', 'end'], offsetRange: new OffsetRange(i.modifiedRange.startColumn - 1, i.modifiedRange.endColumn) }\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t// Tokenization\n\t\t\t\t\t\tthis._tokenizationFinished.read(reader); // reconsider when tokenization is finished\n\t\t\t\t\t\tconst lineTokens = this._modifiedTextModel.tokenization.getLineTokens(i.modifiedRange.startLineNumber);\n\n\t\t\t\t\t\tfor (const { text, extraClasses, offsetRange } of textSegments) {\n\t\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\t\trange: Range.fromPositions(i.originalRange.getEndPosition()),\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdescription: 'inserted-text',\n\t\t\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\t\t\ttokens: lineTokens.getTokensInRange(offsetRange),\n\t\t\t\t\t\t\t\t\t\tcontent: text,\n\t\t\t\t\t\t\t\t\t\tinlineClassName: classNames(\n\t\t\t\t\t\t\t\t\t\t\t'inlineCompletions-char-insert',\n\t\t\t\t\t\t\t\t\t\t\ti.modifiedRange.isSingleLine() && diff.mode === 'insertionInline' && 'single-line-inline',\n\t\t\t\t\t\t\t\t\t\t\t...extraClasses // include extraClasses for additional styling if provided\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tzIndex: 2,\n\t\t\t\t\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { originalDecorations, modifiedDecorations };\n\t});\n}\n\nfunction allowsTrueInlineDiffRendering(mapping: DetailedLineRangeMapping): boolean {\n\tif (!mapping.innerChanges) {\n\t\treturn false;\n\t}\n\treturn mapping.innerChanges.every(c =>\n\t\t(rangeIsSingleLine(c.modifiedRange) && rangeIsSingleLine(c.originalRange)));\n}\n\nlet i = 0;\nfunction modelTokenizationFinished(model: ITextModel): IObservable<number> {\n\treturn observableFromEvent(model.onDidChangeTokens, () => i++);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { autorunWithStore, constObservable, derived, IObservable, observableFromEvent } from '../../../../../../base/common/observable.js';\nimport { ICodeEditor } from '../../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../../browser/observableCodeEditor.js';\nimport { rangeIsSingleLine } from '../../../../../browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.js';\nimport { LineSource, renderLines, RenderOptions } from '../../../../../browser/widget/diffEditor/components/diffEditorViewZones/renderLines.js';\nimport { diffAddDecoration } from '../../../../../browser/widget/diffEditor/registrations.contribution.js';\nimport { applyViewZones, IObservableViewZone } from '../../../../../browser/widget/diffEditor/utils.js';\nimport { EditorOption } from '../../../../../common/config/editorOptions.js';\nimport { OffsetRange } from '../../../../../common/core/offsetRange.js';\nimport { Range } from '../../../../../common/core/range.js';\nimport { AbstractText } from '../../../../../common/core/textEdit.js';\nimport { DetailedLineRangeMapping } from '../../../../../common/diff/rangeMapping.js';\nimport { EndOfLinePreference, IModelDeltaDecoration, ITextModel } from '../../../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../../../common/model/textModel.js';\nimport { InlineDecoration, InlineDecorationType } from '../../../../../common/viewModel.js';\nimport { IInlineEditsView } from './sideBySideDiff.js';\nimport { classNames } from './utils.js';\n\nexport interface IOriginalEditorInlineDiffViewState {\n\tdiff: DetailedLineRangeMapping[];\n\tmodifiedText: AbstractText;\n\tmode: 'mixedLines' | 'insertionInline' | 'interleavedLines' | 'sideBySide' | 'deletion';\n\n\tmodifiedCodeEditor: ICodeEditor;\n}\n\nexport class OriginalEditorInlineDiffView extends Disposable implements IInlineEditsView {\n\tpublic static supportsInlineDiffRendering(mapping: DetailedLineRangeMapping): boolean {\n\t\treturn allowsTrueInlineDiffRendering(mapping);\n\t}\n\n\treadonly isHovered = constObservable(false);\n\n\tprivate readonly _tokenizationFinished = modelTokenizationFinished(this._modifiedTextModel);\n\n\tconstructor(\n\t\tprivate readonly _originalEditor: ICodeEditor,\n\t\tprivate readonly _state: IObservable<IOriginalEditorInlineDiffViewState | undefined>,\n\t\tprivate readonly _modifiedTextModel: ITextModel,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(observableCodeEditor(this._originalEditor).setDecorations(this._decorations.map(d => d?.originalDecorations ?? [])));\n\n\t\tconst modifiedCodeEditor = this._state.map(s => s?.modifiedCodeEditor);\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tconst e = modifiedCodeEditor.read(reader);\n\t\t\tif (e) {\n\t\t\t\tstore.add(observableCodeEditor(e).setDecorations(this._decorations.map(d => d?.modifiedDecorations ?? [])));\n\t\t\t}\n\t\t}));\n\n\t\tconst editor = observableCodeEditor(this._originalEditor);\n\n\t\tconst originalViewZones = derived(this, (reader) => {\n\t\t\tconst originalModel = editor.model.read(reader);\n\t\t\tif (!originalModel) { return []; }\n\n\t\t\tconst origViewZones: IObservableViewZone[] = [];\n\t\t\tconst renderOptions = RenderOptions.fromEditor(this._originalEditor);\n\t\t\tconst modLineHeight = editor.getOption(EditorOption.lineHeight).read(reader);\n\n\t\t\tconst s = this._state.read(reader);\n\t\t\tif (!s) { return origViewZones; }\n\n\t\t\tfor (const diff of s.diff) {\n\t\t\t\tif (s.mode !== 'interleavedLines') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._tokenizationFinished.read(reader); // Update view-zones once tokenization completes\n\n\t\t\t\tconst source = new LineSource(diff.modified.mapToLineArray(l => this._modifiedTextModel.tokenization.getLineTokens(l)));\n\n\t\t\t\tconst decorations: InlineDecoration[] = [];\n\t\t\t\tfor (const i of diff.innerChanges || []) {\n\t\t\t\t\tdecorations.push(new InlineDecoration(\n\t\t\t\t\t\ti.modifiedRange.delta(-(diff.original.startLineNumber - 1)),\n\t\t\t\t\t\tdiffAddDecoration.className!,\n\t\t\t\t\t\tInlineDecorationType.Regular,\n\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t\tconst deletedCodeDomNode = document.createElement('div');\n\t\t\t\tdeletedCodeDomNode.classList.add('view-lines', 'line-insert', 'monaco-mouse-cursor-text');\n\t\t\t\t// .inline-deleted-margin-view-zone\n\n\t\t\t\tconst result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);\n\n\t\t\t\torigViewZones.push({\n\t\t\t\t\tafterLineNumber: diff.original.endLineNumberExclusive - 1,\n\t\t\t\t\tdomNode: deletedCodeDomNode,\n\t\t\t\t\theightInPx: result.heightInLines * modLineHeight,\n\t\t\t\t\tminWidthInPx: result.minWidthInPx,\n\n\t\t\t\t\tshowInHiddenAreas: true,\n\t\t\t\t\tsuppressMouseDown: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn origViewZones;\n\t\t});\n\n\t\tthis._register(applyViewZones(this._originalEditor, originalViewZones));\n\t}\n\n\tprivate readonly _decorations = derived(this, reader => {\n\t\tconst diff = this._state.read(reader);\n\t\tif (!diff) { return undefined; }\n\n\t\tconst modified = diff.modifiedText;\n\t\tconst showInline = diff.mode === 'mixedLines' || diff.mode === 'insertionInline';\n\n\t\tconst showEmptyDecorations = true;\n\n\t\tconst originalDecorations: IModelDeltaDecoration[] = [];\n\t\tconst modifiedDecorations: IModelDeltaDecoration[] = [];\n\n\t\tconst diffLineAddDecorationBackground = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-line-insert',\n\t\t\tdescription: 'line-insert',\n\t\t\tisWholeLine: true,\n\t\t\tmarginClassName: 'gutter-insert',\n\t\t});\n\n\t\tconst diffLineDeleteDecorationBackground = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-line-delete',\n\t\t\tdescription: 'line-delete',\n\t\t\tisWholeLine: true,\n\t\t\tmarginClassName: 'gutter-delete',\n\t\t});\n\n\t\tconst diffWholeLineDeleteDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-delete',\n\t\t\tdescription: 'char-delete',\n\t\t\tisWholeLine: false,\n\t\t});\n\n\t\tconst diffWholeLineAddDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert',\n\t\t\tdescription: 'char-insert',\n\t\t\tisWholeLine: true,\n\t\t});\n\n\t\tconst diffAddDecoration = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert',\n\t\t\tdescription: 'char-insert',\n\t\t\tshouldFillLineOnLineBreak: true,\n\t\t});\n\n\t\tconst diffAddDecorationEmpty = ModelDecorationOptions.register({\n\t\t\tclassName: 'inlineCompletions-char-insert diff-range-empty',\n\t\t\tdescription: 'char-insert diff-range-empty',\n\t\t});\n\n\t\tfor (const m of diff.diff) {\n\t\t\tconst showFullLineDecorations = diff.mode !== 'sideBySide';\n\t\t\tif (showFullLineDecorations) {\n\t\t\t\tif (!m.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\trange: m.original.toInclusiveRange()!,\n\t\t\t\t\t\toptions: diffLineDeleteDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!m.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\trange: m.modified.toInclusiveRange()!,\n\t\t\t\t\t\toptions: diffLineAddDecorationBackground,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (m.modified.isEmpty || m.original.isEmpty) {\n\t\t\t\tif (!m.original.isEmpty) {\n\t\t\t\t\toriginalDecorations.push({ range: m.original.toInclusiveRange()!, options: diffWholeLineDeleteDecoration });\n\t\t\t\t}\n\t\t\t\tif (!m.modified.isEmpty) {\n\t\t\t\t\tmodifiedDecorations.push({ range: m.modified.toInclusiveRange()!, options: diffWholeLineAddDecoration });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst useInlineDiff = showInline && allowsTrueInlineDiffRendering(m);\n\t\t\t\tfor (const i of m.innerChanges || []) {\n\t\t\t\t\t// Don't show empty markers outside the line range\n\t\t\t\t\tif (m.original.contains(i.originalRange.startLineNumber)) {\n\t\t\t\t\t\tconst replacedText = this._originalEditor.getModel()?.getValueInRange(i.originalRange, EndOfLinePreference.LF);\n\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\trange: i.originalRange,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tdescription: 'char-delete',\n\t\t\t\t\t\t\t\tshouldFillLineOnLineBreak: false,\n\t\t\t\t\t\t\t\tclassName: classNames(\n\t\t\t\t\t\t\t\t\t'inlineCompletions-char-delete',\n\t\t\t\t\t\t\t\t\ti.originalRange.isSingleLine() && diff.mode === 'insertionInline' && 'single-line-inline',\n\t\t\t\t\t\t\t\t\ti.originalRange.isEmpty() && 'empty',\n\t\t\t\t\t\t\t\t\t((i.originalRange.isEmpty() || diff.mode === 'deletion' && replacedText === '\\n') && showEmptyDecorations && !useInlineDiff) && 'diff-range-empty'\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tinlineClassName: useInlineDiff ? classNames('strike-through', 'inlineCompletions') : null,\n\t\t\t\t\t\t\t\tzIndex: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (m.modified.contains(i.modifiedRange.startLineNumber)) {\n\t\t\t\t\t\tmodifiedDecorations.push({\n\t\t\t\t\t\t\trange: i.modifiedRange,\n\t\t\t\t\t\t\toptions: (i.modifiedRange.isEmpty() && showEmptyDecorations && !useInlineDiff)\n\t\t\t\t\t\t\t\t? diffAddDecorationEmpty\n\t\t\t\t\t\t\t\t: diffAddDecoration\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (useInlineDiff) {\n\t\t\t\t\t\tconst insertedText = modified.getValueOfRange(i.modifiedRange);\n\t\t\t\t\t\t// when the injected text becomes long, the editor will split it into multiple spans\n\t\t\t\t\t\t// to be able to get the border around the start and end of the text, we need to split it into multiple segments\n\t\t\t\t\t\tconst textSegments = insertedText.length > 3 ?\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(0, 1), extraClasses: ['start'], offsetRange: new OffsetRange(i.modifiedRange.startColumn - 1, i.modifiedRange.startColumn) },\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(1, -1), extraClasses: [], offsetRange: new OffsetRange(i.modifiedRange.startColumn, i.modifiedRange.endColumn - 2) },\n\t\t\t\t\t\t\t\t{ text: insertedText.slice(-1), extraClasses: ['end'], offsetRange: new OffsetRange(i.modifiedRange.endColumn - 2, i.modifiedRange.endColumn - 1) }\n\t\t\t\t\t\t\t] :\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ text: insertedText, extraClasses: ['start', 'end'], offsetRange: new OffsetRange(i.modifiedRange.startColumn - 1, i.modifiedRange.endColumn) }\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t// Tokenization\n\t\t\t\t\t\tthis._tokenizationFinished.read(reader); // reconsider when tokenization is finished\n\t\t\t\t\t\tconst lineTokens = this._modifiedTextModel.tokenization.getLineTokens(i.modifiedRange.startLineNumber);\n\n\t\t\t\t\t\tfor (const { text, extraClasses, offsetRange } of textSegments) {\n\t\t\t\t\t\t\toriginalDecorations.push({\n\t\t\t\t\t\t\t\trange: Range.fromPositions(i.originalRange.getEndPosition()),\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdescription: 'inserted-text',\n\t\t\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\t\t\ttokens: lineTokens.getTokensInRange(offsetRange),\n\t\t\t\t\t\t\t\t\t\tcontent: text,\n\t\t\t\t\t\t\t\t\t\tinlineClassName: classNames(\n\t\t\t\t\t\t\t\t\t\t\t'inlineCompletions-char-insert',\n\t\t\t\t\t\t\t\t\t\t\ti.modifiedRange.isSingleLine() && diff.mode === 'insertionInline' && 'single-line-inline',\n\t\t\t\t\t\t\t\t\t\t\t...extraClasses // include extraClasses for additional styling if provided\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tzIndex: 2,\n\t\t\t\t\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { originalDecorations, modifiedDecorations };\n\t});\n}\n\nfunction allowsTrueInlineDiffRendering(mapping: DetailedLineRangeMapping): boolean {\n\tif (!mapping.innerChanges) {\n\t\treturn false;\n\t}\n\treturn mapping.innerChanges.every(c =>\n\t\t(rangeIsSingleLine(c.modifiedRange) && rangeIsSingleLine(c.originalRange)));\n}\n\nlet i = 0;\nfunction modelTokenizationFinished(model: ITextModel): IObservable<number> {\n\treturn observableFromEvent(model.onDidChangeTokens, () => i++);\n}\n"]}