import { Disposable } from '../../../../../../base/common/lifecycle.js';
import { IObservable, ISettableObservable } from '../../../../../../base/common/observable.js';
import { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';
import { ICodeEditor } from '../../../../../browser/editorBrowser.js';
import { InlineCompletionsModel } from '../../model/inlineCompletionsModel.js';
import { InlineEditsDeletionView } from './deletionView.js';
import { OriginalEditorInlineDiffView } from './inlineDiffView.js';
import { InlineEditsInsertionView } from './insertionView.js';
import './view.css';
import { InlineEditWithChanges } from './viewAndDiffProducer.js';
import { LineReplacementView, WordReplacementView } from './wordReplacementView.js';
export declare class InlineEditsView extends Disposable {
    private readonly _editor;
    private readonly _edit;
    private readonly _model;
    private readonly _focusIsInMenu;
    private readonly _instantiationService;
    private readonly _editorObs;
    private readonly _useMixedLinesDiff;
    private readonly _useInterleavedLinesDiff;
    private readonly _useCodeShifting;
    private readonly _renderSideBySide;
    private readonly _useMultiLineGhostText;
    private _previousView;
    constructor(_editor: ICodeEditor, _edit: IObservable<InlineEditWithChanges | undefined>, _model: IObservable<InlineCompletionsModel | undefined>, _focusIsInMenu: ISettableObservable<boolean>, _instantiationService: IInstantiationService);
    private readonly _uiState;
    private readonly _previewTextModel;
    private readonly _sideBySide;
    protected readonly _deletion: InlineEditsDeletionView;
    protected readonly _insertion: InlineEditsInsertionView;
    private readonly _inlineDiffViewState;
    protected readonly _inlineDiffView: OriginalEditorInlineDiffView;
    protected readonly _wordReplacementViews: IObservable<readonly WordReplacementView[]>;
    protected readonly _lineReplacementView: IObservable<readonly LineReplacementView[]>;
    private readonly _useGutterIndicator;
    private readonly _inlineEditsIsHovered;
    private readonly _gutterIndicatorOffset;
    private readonly _originalDisplayRange;
    protected readonly _indicator: import("../../../../../../base/common/lifecycle.js").IDisposable;
    private determineView;
    private determineRenderState;
}
