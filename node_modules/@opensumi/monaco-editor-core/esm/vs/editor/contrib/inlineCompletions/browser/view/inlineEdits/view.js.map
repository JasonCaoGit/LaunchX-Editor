{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/view.ts","vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/view.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,4CAA4C,CAAC;AACxE,OAAO,EAAE,gBAAgB,EAAE,OAAO,EAA6C,wBAAwB,EAAE,MAAM,6CAA6C,CAAC;AAC7J,OAAO,EAAE,qBAAqB,EAAE,MAAM,kEAAkE,CAAC;AAEzG,OAAO,EAAE,oBAAoB,EAAE,MAAM,gDAAgD,CAAC;AAEtF,OAAO,EAAE,SAAS,EAAE,MAAM,yCAAyC,CAAC;AAEpE,OAAO,EAAE,KAAK,EAAE,MAAM,qCAAqC,CAAC;AAC5D,OAAO,EAAgB,cAAc,EAAE,UAAU,EAAE,MAAM,wCAAwC,CAAC;AAClG,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AACtE,OAAO,EAA4B,iCAAiC,EAAE,YAAY,EAAE,MAAM,4CAA4C,CAAC;AACvI,OAAO,EAAE,SAAS,EAAE,MAAM,0CAA0C,CAAC;AAErE,OAAO,EAAE,uBAAuB,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,0BAA0B,EAAE,MAAM,0BAA0B,CAAC;AACtE,OAAO,EAA8B,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AACtF,OAAO,EAAsC,4BAA4B,EAAE,MAAM,qBAAqB,CAAC;AACvG,OAAO,EAAE,wBAAwB,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,qBAAqB,CAAC;AAChE,OAAO,EAAE,gCAAgC,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAClF,OAAO,YAAY,CAAC;AAEpB,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAE7E,IAAM,eAAe,uBAArB,MAAM,eAAgB,SAAQ,UAAU;IAgB9C,YACkB,OAAoB,EACpB,KAAqD,EACrD,MAAuD,EACvD,cAA4C,EACtC,qBAA6D;QAEpF,KAAK,EAAE,CAAC;QANS,YAAO,GAAP,OAAO,CAAa;QACpB,UAAK,GAAL,KAAK,CAAgD;QACrD,WAAM,GAAN,MAAM,CAAiD;QACvD,mBAAc,GAAd,cAAc,CAA8B;QACrB,0BAAqB,GAArB,qBAAqB,CAAuB;QApBpE,eAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEhD,uBAAkB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAClI,6BAAwB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC9I,qBAAgB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAC3H,sBAAiB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAChI,2BAAsB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAmB1I,aAAQ,GAAG,OAAO,CAOpB,IAAI,EAAE,MAAM,CAAC,EAAE;YAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACX,OAAO,SAAS,CAAC;YAClB,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,2BAA2B,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAEtE,IAAI,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjD,IAAI,IAAI,GAAG,iCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAEnG,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACrF,IAAI,CAAC,KAAK,EAAE,CAAC;gBACZ,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC;gBAC1B,OAAO,SAAS,CAAC;YAClB,CAAC;YAED,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;gBACjC,MAAM,yBAAyB,GAAG,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACtF,OAAO,GAAG,yBAAyB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAE3D,QAAQ,GAAG,gCAAgC,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;gBACjF,IAAI,GAAG,iCAAiC,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAChG,CAAC;YAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CACjE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC1B,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CACzF,CACA,CAAC;YAEH,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAG,CAAC,aAAa,EAAE,CAAC,CAAC;YAE7E,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;YAC1D,IAAI,eAAe,KAAK,OAAO,EAAE,CAAC;gBACjC,oEAAoE;gBACpE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;YAED,OAAO;gBACN,KAAK;gBACL,IAAI;gBACJ,IAAI;gBACJ,OAAO;gBACP,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM;gBAC/C,oBAAoB,EAAE,oBAAoB;aAC1C,CAAC;QACH,CAAC,CAAC,CAAC;QAEc,sBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAC5F,SAAS,EACT,EAAE,EACF,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAG,CAAC,aAAa,EAAE,EACxC,EAAE,GAAG,SAAS,CAAC,wBAAwB,EAAE,8BAA8B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,kCAAkC,EAAE,KAAK,EAAE,EAAE,EACvI,IAAI,CACJ,CAAC,CAAC;QAEc,gBAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,yBAAyB,EAChH,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,gBAAgB,EAAE,CAAC,CAAC,gBAAgB;YACpC,oBAAoB,EAAE,CAAC,CAAC,oBAAoB;SAC5C,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACf,CAAC,CAAC;QAEgB,cAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,uBAAuB,EAC9G,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3D,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa;YACpC,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS;SAC5B,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACf,CAAC,CAAC;QAEgB,eAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,wBAAwB,EAChH,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,KAAK,oBAAoB,CAAC,CAAC,CAAC,CAAC;YACrE,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU;YAC9B,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM;YAC3B,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI;SAClB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACf,CAAC,CAAC;QAEc,yBAAoB,GAAG,OAAO,CAAiD,IAAI,EAAE,MAAM,CAAC,EAAE;YAC9G,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;gBAAC,OAAO,SAAS,CAAC;YAAC,CAAC;YACzC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,kBAAkB,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,iBAAiB,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,oBAAoB,EAAE,CAAC;gBACxH,OAAO,SAAS,CAAC;YAClB,CAAC;YACD,OAAO;gBACN,YAAY,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI;gBAChE,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa;aAClD,CAAC;QACH,CAAC,CAAC,CAAC;QAEgB,oBAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,4BAA4B,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAEpI,0BAAqB,GAAG,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YACjL,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE3B,yBAAoB,GAAG,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YACpK,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QACtK,CAAC,CAAC,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE7B,wBAAmB,GAAG,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,qCAA4B,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAEpI,0BAAqB,GAAG,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YAC/D,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;mBAC1C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;mBAC3E,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;mBACrC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;mBAC3C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEc,2BAAsB,GAAG,OAAO,CAAS,IAAI,EAAE,MAAM,CAAC,EAAE;YACxE,gGAAgG;YAChG,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,oBAAoB,EAAE,CAAC;gBACtE,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrD,CAAC;YACD,OAAO,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;QAEc,0BAAqB,GAAG,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,IAAI,KAAK,EAAE,KAAK,EAAE,IAAI,KAAK,oBAAoB,EAAE,CAAC;gBACjD,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnD,CAAC;YACD,OAAO,KAAK,EAAE,oBAAoB,CAAC;QACpC,CAAC,CAAC,CAAC;QAEgB,eAAU,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjF,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC3C,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAClD,0BAA0B,EAC1B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,cAAc,CACnB,CAAC,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACP,KAAK,CAAC,GAAG,CAAC,IAAI,oBAAoB,CACjC,IAAI,CAAC,UAAU,EACf,OAAO,CAAyC,MAAM,CAAC,EAAE;oBACxD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACzC,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACtD,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;wBAAC,OAAO,SAAS,CAAC;oBAAC,CAAC;oBAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACxJ,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;gBACxE,CAAC,CAAC,EACF,IAAI,CAAC,MAAM,CACX,CAAC,CAAC;YACJ,CAAC;QACF,CAAC,CAAC,CAAC,CAAC;IA1KJ,CAAC;IA4KO,aAAa,CAAC,IAA2B,EAAE,MAAe,EAAE,IAAgC,EAAE,OAAmB;QACxH,+FAA+F;QAC/F,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,EAAE,EAAE,KAAK,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;QACxE,MAAM,uBAAuB,GAAG,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,aAAa,EAAE,cAAc;YACzF,CACC,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,uBAAuB,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,YAAY,CAAC;gBAC/G,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,IAAI,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,kBAAkB,CAAC,CAC/G,CAAC;QACH,MAAM,+BAA+B,GAAG,IAAI,CAAC,aAAa,EAAE,WAAW,KAAK,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC;YACvH,CACC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,YAAY;gBACzC,IAAI,CAAC,aAAa,EAAE,IAAI,KAAK,iBAAiB,CAC9C,CAAC;QAEH,IAAI,WAAW,IAAI,CAAC,uBAAuB,IAAI,CAAC,+BAA+B,EAAE,CAAC;YACjF,OAAO,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC;QACjC,CAAC;QAED,8CAA8C;QAE9C,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO,WAAW,CAAC;QACpB,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;QACtD,MAAM,iBAAiB,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;QAC7C,IACC,iBAAiB,IAAI,CACpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,qBAAqB;eAC3D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;eAClC,kCAAkC,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC;eAC7D,oBAAoB,CAAC,IAAI,CAAC,CAC7B,EACA,CAAC;YACF,OAAO,iBAAiB,CAAC;QAC1B,CAAC;QAED,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3J,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;YACnK,OAAO,UAAU,CAAC;QACnB,CAAC;QAED,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YACxH,OAAO,oBAAoB,CAAC;QAC7B,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACvD,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QACvD,MAAM,yBAAyB,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,WAAW,GAAG,mBAAmB,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,WAAW,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzN,IAAI,yBAAyB,IAAI,iBAAiB,IAAI,gBAAgB,KAAK,CAAC,IAAI,gBAAgB,KAAK,CAAC,EAAE,CAAC;YACxG,wDAAwD;YACxD,IACC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;gBAC3C,CAAC,wBAAwB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,WAAW,GAAG,mBAAmB,CAAC,UAAU,CAAC,EAC7M,CAAC;gBACF,OAAO,kBAAkB,CAAC;YAC3B,CAAC;QACF,CAAC;QAED,IAAI,gBAAgB,GAAG,CAAC,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC;YAClD,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,OAAO,IAAI,yBAAyB,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC;gBACjI,OAAO,YAAY,CAAC;YACrB,CAAC;YAED,OAAO,iBAAiB,CAAC;QAC1B,CAAC;QAED,IACC,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,uBAAuB,CAAC,CAAC;eACnJ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,4BAA4B,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC,EAC9E,CAAC;YACF,OAAO,YAAY,CAAC;QACrB,CAAC;QAED,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,WAAW,CAAC,EAAE,CAAC;YACpJ,OAAO,kBAAkB,CAAC;QAC3B,CAAC;QAED,OAAO,YAAY,CAAC;IACrB,CAAC;IAEO,oBAAoB,CAAC,IAA2B,EAAE,MAAe,EAAE,IAAgC,EAAE,OAAmB;QAE/H,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,aAAa,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,CAAC;QAElJ,QAAQ,IAAI,EAAE,CAAC;YACd,KAAK,WAAW,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,WAAoB,EAAE,CAAC;YACxD,KAAK,iBAAiB,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,iBAA0B,EAAE,CAAC;YACpE,KAAK,YAAY,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,YAAqB,EAAE,CAAC;YAC1D,KAAK,kBAAkB,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,kBAA2B,EAAE,CAAC;YACtE,KAAK,YAAY,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,YAAqB,EAAE,CAAC;QAC3D,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;QAEtD,IAAI,IAAI,KAAK,UAAU,EAAE,CAAC;YACzB,OAAO;gBACN,IAAI,EAAE,UAAmB;gBACzB,aAAa,EAAE,IAAI,CAAC,iBAAiB;gBACrC,SAAS,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;aAC1C,CAAC;QACH,CAAC;QAED,IAAI,IAAI,KAAK,oBAAoB,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,OAAO;gBACN,IAAI,EAAE,oBAA6B;gBACnC,UAAU,EAAE,MAAM,CAAC,aAAa,CAAC,eAAe;gBAChD,MAAM,EAAE,MAAM,CAAC,aAAa,CAAC,WAAW;gBACxC,IAAI,EAAE,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,CAAC;aACnD,CAAC;QACH,CAAC;QAED,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,cAAc,CAAC,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnH,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,IAAI,IAAI,KAAK,kBAAkB,EAAE,CAAC;YACjC,IAAI,UAAU,GAAG,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAExE,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;gBAC7C,UAAU,GAAG,wBAAwB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACxE,CAAC;YAED,OAAO;gBACN,IAAI,EAAE,kBAA2B;gBACjC,YAAY,EAAE,UAAU;aACxB,CAAC;QACH,CAAC;QAED,IAAI,IAAI,KAAK,iBAAiB,EAAE,CAAC;YAChC,OAAO;gBACN,IAAI,EAAE,iBAA0B;gBAChC,aAAa,EAAE,IAAI,CAAC,iBAAiB;gBACrC,aAAa,EAAE,IAAI,CAAC,iBAAiB;gBACrC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACrF,YAAY,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,aAAa,EAAE,aAAa,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;aAClG,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;CACD,CAAA;AArVY,eAAe;IAqBzB,WAAA,qBAAqB,CAAA;GArBX,eAAe,CAqV3B;;AAED,SAAS,kCAAkC,CAAC,IAAgC,EAAE,QAAyB;IACtG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACf,OAAO,KAAK,CAAC;IACd,CAAC;IACD,MAAM,GAAG,GAAG,QAAQ,CAAC;IAErB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE7E,SAAS,qBAAqB,CAAC,CAAe;QAC7C,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;YAChC,OAAO,KAAK,CAAC;QACd,CAAC;QACD,MAAM,qBAAqB,GAAG,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC;QAChG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC5B,OAAO,KAAK,CAAC;QACd,CAAC;QACD,MAAM,cAAc,GAAG,CAAC,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAC1D,IAAI,GAAG,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC;QACb,CAAC;QACD,IAAI,cAAc,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;AACF,CAAC;AAED,SAAS,0BAA0B,CAAC,IAAgC;IACnE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;IACtD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,MAAM,CAAC,aAAa,CAAC,eAAe,KAAK,MAAM,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QACjF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAED,SAAS,oBAAoB,CAAC,IAAgC;IAC7D,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElE,SAAS,UAAU,CAAC,CAAe;QAClC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;YAChC,OAAO,KAAK,CAAC;QACd,CAAC;QACD,MAAM,oBAAoB,GAAG,CAAC,CAAC,aAAa,CAAC,eAAe,KAAK,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC;QAC/F,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;AACF,CAAC;AAED,SAAS,qBAAqB,CAAC,YAA8B,EAAE,YAA0B;IACxF,OAAO,UAAU,CAAC,YAAY,EAAE,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAClF,CAAC;AAED,SAAS,wBAAwB,CAAC,YAA8B,EAAE,YAA0B;IAC3F,OAAO,UAAU,CAAC,YAAY,EAAE,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED,SAAS,UAAU,CAAC,YAA8B,EAAE,YAA0B,EAAE,EAA0B;IACzG,MAAM,MAAM,GAAqB,EAAE,CAAC;IAEpC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAE9E,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;QACjC,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;QACxC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC5E,MAAM,cAAc,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAExE,IAAI,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;YAC9C,mBAAmB;YACnB,OAAO,UAAU,CAAC,gBAAgB,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrD,MAAM,GAAG,gBAAgB,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;gBACnD,UAAU,EAAE,CAAC;YACd,CAAC;QACF,CAAC;QAED,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,QAAQ,GAAG,UAAU,EAAE,CAAC;YACnE,oBAAoB;YACpB,OAAO,UAAU,CAAC,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACjD,MAAM,IAAI,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;gBACvC,QAAQ,EAAE,CAAC;YACZ,CAAC;QACF,CAAC;QAED,0DAA0D;QAC1D,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,QAAQ,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC;QAC7J,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,yBAAyB,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1G,OAAO,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GAAG,EAAG,EAAE,OAAO,CAAC,EAAE,YAAY,CAAC,CAAC;QAC5E,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED,SAAS,UAAU,CAAC,CAAqB;QACxC,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;YACrB,OAAO,KAAK,CAAC;QACd,CAAC;QACD,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IACd,CAAC;IAED,OAAO,MAAM,CAAC;AACf,CAAC","file":"view.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { autorunWithStore, derived, IObservable, IReader, ISettableObservable, mapObservableArrayCached } from '../../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../../common/config/editorOptions.js';\nimport { LineRange } from '../../../../../common/core/lineRange.js';\nimport { Position } from '../../../../../common/core/position.js';\nimport { Range } from '../../../../../common/core/range.js';\nimport { AbstractText, SingleTextEdit, StringText } from '../../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../../common/core/textLength.js';\nimport { DetailedLineRangeMapping, lineRangeMappingFromRangeMappings, RangeMapping } from '../../../../../common/diff/rangeMapping.js';\nimport { TextModel } from '../../../../../common/model/textModel.js';\nimport { InlineCompletionsModel } from '../../model/inlineCompletionsModel.js';\nimport { InlineEditsDeletionView } from './deletionView.js';\nimport { InlineEditsGutterIndicator } from './gutterIndicatorView.js';\nimport { IInlineEditsIndicatorState, InlineEditsIndicator } from './indicatorView.js';\nimport { IOriginalEditorInlineDiffViewState, OriginalEditorInlineDiffView } from './inlineDiffView.js';\nimport { InlineEditsInsertionView } from './insertionView.js';\nimport { InlineEditsSideBySideDiff } from './sideBySideDiff.js';\nimport { applyEditToModifiedRangeMappings, createReindentEdit } from './utils.js';\nimport './view.css';\nimport { InlineEditWithChanges } from './viewAndDiffProducer.js';\nimport { LineReplacementView, WordReplacementView } from './wordReplacementView.js';\n\nexport class InlineEditsView extends Disposable {\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tprivate readonly _useMixedLinesDiff = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useMixedLinesDiff);\n\tprivate readonly _useInterleavedLinesDiff = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useInterleavedLinesDiff);\n\tprivate readonly _useCodeShifting = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.codeShifting);\n\tprivate readonly _renderSideBySide = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.renderSideBySide);\n\tprivate readonly _useMultiLineGhostText = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useMultiLineGhostText);\n\n\tprivate _previousView: {\n\t\tid: string;\n\t\tview: ReturnType<typeof InlineEditsView.prototype.determineView>;\n\t\tuserJumpedToIt: boolean;\n\t\teditorWidth: number;\n\t} | undefined;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _edit: IObservable<InlineEditWithChanges | undefined>,\n\t\tprivate readonly _model: IObservable<InlineCompletionsModel | undefined>,\n\t\tprivate readonly _focusIsInMenu: ISettableObservable<boolean>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate readonly _uiState = derived<{\n\t\tstate: ReturnType<typeof InlineEditsView.prototype.determineRenderState>;\n\t\tdiff: DetailedLineRangeMapping[];\n\t\tedit: InlineEditWithChanges;\n\t\tnewText: string;\n\t\tnewTextLineCount: number;\n\t\toriginalDisplayRange: LineRange;\n\t} | undefined>(this, reader => {\n\t\tconst edit = this._edit.read(reader);\n\t\tif (!edit) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._model.get()?.handleInlineCompletionShown(edit.inlineCompletion);\n\n\t\tlet mappings = RangeMapping.fromEdit(edit.edit);\n\t\tlet newText = edit.edit.apply(edit.originalText);\n\t\tlet diff = lineRangeMappingFromRangeMappings(mappings, edit.originalText, new StringText(newText));\n\n\t\tconst state = this.determineRenderState(edit, reader, diff, new StringText(newText));\n\t\tif (!state) {\n\t\t\tthis._model.get()?.stop();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (state.kind === 'sideBySide') {\n\t\t\tconst indentationAdjustmentEdit = createReindentEdit(newText, edit.modifiedLineRange);\n\t\t\tnewText = indentationAdjustmentEdit.applyToString(newText);\n\n\t\t\tmappings = applyEditToModifiedRangeMappings(mappings, indentationAdjustmentEdit);\n\t\t\tdiff = lineRangeMappingFromRangeMappings(mappings, edit.originalText, new StringText(newText));\n\t\t}\n\n\t\tconst originalDisplayRange = edit.originalText.lineRange.intersect(\n\t\t\tedit.originalLineRange.join(\n\t\t\t\tLineRange.ofLength(edit.originalLineRange.startLineNumber, edit.lineEdit.newLines.length)\n\t\t\t)\n\t\t)!;\n\n\t\tthis._previewTextModel.setLanguage(this._editor.getModel()!.getLanguageId());\n\n\t\tconst previousNewText = this._previewTextModel.getValue();\n\t\tif (previousNewText !== newText) {\n\t\t\t// Only update the model if the text has changed to avoid flickering\n\t\t\tthis._previewTextModel.setValue(newText);\n\t\t}\n\n\t\treturn {\n\t\t\tstate,\n\t\t\tdiff,\n\t\t\tedit,\n\t\t\tnewText,\n\t\t\tnewTextLineCount: edit.modifiedLineRange.length,\n\t\t\toriginalDisplayRange: originalDisplayRange,\n\t\t};\n\t});\n\n\tprivate readonly _previewTextModel = this._register(this._instantiationService.createInstance(\n\t\tTextModel,\n\t\t'',\n\t\tthis._editor.getModel()!.getLanguageId(),\n\t\t{ ...TextModel.DEFAULT_CREATION_OPTIONS, bracketPairColorizationOptions: { enabled: true, independentColorPoolPerBracketType: false } },\n\t\tnull\n\t));\n\n\tprivate readonly _sideBySide = this._register(this._instantiationService.createInstance(InlineEditsSideBySideDiff,\n\t\tthis._editor,\n\t\tthis._edit,\n\t\tthis._previewTextModel,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'sideBySide' ? ({\n\t\t\tedit: s.edit,\n\t\t\tnewTextLineCount: s.newTextLineCount,\n\t\t\toriginalDisplayRange: s.originalDisplayRange,\n\t\t}) : undefined),\n\t));\n\n\tprotected readonly _deletion = this._register(this._instantiationService.createInstance(InlineEditsDeletionView,\n\t\tthis._editor,\n\t\tthis._edit,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'deletion' ? ({\n\t\t\toriginalRange: s.state.originalRange,\n\t\t\tdeletions: s.state.deletions,\n\t\t}) : undefined),\n\t));\n\n\tprotected readonly _insertion = this._register(this._instantiationService.createInstance(InlineEditsInsertionView,\n\t\tthis._editor,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'insertionMultiLine' ? ({\n\t\t\tlineNumber: s.state.lineNumber,\n\t\t\tstartColumn: s.state.column,\n\t\t\ttext: s.state.text,\n\t\t}) : undefined),\n\t));\n\n\tprivate readonly _inlineDiffViewState = derived<IOriginalEditorInlineDiffViewState | undefined>(this, reader => {\n\t\tconst e = this._uiState.read(reader);\n\t\tif (!e || !e.state) { return undefined; }\n\t\tif (e.state.kind === 'wordReplacements' || e.state.kind === 'lineReplacement' || e.state.kind === 'insertionMultiLine') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tmodifiedText: new StringText(e.newText),\n\t\t\tdiff: e.diff,\n\t\t\tmode: e.state.kind === 'collapsed' ? 'sideBySide' : e.state.kind,\n\t\t\tmodifiedCodeEditor: this._sideBySide.previewEditor,\n\t\t};\n\t});\n\n\tprotected readonly _inlineDiffView = this._register(new OriginalEditorInlineDiffView(this._editor, this._inlineDiffViewState, this._previewTextModel));\n\n\tprotected readonly _wordReplacementViews = mapObservableArrayCached(this, this._uiState.map(s => s?.state?.kind === 'wordReplacements' ? s.state.replacements : []), (e, store) => {\n\t\treturn store.add(this._instantiationService.createInstance(WordReplacementView, this._editorObs, e, [e]));\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprotected readonly _lineReplacementView = mapObservableArrayCached(this, this._uiState.map(s => s?.state?.kind === 'lineReplacement' ? [s.state] : []), (e, store) => { // TODO: no need for map here, how can this be done with observables\n\t\treturn store.add(this._instantiationService.createInstance(LineReplacementView, this._editorObs, e.originalRange, e.modifiedRange, e.modifiedLines, e.replacements));\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprivate readonly _useGutterIndicator = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useGutterIndicator);\n\n\tprivate readonly _inlineEditsIsHovered = derived(this, reader => {\n\t\treturn this._sideBySide.isHovered.read(reader)\n\t\t\t|| this._wordReplacementViews.read(reader).some(v => v.isHovered.read(reader))\n\t\t\t|| this._deletion.isHovered.read(reader)\n\t\t\t|| this._inlineDiffView.isHovered.read(reader)\n\t\t\t|| this._lineReplacementView.read(reader).some(v => v.isHovered.read(reader));\n\t});\n\n\tprivate readonly _gutterIndicatorOffset = derived<number>(this, reader => {\n\t\t// TODO: have a better way to tell the gutter indicator view where the edit is inside a viewzone\n\t\tif (this._uiState.read(reader)?.state?.kind === 'insertionMultiLine') {\n\t\t\treturn this._insertion.startLineOffset.read(reader);\n\t\t}\n\t\treturn 0;\n\t});\n\n\tprivate readonly _originalDisplayRange = derived(this, reader => {\n\t\tconst state = this._uiState.read(reader);\n\t\tif (state?.state?.kind === 'insertionMultiLine') {\n\t\t\treturn this._insertion.originalLines.read(reader);\n\t\t}\n\t\treturn state?.originalDisplayRange;\n\t});\n\n\tprotected readonly _indicator = this._register(autorunWithStore((reader, store) => {\n\t\tif (this._useGutterIndicator.read(reader)) {\n\t\t\tstore.add(this._instantiationService.createInstance(\n\t\t\t\tInlineEditsGutterIndicator,\n\t\t\t\tthis._editorObs,\n\t\t\t\tthis._originalDisplayRange,\n\t\t\t\tthis._gutterIndicatorOffset,\n\t\t\t\tthis._model,\n\t\t\t\tthis._inlineEditsIsHovered,\n\t\t\t\tthis._focusIsInMenu,\n\t\t\t));\n\t\t} else {\n\t\t\tstore.add(new InlineEditsIndicator(\n\t\t\t\tthis._editorObs,\n\t\t\t\tderived<IInlineEditsIndicatorState | undefined>(reader => {\n\t\t\t\t\tconst state = this._uiState.read(reader);\n\t\t\t\t\tconst range = this._originalDisplayRange.read(reader);\n\t\t\t\t\tif (!state || !state.state || !range) { return undefined; }\n\t\t\t\t\tconst top = this._editor.getTopForLineNumber(range.startLineNumber) - this._editorObs.scrollTop.read(reader) + this._gutterIndicatorOffset.read(reader);\n\t\t\t\t\treturn { editTop: top, showAlways: state.state.kind !== 'sideBySide' };\n\t\t\t\t}),\n\t\t\t\tthis._model,\n\t\t\t));\n\t\t}\n\t}));\n\n\tprivate determineView(edit: InlineEditWithChanges, reader: IReader, diff: DetailedLineRangeMapping[], newText: StringText): string {\n\t\t// Check if we can use the previous view if it is the same InlineCompletion as previously shown\n\t\tconst canUseCache = this._previousView?.id === edit.inlineCompletion.id;\n\t\tconst reconsiderViewAfterJump = edit.userJumpedToIt !== this._previousView?.userJumpedToIt &&\n\t\t\t(\n\t\t\t\t(this._useMixedLinesDiff.read(reader) === 'afterJumpWhenPossible' && this._previousView?.view !== 'mixedLines') ||\n\t\t\t\t(this._useInterleavedLinesDiff.read(reader) === 'afterJump' && this._previousView?.view !== 'interleavedLines')\n\t\t\t);\n\t\tconst reconsiderViewEditorWidthChange = this._previousView?.editorWidth !== this._editorObs.layoutInfoWidth.read(reader) &&\n\t\t\t(\n\t\t\t\tthis._previousView?.view === 'sideBySide' ||\n\t\t\t\tthis._previousView?.view === 'lineReplacement'\n\t\t\t);\n\n\t\tif (canUseCache && !reconsiderViewAfterJump && !reconsiderViewEditorWidthChange) {\n\t\t\treturn this._previousView!.view;\n\t\t}\n\n\t\t// Determine the view based on the edit / diff\n\n\t\tif (edit.isCollapsed) {\n\t\t\treturn 'collapsed';\n\t\t}\n\n\t\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\t\tconst isSingleInnerEdit = inner.length === 1;\n\t\tif (\n\t\t\tisSingleInnerEdit && (\n\t\t\t\tthis._useMixedLinesDiff.read(reader) === 'forStableInsertions'\n\t\t\t\t&& this._useCodeShifting.read(reader)\n\t\t\t\t&& isSingleLineInsertionAfterPosition(diff, edit.cursorPosition)\n\t\t\t\t|| isSingleLineDeletion(diff)\n\t\t\t)\n\t\t) {\n\t\t\treturn 'insertionInline';\n\t\t}\n\n\t\tconst innerValues = inner.map(m => ({ original: edit.originalText.getValueOfRange(m.originalRange), modified: newText.getValueOfRange(m.modifiedRange) }));\n\t\tif (innerValues.every(({ original, modified }) => modified.trim() === '' && original.length > 0 && (original.length > modified.length || original.trim() !== ''))) {\n\t\t\treturn 'deletion';\n\t\t}\n\n\t\tif (isSingleMultiLineInsertion(diff) && this._useMultiLineGhostText.read(reader) && this._useCodeShifting.read(reader)) {\n\t\t\treturn 'insertionMultiLine';\n\t\t}\n\n\t\tconst numOriginalLines = edit.originalLineRange.length;\n\t\tconst numModifiedLines = edit.modifiedLineRange.length;\n\t\tconst allInnerChangesNotTooLong = inner.every(m => TextLength.ofRange(m.originalRange).columnCount < WordReplacementView.MAX_LENGTH && TextLength.ofRange(m.modifiedRange).columnCount < WordReplacementView.MAX_LENGTH);\n\t\tif (allInnerChangesNotTooLong && isSingleInnerEdit && numOriginalLines === 1 && numModifiedLines === 1) {\n\t\t\t// Make sure there is no insertion, even if we grow them\n\t\t\tif (\n\t\t\t\t!inner.some(m => m.originalRange.isEmpty()) ||\n\t\t\t\t!growEditsUntilWhitespace(inner.map(m => new SingleTextEdit(m.originalRange, '')), edit.originalText).some(e => e.range.isEmpty() && TextLength.ofRange(e.range).columnCount < WordReplacementView.MAX_LENGTH)\n\t\t\t) {\n\t\t\t\treturn 'wordReplacements';\n\t\t\t}\n\t\t}\n\n\t\tif (numOriginalLines > 0 && numModifiedLines > 0) {\n\t\t\tif (this._renderSideBySide.read(reader) !== 'never' && InlineEditsSideBySideDiff.fitsInsideViewport(this._editor, edit, reader)) {\n\t\t\t\treturn 'sideBySide';\n\t\t\t}\n\n\t\t\treturn 'lineReplacement';\n\t\t}\n\n\t\tif (\n\t\t\t(this._useMixedLinesDiff.read(reader) === 'whenPossible' || (edit.userJumpedToIt && this._useMixedLinesDiff.read(reader) === 'afterJumpWhenPossible'))\n\t\t\t&& diff.every(m => OriginalEditorInlineDiffView.supportsInlineDiffRendering(m))\n\t\t) {\n\t\t\treturn 'mixedLines';\n\t\t}\n\n\t\tif (this._useInterleavedLinesDiff.read(reader) === 'always' || (edit.userJumpedToIt && this._useInterleavedLinesDiff.read(reader) === 'afterJump')) {\n\t\t\treturn 'interleavedLines';\n\t\t}\n\n\t\treturn 'sideBySide';\n\t}\n\n\tprivate determineRenderState(edit: InlineEditWithChanges, reader: IReader, diff: DetailedLineRangeMapping[], newText: StringText) {\n\n\t\tconst view = this.determineView(edit, reader, diff, newText);\n\n\t\tthis._previousView = { id: edit.inlineCompletion.id, view, userJumpedToIt: edit.userJumpedToIt, editorWidth: this._editor.getLayoutInfo().width };\n\n\t\tswitch (view) {\n\t\t\tcase 'collapsed': return { kind: 'collapsed' as const };\n\t\t\tcase 'insertionInline': return { kind: 'insertionInline' as const };\n\t\t\tcase 'mixedLines': return { kind: 'mixedLines' as const };\n\t\t\tcase 'interleavedLines': return { kind: 'interleavedLines' as const };\n\t\t\tcase 'sideBySide': return { kind: 'sideBySide' as const };\n\t\t}\n\n\t\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\n\t\tif (view === 'deletion') {\n\t\t\treturn {\n\t\t\t\tkind: 'deletion' as const,\n\t\t\t\toriginalRange: edit.originalLineRange,\n\t\t\t\tdeletions: inner.map(m => m.originalRange),\n\t\t\t};\n\t\t}\n\n\t\tif (view === 'insertionMultiLine') {\n\t\t\tconst change = inner[0];\n\t\t\treturn {\n\t\t\t\tkind: 'insertionMultiLine' as const,\n\t\t\t\tlineNumber: change.originalRange.startLineNumber,\n\t\t\t\tcolumn: change.originalRange.startColumn,\n\t\t\t\ttext: newText.getValueOfRange(change.modifiedRange),\n\t\t\t};\n\t\t}\n\n\t\tconst replacements = inner.map(m => new SingleTextEdit(m.originalRange, newText.getValueOfRange(m.modifiedRange)));\n\t\tif (replacements.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (view === 'wordReplacements') {\n\t\t\tlet grownEdits = growEditsToEntireWord(replacements, edit.originalText);\n\n\t\t\tif (grownEdits.some(e => e.range.isEmpty())) {\n\t\t\t\tgrownEdits = growEditsUntilWhitespace(replacements, edit.originalText);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tkind: 'wordReplacements' as const,\n\t\t\t\treplacements: grownEdits,\n\t\t\t};\n\t\t}\n\n\t\tif (view === 'lineReplacement') {\n\t\t\treturn {\n\t\t\t\tkind: 'lineReplacement' as const,\n\t\t\t\toriginalRange: edit.originalLineRange,\n\t\t\t\tmodifiedRange: edit.modifiedLineRange,\n\t\t\t\tmodifiedLines: edit.modifiedLineRange.mapToLineArray(line => newText.getLineAt(line)),\n\t\t\t\treplacements: inner.map(m => ({ originalRange: m.originalRange, modifiedRange: m.modifiedRange })),\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nfunction isSingleLineInsertionAfterPosition(diff: DetailedLineRangeMapping[], position: Position | null) {\n\tif (!position) {\n\t\treturn false;\n\t}\n\tconst pos = position;\n\n\treturn diff.every(m => m.innerChanges!.every(r => isStableWordInsertion(r)));\n\n\tfunction isStableWordInsertion(r: RangeMapping) {\n\t\tif (!r.originalRange.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isInsertionWithinLine = r.modifiedRange.startLineNumber === r.modifiedRange.endLineNumber;\n\t\tif (!isInsertionWithinLine) {\n\t\t\treturn false;\n\t\t}\n\t\tconst insertPosition = r.originalRange.getStartPosition();\n\t\tif (pos.isBeforeOrEqual(insertPosition)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (insertPosition.lineNumber < pos.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nfunction isSingleMultiLineInsertion(diff: DetailedLineRangeMapping[]) {\n\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\tif (inner.length !== 1) {\n\t\treturn false;\n\t}\n\n\tconst change = inner[0];\n\tif (!change.originalRange.isEmpty()) {\n\t\treturn false;\n\t}\n\n\tif (change.modifiedRange.startLineNumber === change.modifiedRange.endLineNumber) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction isSingleLineDeletion(diff: DetailedLineRangeMapping[]): boolean {\n\treturn diff.every(m => m.innerChanges!.every(r => isDeletion(r)));\n\n\tfunction isDeletion(r: RangeMapping) {\n\t\tif (!r.modifiedRange.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isDeletionWithinLine = r.originalRange.startLineNumber === r.originalRange.endLineNumber;\n\t\tif (!isDeletionWithinLine) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nfunction growEditsToEntireWord(replacements: SingleTextEdit[], originalText: AbstractText): SingleTextEdit[] {\n\treturn _growEdits(replacements, originalText, (char) => /^[a-zA-Z]$/.test(char));\n}\n\nfunction growEditsUntilWhitespace(replacements: SingleTextEdit[], originalText: AbstractText): SingleTextEdit[] {\n\treturn _growEdits(replacements, originalText, (char) => !(/^\\s$/.test(char)));\n}\n\nfunction _growEdits(replacements: SingleTextEdit[], originalText: AbstractText, fn: (c: string) => boolean): SingleTextEdit[] {\n\tconst result: SingleTextEdit[] = [];\n\n\treplacements.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\n\tfor (const edit of replacements) {\n\t\tlet startIndex = edit.range.startColumn - 1;\n\t\tlet endIndex = edit.range.endColumn - 2;\n\t\tlet prefix = '';\n\t\tlet suffix = '';\n\t\tconst startLineContent = originalText.getLineAt(edit.range.startLineNumber);\n\t\tconst endLineContent = originalText.getLineAt(edit.range.endLineNumber);\n\n\t\tif (isIncluded(startLineContent[startIndex])) {\n\t\t\t// grow to the left\n\t\t\twhile (isIncluded(startLineContent[startIndex - 1])) {\n\t\t\t\tprefix = startLineContent[startIndex - 1] + prefix;\n\t\t\t\tstartIndex--;\n\t\t\t}\n\t\t}\n\n\t\tif (isIncluded(endLineContent[endIndex]) || endIndex < startIndex) {\n\t\t\t// grow to the right\n\t\t\twhile (isIncluded(endLineContent[endIndex + 1])) {\n\t\t\t\tsuffix += endLineContent[endIndex + 1];\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\n\t\t// create new edit and merge together if they are touching\n\t\tlet newEdit = new SingleTextEdit(new Range(edit.range.startLineNumber, startIndex + 1, edit.range.endLineNumber, endIndex + 2), prefix + edit.text + suffix);\n\t\tif (result.length > 0 && Range.areIntersectingOrTouching(result[result.length - 1].range, newEdit.range)) {\n\t\t\tnewEdit = SingleTextEdit.joinEdits([result.pop()!, newEdit], originalText);\n\t\t}\n\n\t\tresult.push(newEdit);\n\t}\n\n\tfunction isIncluded(c: string | undefined) {\n\t\tif (c === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn fn(c);\n\t}\n\n\treturn result;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../../base/common/lifecycle.js';\nimport { autorunWithStore, derived, IObservable, IReader, ISettableObservable, mapObservableArrayCached } from '../../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../../common/config/editorOptions.js';\nimport { LineRange } from '../../../../../common/core/lineRange.js';\nimport { Position } from '../../../../../common/core/position.js';\nimport { Range } from '../../../../../common/core/range.js';\nimport { AbstractText, SingleTextEdit, StringText } from '../../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../../common/core/textLength.js';\nimport { DetailedLineRangeMapping, lineRangeMappingFromRangeMappings, RangeMapping } from '../../../../../common/diff/rangeMapping.js';\nimport { TextModel } from '../../../../../common/model/textModel.js';\nimport { InlineCompletionsModel } from '../../model/inlineCompletionsModel.js';\nimport { InlineEditsDeletionView } from './deletionView.js';\nimport { InlineEditsGutterIndicator } from './gutterIndicatorView.js';\nimport { IInlineEditsIndicatorState, InlineEditsIndicator } from './indicatorView.js';\nimport { IOriginalEditorInlineDiffViewState, OriginalEditorInlineDiffView } from './inlineDiffView.js';\nimport { InlineEditsInsertionView } from './insertionView.js';\nimport { InlineEditsSideBySideDiff } from './sideBySideDiff.js';\nimport { applyEditToModifiedRangeMappings, createReindentEdit } from './utils.js';\nimport './view.css';\nimport { InlineEditWithChanges } from './viewAndDiffProducer.js';\nimport { LineReplacementView, WordReplacementView } from './wordReplacementView.js';\n\nexport class InlineEditsView extends Disposable {\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tprivate readonly _useMixedLinesDiff = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useMixedLinesDiff);\n\tprivate readonly _useInterleavedLinesDiff = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useInterleavedLinesDiff);\n\tprivate readonly _useCodeShifting = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.codeShifting);\n\tprivate readonly _renderSideBySide = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.renderSideBySide);\n\tprivate readonly _useMultiLineGhostText = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useMultiLineGhostText);\n\n\tprivate _previousView: {\n\t\tid: string;\n\t\tview: ReturnType<typeof InlineEditsView.prototype.determineView>;\n\t\tuserJumpedToIt: boolean;\n\t\teditorWidth: number;\n\t} | undefined;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _edit: IObservable<InlineEditWithChanges | undefined>,\n\t\tprivate readonly _model: IObservable<InlineCompletionsModel | undefined>,\n\t\tprivate readonly _focusIsInMenu: ISettableObservable<boolean>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate readonly _uiState = derived<{\n\t\tstate: ReturnType<typeof InlineEditsView.prototype.determineRenderState>;\n\t\tdiff: DetailedLineRangeMapping[];\n\t\tedit: InlineEditWithChanges;\n\t\tnewText: string;\n\t\tnewTextLineCount: number;\n\t\toriginalDisplayRange: LineRange;\n\t} | undefined>(this, reader => {\n\t\tconst edit = this._edit.read(reader);\n\t\tif (!edit) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._model.get()?.handleInlineCompletionShown(edit.inlineCompletion);\n\n\t\tlet mappings = RangeMapping.fromEdit(edit.edit);\n\t\tlet newText = edit.edit.apply(edit.originalText);\n\t\tlet diff = lineRangeMappingFromRangeMappings(mappings, edit.originalText, new StringText(newText));\n\n\t\tconst state = this.determineRenderState(edit, reader, diff, new StringText(newText));\n\t\tif (!state) {\n\t\t\tthis._model.get()?.stop();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (state.kind === 'sideBySide') {\n\t\t\tconst indentationAdjustmentEdit = createReindentEdit(newText, edit.modifiedLineRange);\n\t\t\tnewText = indentationAdjustmentEdit.applyToString(newText);\n\n\t\t\tmappings = applyEditToModifiedRangeMappings(mappings, indentationAdjustmentEdit);\n\t\t\tdiff = lineRangeMappingFromRangeMappings(mappings, edit.originalText, new StringText(newText));\n\t\t}\n\n\t\tconst originalDisplayRange = edit.originalText.lineRange.intersect(\n\t\t\tedit.originalLineRange.join(\n\t\t\t\tLineRange.ofLength(edit.originalLineRange.startLineNumber, edit.lineEdit.newLines.length)\n\t\t\t)\n\t\t)!;\n\n\t\tthis._previewTextModel.setLanguage(this._editor.getModel()!.getLanguageId());\n\n\t\tconst previousNewText = this._previewTextModel.getValue();\n\t\tif (previousNewText !== newText) {\n\t\t\t// Only update the model if the text has changed to avoid flickering\n\t\t\tthis._previewTextModel.setValue(newText);\n\t\t}\n\n\t\treturn {\n\t\t\tstate,\n\t\t\tdiff,\n\t\t\tedit,\n\t\t\tnewText,\n\t\t\tnewTextLineCount: edit.modifiedLineRange.length,\n\t\t\toriginalDisplayRange: originalDisplayRange,\n\t\t};\n\t});\n\n\tprivate readonly _previewTextModel = this._register(this._instantiationService.createInstance(\n\t\tTextModel,\n\t\t'',\n\t\tthis._editor.getModel()!.getLanguageId(),\n\t\t{ ...TextModel.DEFAULT_CREATION_OPTIONS, bracketPairColorizationOptions: { enabled: true, independentColorPoolPerBracketType: false } },\n\t\tnull\n\t));\n\n\tprivate readonly _sideBySide = this._register(this._instantiationService.createInstance(InlineEditsSideBySideDiff,\n\t\tthis._editor,\n\t\tthis._edit,\n\t\tthis._previewTextModel,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'sideBySide' ? ({\n\t\t\tedit: s.edit,\n\t\t\tnewTextLineCount: s.newTextLineCount,\n\t\t\toriginalDisplayRange: s.originalDisplayRange,\n\t\t}) : undefined),\n\t));\n\n\tprotected readonly _deletion = this._register(this._instantiationService.createInstance(InlineEditsDeletionView,\n\t\tthis._editor,\n\t\tthis._edit,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'deletion' ? ({\n\t\t\toriginalRange: s.state.originalRange,\n\t\t\tdeletions: s.state.deletions,\n\t\t}) : undefined),\n\t));\n\n\tprotected readonly _insertion = this._register(this._instantiationService.createInstance(InlineEditsInsertionView,\n\t\tthis._editor,\n\t\tthis._uiState.map(s => s && s.state?.kind === 'insertionMultiLine' ? ({\n\t\t\tlineNumber: s.state.lineNumber,\n\t\t\tstartColumn: s.state.column,\n\t\t\ttext: s.state.text,\n\t\t}) : undefined),\n\t));\n\n\tprivate readonly _inlineDiffViewState = derived<IOriginalEditorInlineDiffViewState | undefined>(this, reader => {\n\t\tconst e = this._uiState.read(reader);\n\t\tif (!e || !e.state) { return undefined; }\n\t\tif (e.state.kind === 'wordReplacements' || e.state.kind === 'lineReplacement' || e.state.kind === 'insertionMultiLine') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tmodifiedText: new StringText(e.newText),\n\t\t\tdiff: e.diff,\n\t\t\tmode: e.state.kind === 'collapsed' ? 'sideBySide' : e.state.kind,\n\t\t\tmodifiedCodeEditor: this._sideBySide.previewEditor,\n\t\t};\n\t});\n\n\tprotected readonly _inlineDiffView = this._register(new OriginalEditorInlineDiffView(this._editor, this._inlineDiffViewState, this._previewTextModel));\n\n\tprotected readonly _wordReplacementViews = mapObservableArrayCached(this, this._uiState.map(s => s?.state?.kind === 'wordReplacements' ? s.state.replacements : []), (e, store) => {\n\t\treturn store.add(this._instantiationService.createInstance(WordReplacementView, this._editorObs, e, [e]));\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprotected readonly _lineReplacementView = mapObservableArrayCached(this, this._uiState.map(s => s?.state?.kind === 'lineReplacement' ? [s.state] : []), (e, store) => { // TODO: no need for map here, how can this be done with observables\n\t\treturn store.add(this._instantiationService.createInstance(LineReplacementView, this._editorObs, e.originalRange, e.modifiedRange, e.modifiedLines, e.replacements));\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprivate readonly _useGutterIndicator = observableCodeEditor(this._editor).getOption(EditorOption.inlineSuggest).map(s => s.edits.useGutterIndicator);\n\n\tprivate readonly _inlineEditsIsHovered = derived(this, reader => {\n\t\treturn this._sideBySide.isHovered.read(reader)\n\t\t\t|| this._wordReplacementViews.read(reader).some(v => v.isHovered.read(reader))\n\t\t\t|| this._deletion.isHovered.read(reader)\n\t\t\t|| this._inlineDiffView.isHovered.read(reader)\n\t\t\t|| this._lineReplacementView.read(reader).some(v => v.isHovered.read(reader));\n\t});\n\n\tprivate readonly _gutterIndicatorOffset = derived<number>(this, reader => {\n\t\t// TODO: have a better way to tell the gutter indicator view where the edit is inside a viewzone\n\t\tif (this._uiState.read(reader)?.state?.kind === 'insertionMultiLine') {\n\t\t\treturn this._insertion.startLineOffset.read(reader);\n\t\t}\n\t\treturn 0;\n\t});\n\n\tprivate readonly _originalDisplayRange = derived(this, reader => {\n\t\tconst state = this._uiState.read(reader);\n\t\tif (state?.state?.kind === 'insertionMultiLine') {\n\t\t\treturn this._insertion.originalLines.read(reader);\n\t\t}\n\t\treturn state?.originalDisplayRange;\n\t});\n\n\tprotected readonly _indicator = this._register(autorunWithStore((reader, store) => {\n\t\tif (this._useGutterIndicator.read(reader)) {\n\t\t\tstore.add(this._instantiationService.createInstance(\n\t\t\t\tInlineEditsGutterIndicator,\n\t\t\t\tthis._editorObs,\n\t\t\t\tthis._originalDisplayRange,\n\t\t\t\tthis._gutterIndicatorOffset,\n\t\t\t\tthis._model,\n\t\t\t\tthis._inlineEditsIsHovered,\n\t\t\t\tthis._focusIsInMenu,\n\t\t\t));\n\t\t} else {\n\t\t\tstore.add(new InlineEditsIndicator(\n\t\t\t\tthis._editorObs,\n\t\t\t\tderived<IInlineEditsIndicatorState | undefined>(reader => {\n\t\t\t\t\tconst state = this._uiState.read(reader);\n\t\t\t\t\tconst range = this._originalDisplayRange.read(reader);\n\t\t\t\t\tif (!state || !state.state || !range) { return undefined; }\n\t\t\t\t\tconst top = this._editor.getTopForLineNumber(range.startLineNumber) - this._editorObs.scrollTop.read(reader) + this._gutterIndicatorOffset.read(reader);\n\t\t\t\t\treturn { editTop: top, showAlways: state.state.kind !== 'sideBySide' };\n\t\t\t\t}),\n\t\t\t\tthis._model,\n\t\t\t));\n\t\t}\n\t}));\n\n\tprivate determineView(edit: InlineEditWithChanges, reader: IReader, diff: DetailedLineRangeMapping[], newText: StringText): string {\n\t\t// Check if we can use the previous view if it is the same InlineCompletion as previously shown\n\t\tconst canUseCache = this._previousView?.id === edit.inlineCompletion.id;\n\t\tconst reconsiderViewAfterJump = edit.userJumpedToIt !== this._previousView?.userJumpedToIt &&\n\t\t\t(\n\t\t\t\t(this._useMixedLinesDiff.read(reader) === 'afterJumpWhenPossible' && this._previousView?.view !== 'mixedLines') ||\n\t\t\t\t(this._useInterleavedLinesDiff.read(reader) === 'afterJump' && this._previousView?.view !== 'interleavedLines')\n\t\t\t);\n\t\tconst reconsiderViewEditorWidthChange = this._previousView?.editorWidth !== this._editorObs.layoutInfoWidth.read(reader) &&\n\t\t\t(\n\t\t\t\tthis._previousView?.view === 'sideBySide' ||\n\t\t\t\tthis._previousView?.view === 'lineReplacement'\n\t\t\t);\n\n\t\tif (canUseCache && !reconsiderViewAfterJump && !reconsiderViewEditorWidthChange) {\n\t\t\treturn this._previousView!.view;\n\t\t}\n\n\t\t// Determine the view based on the edit / diff\n\n\t\tif (edit.isCollapsed) {\n\t\t\treturn 'collapsed';\n\t\t}\n\n\t\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\t\tconst isSingleInnerEdit = inner.length === 1;\n\t\tif (\n\t\t\tisSingleInnerEdit && (\n\t\t\t\tthis._useMixedLinesDiff.read(reader) === 'forStableInsertions'\n\t\t\t\t&& this._useCodeShifting.read(reader)\n\t\t\t\t&& isSingleLineInsertionAfterPosition(diff, edit.cursorPosition)\n\t\t\t\t|| isSingleLineDeletion(diff)\n\t\t\t)\n\t\t) {\n\t\t\treturn 'insertionInline';\n\t\t}\n\n\t\tconst innerValues = inner.map(m => ({ original: edit.originalText.getValueOfRange(m.originalRange), modified: newText.getValueOfRange(m.modifiedRange) }));\n\t\tif (innerValues.every(({ original, modified }) => modified.trim() === '' && original.length > 0 && (original.length > modified.length || original.trim() !== ''))) {\n\t\t\treturn 'deletion';\n\t\t}\n\n\t\tif (isSingleMultiLineInsertion(diff) && this._useMultiLineGhostText.read(reader) && this._useCodeShifting.read(reader)) {\n\t\t\treturn 'insertionMultiLine';\n\t\t}\n\n\t\tconst numOriginalLines = edit.originalLineRange.length;\n\t\tconst numModifiedLines = edit.modifiedLineRange.length;\n\t\tconst allInnerChangesNotTooLong = inner.every(m => TextLength.ofRange(m.originalRange).columnCount < WordReplacementView.MAX_LENGTH && TextLength.ofRange(m.modifiedRange).columnCount < WordReplacementView.MAX_LENGTH);\n\t\tif (allInnerChangesNotTooLong && isSingleInnerEdit && numOriginalLines === 1 && numModifiedLines === 1) {\n\t\t\t// Make sure there is no insertion, even if we grow them\n\t\t\tif (\n\t\t\t\t!inner.some(m => m.originalRange.isEmpty()) ||\n\t\t\t\t!growEditsUntilWhitespace(inner.map(m => new SingleTextEdit(m.originalRange, '')), edit.originalText).some(e => e.range.isEmpty() && TextLength.ofRange(e.range).columnCount < WordReplacementView.MAX_LENGTH)\n\t\t\t) {\n\t\t\t\treturn 'wordReplacements';\n\t\t\t}\n\t\t}\n\n\t\tif (numOriginalLines > 0 && numModifiedLines > 0) {\n\t\t\tif (this._renderSideBySide.read(reader) !== 'never' && InlineEditsSideBySideDiff.fitsInsideViewport(this._editor, edit, reader)) {\n\t\t\t\treturn 'sideBySide';\n\t\t\t}\n\n\t\t\treturn 'lineReplacement';\n\t\t}\n\n\t\tif (\n\t\t\t(this._useMixedLinesDiff.read(reader) === 'whenPossible' || (edit.userJumpedToIt && this._useMixedLinesDiff.read(reader) === 'afterJumpWhenPossible'))\n\t\t\t&& diff.every(m => OriginalEditorInlineDiffView.supportsInlineDiffRendering(m))\n\t\t) {\n\t\t\treturn 'mixedLines';\n\t\t}\n\n\t\tif (this._useInterleavedLinesDiff.read(reader) === 'always' || (edit.userJumpedToIt && this._useInterleavedLinesDiff.read(reader) === 'afterJump')) {\n\t\t\treturn 'interleavedLines';\n\t\t}\n\n\t\treturn 'sideBySide';\n\t}\n\n\tprivate determineRenderState(edit: InlineEditWithChanges, reader: IReader, diff: DetailedLineRangeMapping[], newText: StringText) {\n\n\t\tconst view = this.determineView(edit, reader, diff, newText);\n\n\t\tthis._previousView = { id: edit.inlineCompletion.id, view, userJumpedToIt: edit.userJumpedToIt, editorWidth: this._editor.getLayoutInfo().width };\n\n\t\tswitch (view) {\n\t\t\tcase 'collapsed': return { kind: 'collapsed' as const };\n\t\t\tcase 'insertionInline': return { kind: 'insertionInline' as const };\n\t\t\tcase 'mixedLines': return { kind: 'mixedLines' as const };\n\t\t\tcase 'interleavedLines': return { kind: 'interleavedLines' as const };\n\t\t\tcase 'sideBySide': return { kind: 'sideBySide' as const };\n\t\t}\n\n\t\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\n\t\tif (view === 'deletion') {\n\t\t\treturn {\n\t\t\t\tkind: 'deletion' as const,\n\t\t\t\toriginalRange: edit.originalLineRange,\n\t\t\t\tdeletions: inner.map(m => m.originalRange),\n\t\t\t};\n\t\t}\n\n\t\tif (view === 'insertionMultiLine') {\n\t\t\tconst change = inner[0];\n\t\t\treturn {\n\t\t\t\tkind: 'insertionMultiLine' as const,\n\t\t\t\tlineNumber: change.originalRange.startLineNumber,\n\t\t\t\tcolumn: change.originalRange.startColumn,\n\t\t\t\ttext: newText.getValueOfRange(change.modifiedRange),\n\t\t\t};\n\t\t}\n\n\t\tconst replacements = inner.map(m => new SingleTextEdit(m.originalRange, newText.getValueOfRange(m.modifiedRange)));\n\t\tif (replacements.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (view === 'wordReplacements') {\n\t\t\tlet grownEdits = growEditsToEntireWord(replacements, edit.originalText);\n\n\t\t\tif (grownEdits.some(e => e.range.isEmpty())) {\n\t\t\t\tgrownEdits = growEditsUntilWhitespace(replacements, edit.originalText);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tkind: 'wordReplacements' as const,\n\t\t\t\treplacements: grownEdits,\n\t\t\t};\n\t\t}\n\n\t\tif (view === 'lineReplacement') {\n\t\t\treturn {\n\t\t\t\tkind: 'lineReplacement' as const,\n\t\t\t\toriginalRange: edit.originalLineRange,\n\t\t\t\tmodifiedRange: edit.modifiedLineRange,\n\t\t\t\tmodifiedLines: edit.modifiedLineRange.mapToLineArray(line => newText.getLineAt(line)),\n\t\t\t\treplacements: inner.map(m => ({ originalRange: m.originalRange, modifiedRange: m.modifiedRange })),\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nfunction isSingleLineInsertionAfterPosition(diff: DetailedLineRangeMapping[], position: Position | null) {\n\tif (!position) {\n\t\treturn false;\n\t}\n\tconst pos = position;\n\n\treturn diff.every(m => m.innerChanges!.every(r => isStableWordInsertion(r)));\n\n\tfunction isStableWordInsertion(r: RangeMapping) {\n\t\tif (!r.originalRange.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isInsertionWithinLine = r.modifiedRange.startLineNumber === r.modifiedRange.endLineNumber;\n\t\tif (!isInsertionWithinLine) {\n\t\t\treturn false;\n\t\t}\n\t\tconst insertPosition = r.originalRange.getStartPosition();\n\t\tif (pos.isBeforeOrEqual(insertPosition)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (insertPosition.lineNumber < pos.lineNumber) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nfunction isSingleMultiLineInsertion(diff: DetailedLineRangeMapping[]) {\n\tconst inner = diff.flatMap(d => d.innerChanges ?? []);\n\tif (inner.length !== 1) {\n\t\treturn false;\n\t}\n\n\tconst change = inner[0];\n\tif (!change.originalRange.isEmpty()) {\n\t\treturn false;\n\t}\n\n\tif (change.modifiedRange.startLineNumber === change.modifiedRange.endLineNumber) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction isSingleLineDeletion(diff: DetailedLineRangeMapping[]): boolean {\n\treturn diff.every(m => m.innerChanges!.every(r => isDeletion(r)));\n\n\tfunction isDeletion(r: RangeMapping) {\n\t\tif (!r.modifiedRange.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isDeletionWithinLine = r.originalRange.startLineNumber === r.originalRange.endLineNumber;\n\t\tif (!isDeletionWithinLine) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nfunction growEditsToEntireWord(replacements: SingleTextEdit[], originalText: AbstractText): SingleTextEdit[] {\n\treturn _growEdits(replacements, originalText, (char) => /^[a-zA-Z]$/.test(char));\n}\n\nfunction growEditsUntilWhitespace(replacements: SingleTextEdit[], originalText: AbstractText): SingleTextEdit[] {\n\treturn _growEdits(replacements, originalText, (char) => !(/^\\s$/.test(char)));\n}\n\nfunction _growEdits(replacements: SingleTextEdit[], originalText: AbstractText, fn: (c: string) => boolean): SingleTextEdit[] {\n\tconst result: SingleTextEdit[] = [];\n\n\treplacements.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\n\tfor (const edit of replacements) {\n\t\tlet startIndex = edit.range.startColumn - 1;\n\t\tlet endIndex = edit.range.endColumn - 2;\n\t\tlet prefix = '';\n\t\tlet suffix = '';\n\t\tconst startLineContent = originalText.getLineAt(edit.range.startLineNumber);\n\t\tconst endLineContent = originalText.getLineAt(edit.range.endLineNumber);\n\n\t\tif (isIncluded(startLineContent[startIndex])) {\n\t\t\t// grow to the left\n\t\t\twhile (isIncluded(startLineContent[startIndex - 1])) {\n\t\t\t\tprefix = startLineContent[startIndex - 1] + prefix;\n\t\t\t\tstartIndex--;\n\t\t\t}\n\t\t}\n\n\t\tif (isIncluded(endLineContent[endIndex]) || endIndex < startIndex) {\n\t\t\t// grow to the right\n\t\t\twhile (isIncluded(endLineContent[endIndex + 1])) {\n\t\t\t\tsuffix += endLineContent[endIndex + 1];\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\n\t\t// create new edit and merge together if they are touching\n\t\tlet newEdit = new SingleTextEdit(new Range(edit.range.startLineNumber, startIndex + 1, edit.range.endLineNumber, endIndex + 2), prefix + edit.text + suffix);\n\t\tif (result.length > 0 && Range.areIntersectingOrTouching(result[result.length - 1].range, newEdit.range)) {\n\t\t\tnewEdit = SingleTextEdit.joinEdits([result.pop()!, newEdit], originalText);\n\t\t}\n\n\t\tresult.push(newEdit);\n\t}\n\n\tfunction isIncluded(c: string | undefined) {\n\t\tif (c === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn fn(c);\n\t}\n\n\treturn result;\n}\n"]}