import { IObservable } from '../../../../../../base/common/observable.js';
import { ICommandService } from '../../../../../../platform/commands/common/commands.js';
import { IContextKeyService } from '../../../../../../platform/contextkey/common/contextkey.js';
import { IKeybindingService } from '../../../../../../platform/keybinding/common/keybinding.js';
import { Command } from '../../../../../common/languages.js';
import { LiveElement } from './utils.js';
export declare class GutterIndicatorMenuContent {
    private readonly _menuTitle;
    private readonly _tabAction;
    private readonly _close;
    private readonly _extensionCommands;
    private readonly _contextKeyService;
    private readonly _keybindingService;
    private readonly _commandService;
    constructor(_menuTitle: IObservable<string>, _tabAction: IObservable<'jump' | 'accept' | 'inactive'>, _close: (focusEditor: boolean) => void, _extensionCommands: IObservable<readonly Command[] | undefined>, _contextKeyService: IContextKeyService, _keybindingService: IKeybindingService, _commandService: ICommandService);
    toDisposableLiveElement(): LiveElement;
    private _createHoverContent;
    private _getKeybinding;
}
