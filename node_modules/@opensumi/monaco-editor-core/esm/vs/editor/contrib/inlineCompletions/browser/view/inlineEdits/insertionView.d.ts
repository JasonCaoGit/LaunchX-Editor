import { Disposable } from '../../../../../../base/common/lifecycle.js';
import { IObservable } from '../../../../../../base/common/observable.js';
import { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';
import { ICodeEditor } from '../../../../../browser/editorBrowser.js';
import { LineRange } from '../../../../../common/core/lineRange.js';
import { ILanguageService } from '../../../../../common/languages/language.js';
import { GhostTextView } from '../ghostText/ghostTextView.js';
import { IInlineEditsView } from './sideBySideDiff.js';
export declare class InlineEditsInsertionView extends Disposable implements IInlineEditsView {
    private readonly _editor;
    private readonly _input;
    private readonly _instantiationService;
    private readonly _languageService;
    private readonly _editorObs;
    private readonly _state;
    private readonly _ghostText;
    protected readonly _ghostTextView: GhostTextView;
    constructor(_editor: ICodeEditor, _input: IObservable<{
        lineNumber: number;
        startColumn: number;
        text: string;
    } | undefined>, _instantiationService: IInstantiationService, _languageService: ILanguageService);
    private readonly _display;
    private readonly _editorMaxContentWidthInRange;
    private readonly _trimVertically;
    readonly startLineOffset: IObservable<number>;
    readonly originalLines: IObservable<LineRange | undefined>;
    private readonly _overlayLayout;
    private readonly _foregroundSvg;
    private readonly _nonOverflowView;
    readonly isHovered: IObservable<boolean>;
}
