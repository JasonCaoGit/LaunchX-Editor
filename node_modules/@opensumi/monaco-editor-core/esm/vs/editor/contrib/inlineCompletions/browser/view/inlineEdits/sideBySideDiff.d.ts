import { Disposable } from '../../../../../../base/common/lifecycle.js';
import { IObservable, IReader } from '../../../../../../base/common/observable.js';
import { ICommandService } from '../../../../../../platform/commands/common/commands.js';
import { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';
import { IThemeService } from '../../../../../../platform/theme/common/themeService.js';
import { ICodeEditor } from '../../../../../browser/editorBrowser.js';
import { EmbeddedCodeEditorWidget } from '../../../../../browser/widget/codeEditor/embeddedCodeEditorWidget.js';
import { LineRange } from '../../../../../common/core/lineRange.js';
import { ITextModel } from '../../../../../common/model.js';
import { CustomizedMenuWorkbenchToolBar } from '../../hintsWidget/inlineCompletionsHintsWidget.js';
import { InlineEditWithChanges } from './viewAndDiffProducer.js';
export declare const originalBackgroundColor: string;
export declare const modifiedBackgroundColor: string;
export declare const originalChangedLineBackgroundColor: string;
export declare const originalChangedTextOverlayColor: string;
export declare const modifiedChangedLineBackgroundColor: string;
export declare const modifiedChangedTextOverlayColor: string;
export declare const originalBorder: string;
export declare const modifiedBorder: string;
export interface IInlineEditsView {
    isHovered: IObservable<boolean>;
}
export declare class InlineEditsSideBySideDiff extends Disposable implements IInlineEditsView {
    private readonly _editor;
    private readonly _edit;
    private readonly _previewTextModel;
    private readonly _uiState;
    private readonly _instantiationService;
    private readonly _commandService;
    private readonly _themeService;
    static fitsInsideViewport(editor: ICodeEditor, edit: InlineEditWithChanges, reader: IReader): boolean;
    private readonly _editorObs;
    constructor(_editor: ICodeEditor, _edit: IObservable<InlineEditWithChanges | undefined>, _previewTextModel: ITextModel, _uiState: IObservable<{
        edit: InlineEditWithChanges;
        newTextLineCount: number;
        originalDisplayRange: LineRange;
    } | undefined>, _instantiationService: IInstantiationService, _commandService: ICommandService, _themeService: IThemeService);
    private readonly _display;
    private readonly previewRef;
    private readonly toolbarRef;
    private readonly _editorContainer;
    readonly isHovered: IObservable<boolean>;
    protected readonly _toolbar: CustomizedMenuWorkbenchToolBar;
    private readonly _extraCommands;
    protected readonly _updateToolbarAutorun: import("../../../../../../base/common/lifecycle.js").IDisposable;
    readonly previewEditor: EmbeddedCodeEditorWidget;
    private readonly _previewEditorObs;
    private _activeViewZones;
    private readonly _updatePreviewEditor;
    private readonly _previewEditorWidth;
    private readonly _cursorPosIfTouchesEdit;
    private readonly _originalStartPosition;
    private readonly _originalEndPosition;
    private readonly _originalVerticalStartPosition;
    private readonly _originalVerticalEndPosition;
    private readonly _originalDisplayRange;
    private readonly _editorMaxContentWidthInRange;
    /**
     * ![test](./layout.dio.svg)
    */
    private readonly _previewEditorLayoutInfo;
    private _stickyScrollController;
    private readonly _stickyScrollHeight;
    private readonly _shouldOverflow;
    private readonly _extendedModifiedPath;
    private readonly _originalBackgroundColor;
    private readonly _backgroundSvg;
    private readonly _modifiedBackgroundSvg;
    private readonly _foregroundBackgroundSvg;
    private readonly _middleBorderWithShadow;
    private readonly _foregroundSvg;
    private readonly _nonOverflowView;
    private readonly _overflowView;
}
