{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/model/changeRecorder.ts","vs/editor/contrib/inlineCompletions/browser/model/changeRecorder.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,yCAAyC,CAAC;AACrE,OAAO,EAAE,gBAAgB,EAAE,MAAM,0CAA0C,CAAC;AAC5E,OAAO,EAAE,qBAAqB,EAAE,MAAM,+DAA+D,CAAC;AAEtG,OAAO,EAAE,gBAAgB,EAAE,MAAM,2DAA2D,CAAC;AAC7F,OAAO,EAA6B,gBAAgB,EAAE,MAAM,8BAA8B,CAAC;AAEpF,IAAM,uBAAuB,GAA7B,MAAM,uBAAwB,SAAQ,UAAU;IAKtD,YACkB,OAAoB,EACd,qBAA6D;QAEpF,KAAK,EAAE,CAAC;QAHS,YAAO,GAAP,OAAO,CAAa;QACG,0BAAqB,GAArB,qBAAqB,CAAuB;QANpE,sBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,EAAkD,EACpK,gDAAgD,CAChD,CAAC,CAAC;QAOF,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACjD,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,gBAAgB,CAAC,EAAE,CAAC;gBAAC,OAAO;YAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAAC,OAAO;YAAC,CAAC;YAE/D,MAAM,OAAO,GAAa,EAAE,CAAC;YAE7B,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;gBACzD,IAAI,MAAM,EAAE,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACtB,CAAC;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE;gBAClD,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACnC,IAAI,CAAC,EAAE,EAAE,CAAC;oBAAC,OAAO;gBAAC,CAAC;gBACpB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;oBAC9B,MAAM,IAAI,GAAmD;wBAC5D,QAAQ,EAAE,2BAA2B;wBACrC,MAAM,EAAE,MAAM;wBACd,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;wBAChB,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE;wBAC3B,YAAY,EAAE,EAAE,CAAC,YAAY,EAAE;qBAC/B,CAAC;oBACF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClC,CAAC;gBACD,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,CAAC;QAEL,CAAC,CAAC,CAAC,CAAC;IACL,CAAC;CACD,CAAA;AAxCY,uBAAuB;IAOjC,WAAA,qBAAqB,CAAA;GAPX,uBAAuB,CAwCnC","file":"changeRecorder.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorunWithStore } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../browser/widget/codeEditor/codeEditorWidget.js';\nimport { IRecordableEditorLogEntry, StructuredLogger } from './inlineCompletionsSource.js';\n\nexport class TextModelChangeRecorder extends Disposable {\n\tprivate readonly _structuredLogger = this._register(this._instantiationService.createInstance(StructuredLogger.cast<IRecordableEditorLogEntry & { source: string }>(),\n\t\t'editor.inlineSuggest.logChangeReason.commandId'\n\t));\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tif (!(this._editor instanceof CodeEditorWidget)) { return; }\n\t\t\tif (!this._structuredLogger.isEnabled.read(reader)) { return; }\n\n\t\t\tconst sources: string[] = [];\n\n\t\t\tstore.add(this._editor.onBeforeExecuteEdit(({ source }) => {\n\t\t\t\tif (source) {\n\t\t\t\t\tsources.push(source);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tstore.add(this._editor.onDidChangeModelContent(e => {\n\t\t\t\tconst tm = this._editor.getModel();\n\t\t\t\tif (!tm) { return; }\n\t\t\t\tfor (const source of sources) {\n\t\t\t\t\tconst data: IRecordableEditorLogEntry & { source: string } = {\n\t\t\t\t\t\tsourceId: 'TextModel.setChangeReason',\n\t\t\t\t\t\tsource: source,\n\t\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\t\tmodelUri: tm.uri.toString(),\n\t\t\t\t\t\tmodelVersion: tm.getVersionId(),\n\t\t\t\t\t};\n\t\t\t\t\tthis._structuredLogger.log(data);\n\t\t\t\t}\n\t\t\t\tsources.length = 0;\n\t\t\t}));\n\n\t\t}));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorunWithStore } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../browser/widget/codeEditor/codeEditorWidget.js';\nimport { IRecordableEditorLogEntry, StructuredLogger } from './inlineCompletionsSource.js';\n\nexport class TextModelChangeRecorder extends Disposable {\n\tprivate readonly _structuredLogger = this._register(this._instantiationService.createInstance(StructuredLogger.cast<IRecordableEditorLogEntry & { source: string }>(),\n\t\t'editor.inlineSuggest.logChangeReason.commandId'\n\t));\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\tif (!(this._editor instanceof CodeEditorWidget)) { return; }\n\t\t\tif (!this._structuredLogger.isEnabled.read(reader)) { return; }\n\n\t\t\tconst sources: string[] = [];\n\n\t\t\tstore.add(this._editor.onBeforeExecuteEdit(({ source }) => {\n\t\t\t\tif (source) {\n\t\t\t\t\tsources.push(source);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tstore.add(this._editor.onDidChangeModelContent(e => {\n\t\t\t\tconst tm = this._editor.getModel();\n\t\t\t\tif (!tm) { return; }\n\t\t\t\tfor (const source of sources) {\n\t\t\t\t\tconst data: IRecordableEditorLogEntry & { source: string } = {\n\t\t\t\t\t\tsourceId: 'TextModel.setChangeReason',\n\t\t\t\t\t\tsource: source,\n\t\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\t\tmodelUri: tm.uri.toString(),\n\t\t\t\t\t\tmodelVersion: tm.getVersionId(),\n\t\t\t\t\t};\n\t\t\t\t\tthis._structuredLogger.log(data);\n\t\t\t\t}\n\t\t\t\tsources.length = 0;\n\t\t\t}));\n\n\t\t}));\n\t}\n}\n"]}