{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsModel.ts","vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsModel.ts"],"names":[],"mappings":"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","file":"inlineCompletionsModel.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFindFirst } from '../../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IObservableWithChange, IReader, ITransaction, autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { commonPrefixLength, firstNonWhitespaceIndex } from '../../../../../base/common/strings.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { CursorColumns } from '../../../../common/core/cursorColumns.js';\nimport { EditOperation } from '../../../../common/core/editOperation.js';\nimport { LineRange } from '../../../../common/core/lineRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../common/core/textLength.js';\nimport { ScrollType } from '../../../../common/editorCommon.js';\nimport { Command, InlineCompletion, InlineCompletionContext, InlineCompletionTriggerKind, PartialAcceptTriggerKind } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { IModelContentChangedEvent } from '../../../../common/textModelEvents.js';\nimport { SnippetController2 } from '../../../snippet/browser/snippetController2.js';\nimport { addPositions, getEndPositionsAfterApplying, substringPos, subtractPositions } from '../utils.js';\nimport { computeGhostText } from './computeGhostText.js';\nimport { GhostText, GhostTextOrReplacement, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionWithUpdatedRange, InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { InlineEdit } from './inlineEdit.js';\nimport { InlineCompletionItem } from './provideInlineCompletions.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\nimport { SuggestItemInfo } from './suggestWidgetAdapter.js';\n\nexport class InlineCompletionsModel extends Disposable {\n\tprivate readonly _source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this._textModelVersionId, this._debounceValue));\n\tprivate readonly _isActive = observableValue<boolean>(this, false);\n\tprivate readonly _onlyRequestInlineEditsSignal = observableSignal(this);\n\tprivate readonly _forceUpdateExplicitlySignal = observableSignal(this);\n\n\t// We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n\tprivate readonly _selectedInlineCompletionId = observableValue<string | undefined>(this, undefined);\n\tpublic readonly primaryPosition = derived(this, reader => this._positions.read(reader)[0] ?? new Position(1, 1));\n\n\tprivate _isAcceptingPartially = false;\n\tpublic get isAcceptingPartially() { return this._isAcceptingPartially; }\n\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tprivate readonly _suggestPreviewEnabled = this._editorObs.getOption(EditorOption.suggest).map(v => v.preview);\n\tprivate readonly _suggestPreviewMode = this._editorObs.getOption(EditorOption.suggest).map(v => v.previewMode);\n\tprivate readonly _inlineSuggestMode = this._editorObs.getOption(EditorOption.inlineSuggest).map(v => v.mode);\n\tprivate readonly _inlineEditsEnabled = this._editorObs.getOption(EditorOption.inlineSuggest).map(v => !!v.edits.enabled);\n\n\tconstructor(\n\t\tpublic readonly textModel: ITextModel,\n\t\tprivate readonly _selectedSuggestItem: IObservable<SuggestItemInfo | undefined>,\n\t\tpublic readonly _textModelVersionId: IObservableWithChange<number | null, IModelContentChangedEvent | undefined>,\n\t\tprivate readonly _positions: IObservable<readonly Position[]>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\tprivate readonly _enabled: IObservable<boolean>,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n\n\t\tlet lastItem: InlineCompletionWithUpdatedRange | undefined = undefined;\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description call handleItemDidShow */\n\t\t\tconst item = this.inlineCompletionState.read(reader);\n\t\t\tconst completion = item?.inlineCompletion;\n\t\t\tif (completion?.semanticId !== lastItem?.semanticId) {\n\t\t\t\tlastItem = completion;\n\t\t\t\tif (completion) {\n\t\t\t\t\tconst i = completion.inlineCompletion;\n\t\t\t\t\tconst src = i.source;\n\t\t\t\t\tsrc.provider.handleItemDidShow?.(src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description handle text edits collapsing */\n\t\t\tconst inlineCompletions = this._source.inlineCompletions.read(reader);\n\t\t\tif (!inlineCompletions) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const inlineCompletion of inlineCompletions.inlineCompletions) {\n\t\t\t\tconst singleEdit = inlineCompletion.toSingleTextEdit(reader);\n\t\t\t\tif (singleEdit.isEmpty) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._editorObs.versionId.read(reader);\n\t\t\tthis._inAcceptFlow.set(false, undefined);\n\t\t}));\n\n\n\t}\n\n\tpublic debugGetSelectedSuggestItem(): IObservable<SuggestItemInfo | undefined> {\n\t\treturn this._selectedSuggestItem;\n\t}\n\n\tpublic getIndentationInfo(reader: IReader) {\n\t\tlet startsWithIndentation = false;\n\t\tlet startsWithIndentationLessThanTabSize = true;\n\t\tconst ghostText = this?.primaryGhostText.read(reader);\n\t\tif (!!this?._selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\tconst firstLine = lines[0];\n\n\t\t\tconst indentationEndColumn = this.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\tif (inIndentation) {\n\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t}\n\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\tconst tabSize = this.textModel.getOptions().tabSize;\n\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tstartsWithIndentation,\n\t\t\tstartsWithIndentationLessThanTabSize,\n\t\t};\n\t}\n\n\tprivate readonly _preserveCurrentCompletionReasons = new Set([\n\t\tVersionIdChangeReason.Redo,\n\t\tVersionIdChangeReason.Undo,\n\t\tVersionIdChangeReason.AcceptWord,\n\t]);\n\n\tprivate _getReason(e: IModelContentChangedEvent | undefined): VersionIdChangeReason {\n\t\tif (e?.isUndoing) { return VersionIdChangeReason.Undo; }\n\t\tif (e?.isRedoing) { return VersionIdChangeReason.Redo; }\n\t\tif (this.isAcceptingPartially) { return VersionIdChangeReason.AcceptWord; }\n\t\treturn VersionIdChangeReason.Other;\n\t}\n\n\tpublic readonly dontRefetchSignal = observableSignal(this);\n\n\tprivate readonly _fetchInlineCompletionsPromise = derivedHandleChanges({\n\t\towner: this,\n\t\tcreateEmptyChangeSummary: () => ({\n\t\t\tdontRefetch: false,\n\t\t\tpreserveCurrentCompletion: false,\n\t\t\tinlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic,\n\t\t\tonlyRequestInlineEdits: false,\n\t\t}),\n\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t/** @description fetch inline completions */\n\t\t\tif (ctx.didChange(this._textModelVersionId) && this._preserveCurrentCompletionReasons.has(this._getReason(ctx.change))) {\n\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t} else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n\t\t\t\tchangeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n\t\t\t} else if (ctx.didChange(this.dontRefetchSignal)) {\n\t\t\t\tchangeSummary.dontRefetch = true;\n\t\t\t} else if (ctx.didChange(this._onlyRequestInlineEditsSignal)) {\n\t\t\t\tchangeSummary.onlyRequestInlineEdits = true;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t}, (reader, changeSummary) => {\n\t\tthis.dontRefetchSignal.read(reader);\n\t\tthis._onlyRequestInlineEditsSignal.read(reader);\n\t\tthis._forceUpdateExplicitlySignal.read(reader);\n\t\tconst shouldUpdate = (this._enabled.read(reader) && this._selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n\t\tif (!shouldUpdate) {\n\t\t\tthis._source.cancelUpdate();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._textModelVersionId.read(reader); // Refetch on text change\n\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (suggestWidgetInlineCompletions && !suggestItem) {\n\t\t\tconst inlineCompletions = this._source.inlineCompletions.get();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Seed inline completions with (newer) suggest widget inline completions */\n\t\t\t\tif (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n\t\t\t\t\tthis._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n\t\t\t\t}\n\t\t\t\tthis._source.clearSuggestWidgetInlineCompletions(tx);\n\t\t\t});\n\t\t}\n\n\t\tconst cursorPosition = this.primaryPosition.get();\n\t\tif (changeSummary.dontRefetch) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tconst context: InlineCompletionContext = {\n\t\t\ttriggerKind: changeSummary.inlineCompletionTriggerKind,\n\t\t\tselectedSuggestionInfo: suggestItem?.toSelectedSuggestionInfo(),\n\t\t\tincludeInlineCompletions: !changeSummary.onlyRequestInlineEdits,\n\t\t\tincludeInlineEdits: this._inlineEditsEnabled.read(reader),\n\t\t};\n\t\tconst itemToPreserveCandidate = this.selectedInlineCompletion.get() ?? this._inlineCompletionItems.get()?.inlineEdit;\n\t\tconst itemToPreserve = changeSummary.preserveCurrentCompletion || itemToPreserveCandidate?.forwardStable\n\t\t\t? itemToPreserveCandidate : undefined;\n\t\treturn this._source.fetch(cursorPosition, context, itemToPreserve);\n\t});\n\n\tpublic async trigger(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic async triggerExplicitly(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t\tthis._inAcceptFlow.set(true, tx);\n\t\t\tthis._forceUpdateExplicitlySignal.trigger(tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic stop(stopReason: 'explicitCancel' | 'automatic' = 'automatic', tx?: ITransaction): void {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (stopReason === 'explicitCancel') {\n\t\t\t\tconst inlineCompletion = this.state.get()?.inlineCompletion;\n\t\t\t\tconst source = inlineCompletion?.source;\n\t\t\t\tconst sourceInlineCompletion = inlineCompletion?.sourceInlineCompletion;\n\t\t\t\tif (sourceInlineCompletion && source?.provider.handleRejection) {\n\t\t\t\t\tsource.provider.handleRejection(source.inlineCompletions, sourceInlineCompletion);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isActive.set(false, tx);\n\t\t\tthis._source.clear(tx);\n\t\t});\n\t}\n\n\tprivate readonly _collapsedInlineEditId = observableValue<string | undefined>(this, undefined);\n\n\tpublic collapseInlineEdit(): void {\n\t\tconst currentInlineEdit = this.inlineEditState.get()?.inlineCompletion;\n\t\tif (!currentInlineEdit) { return; }\n\t\tthis._collapsedInlineEditId.set(currentInlineEdit.semanticId, undefined);\n\t}\n\n\tprivate readonly _inlineCompletionItems = derivedOpts({ owner: this }, reader => {\n\t\tconst c = this._source.inlineCompletions.read(reader);\n\t\tif (!c) { return undefined; }\n\t\tconst cursorPosition = this.primaryPosition.read(reader);\n\t\tlet inlineEdit: InlineCompletionWithUpdatedRange | undefined = undefined;\n\t\tconst visibleCompletions: InlineCompletionWithUpdatedRange[] = [];\n\t\tfor (const completion of c.inlineCompletions) {\n\t\t\tif (!completion.sourceInlineCompletion.isInlineEdit) {\n\t\t\t\tif (completion.isVisible(this.textModel, cursorPosition, reader)) {\n\t\t\t\t\tvisibleCompletions.push(completion);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinlineEdit = completion;\n\t\t\t}\n\t\t}\n\n\t\tif (visibleCompletions.length !== 0) {\n\t\t\t// Don't show the inline edit if there is a visible completion\n\t\t\tinlineEdit = undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tinlineCompletions: visibleCompletions,\n\t\t\tinlineEdit,\n\t\t};\n\t});\n\n\tprivate readonly _filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n\t\tconst c = this._inlineCompletionItems.read(reader);\n\t\treturn c?.inlineCompletions ?? [];\n\t});\n\n\tpublic readonly selectedInlineCompletionIndex = derived<number>(this, (reader) => {\n\t\tconst selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this._selectedInlineCompletionId === undefined ? -1\n\t\t\t: filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n\t\tif (idx === -1) {\n\t\t\t// Reset the selection so that the selection does not jump back when it appears again\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t\treturn 0;\n\t\t}\n\t\treturn idx;\n\t});\n\n\tpublic readonly selectedInlineCompletion = derived<InlineCompletionWithUpdatedRange | undefined>(this, (reader) => {\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this.selectedInlineCompletionIndex.read(reader);\n\t\treturn filteredCompletions[idx];\n\t});\n\n\tpublic readonly activeCommands = derivedOpts<Command[]>({ owner: this, equalsFn: itemsEquals() },\n\t\tr => this.selectedInlineCompletion.read(r)?.source.inlineCompletions.commands ?? []\n\t);\n\n\tpublic readonly lastTriggerKind: IObservable<InlineCompletionTriggerKind | undefined>\n\t\t= this._source.inlineCompletions.map(this, v => v?.request.context.triggerKind);\n\n\tpublic readonly inlineCompletionsCount = derived<number | undefined>(this, reader => {\n\t\tif (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n\t\t\treturn this._filteredInlineCompletionItems.read(reader).length;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tpublic readonly state = derivedOpts<{\n\t\tkind: 'ghostText';\n\t\tedits: readonly SingleTextEdit[];\n\t\tprimaryGhostText: GhostTextOrReplacement;\n\t\tghostTexts: readonly GhostTextOrReplacement[];\n\t\tsuggestItem: SuggestItemInfo | undefined;\n\t\tinlineCompletion: InlineCompletionWithUpdatedRange | undefined;\n\t} | {\n\t\tkind: 'inlineEdit';\n\t\tedits: readonly SingleTextEdit[];\n\t\tinlineEdit: InlineEdit;\n\t\tinlineCompletion: InlineCompletionWithUpdatedRange;\n\t\tcursorAtInlineEdit: boolean;\n\t} | undefined>({\n\t\towner: this,\n\t\tequalsFn: (a, b) => {\n\t\t\tif (!a || !b) { return a === b; }\n\n\t\t\tif (a.kind === 'ghostText' && b.kind === 'ghostText') {\n\t\t\t\treturn ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n\t\t\t\t\t&& a.inlineCompletion === b.inlineCompletion\n\t\t\t\t\t&& a.suggestItem === b.suggestItem;\n\t\t\t} else if (a.kind === 'inlineEdit' && b.kind === 'inlineEdit') {\n\t\t\t\treturn a.inlineEdit.equals(b.inlineEdit) && a.cursorAtInlineEdit === b.cursorAtInlineEdit;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}, (reader) => {\n\t\tconst model = this.textModel;\n\n\t\tconst item = this._inlineCompletionItems.read(reader);\n\t\tconst inlineEditResult = item?.inlineEdit;\n\t\tif (inlineEditResult) {\n\t\t\tlet edit = inlineEditResult.toSingleTextEdit(reader);\n\t\t\tedit = singleTextRemoveCommonPrefix(edit, model);\n\n\t\t\tconst cursorPos = this.primaryPosition.read(reader);\n\t\t\tconst cursorAtInlineEdit = LineRange.fromRangeInclusive(edit.range).addMargin(1, 1).contains(cursorPos.lineNumber);\n\t\t\tconst cursorInsideShowRange = cursorAtInlineEdit || (inlineEditResult.inlineCompletion.cursorShowRange?.containsPosition(cursorPos) ?? true);\n\n\t\t\tif (!cursorInsideShowRange && !this._inAcceptFlow.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst cursorDist = LineRange.fromRange(edit.range).distanceToLine(this.primaryPosition.read(reader).lineNumber);\n\t\t\tconst disableCollapsing = true;\n\t\t\tconst currentItemIsCollapsed = !disableCollapsing && (cursorDist > 1 && this._collapsedInlineEditId.read(reader) === inlineEditResult.semanticId);\n\n\t\t\tconst commands = inlineEditResult.inlineCompletion.source.inlineCompletions.commands;\n\t\t\tconst renderExplicitly = this._jumpedTo.read(reader);\n\t\t\tconst inlineEdit = new InlineEdit(edit, currentItemIsCollapsed, renderExplicitly, commands ?? [], inlineEditResult.inlineCompletion);\n\n\t\t\treturn { kind: 'inlineEdit', inlineEdit, inlineCompletion: inlineEditResult, edits: [edit], cursorAtInlineEdit };\n\t\t}\n\n\t\tthis._jumpedTo.set(false, undefined);\n\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (suggestItem) {\n\t\t\tconst suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n\t\t\tconst augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n\n\t\t\tconst isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n\t\t\tif (!isSuggestionPreviewEnabled && !augmentation) { return undefined; }\n\n\t\t\tconst fullEdit = augmentation?.edit ?? suggestCompletionEdit;\n\t\t\tconst fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n\n\t\t\tconst mode = this._suggestPreviewMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength))\n\t\t\t\t.filter(isDefined);\n\t\t\tconst primaryGhostText = ghostTexts[0] ?? new GhostText(fullEdit.range.endLineNumber, []);\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation?.completion, suggestItem };\n\t\t} else {\n\t\t\tif (!this._isActive.read(reader)) { return undefined; }\n\t\t\tconst inlineCompletion = this.selectedInlineCompletion.read(reader);\n\t\t\tif (!inlineCompletion) { return undefined; }\n\n\t\t\tconst replacement = inlineCompletion.toSingleTextEdit(reader);\n\t\t\tconst mode = this._inlineSuggestMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0))\n\t\t\t\t.filter(isDefined);\n\t\t\tif (!ghostTexts[0]) { return undefined; }\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n\t\t}\n\t});\n\n\tpublic readonly status = derived(this, reader => {\n\t\tif (this._source.loading.read(reader)) { return 'loading'; }\n\t\tconst s = this.state.read(reader);\n\t\tif (s?.kind === 'ghostText') { return 'ghostText'; }\n\t\tif (s?.kind === 'inlineEdit') { return 'inlineEdit'; }\n\t\treturn 'noSuggestion';\n\t});\n\n\tpublic readonly inlineCompletionState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'ghostText') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._editorObs.inComposition.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'inlineEdit') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditAvailable = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\treturn !!s;\n\t});\n\n\tprivate _computeAugmentation(suggestCompletion: SingleTextEdit, reader: IReader | undefined) {\n\t\tconst model = this.textModel;\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n\t\tconst candidateInlineCompletions = suggestWidgetInlineCompletions\n\t\t\t? suggestWidgetInlineCompletions.inlineCompletions\n\t\t\t: [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n\n\t\tconst augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n\t\t\tlet r = completion.toSingleTextEdit(reader);\n\t\t\tr = singleTextRemoveCommonPrefix(\n\t\t\t\tr,\n\t\t\t\tmodel,\n\t\t\t\tRange.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition())\n\t\t\t);\n\t\t\treturn singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n\t\t});\n\n\t\treturn augmentedCompletion;\n\t}\n\n\tpublic readonly ghostTexts = derivedOpts({ owner: this, equalsFn: ghostTextsOrReplacementsEqual }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v.ghostTexts;\n\t});\n\n\tpublic readonly primaryGhostText = derivedOpts({ owner: this, equalsFn: ghostTextOrReplacementEquals }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v?.primaryGhostText;\n\t});\n\n\tprivate readonly _tabShouldIndent = derived(this, reader => {\n\t\tif (this._inAcceptFlow.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction isMultiLine(range: Range): boolean {\n\t\t\treturn range.startLineNumber !== range.endLineNumber;\n\t\t}\n\n\t\tfunction getNonIndentationRange(model: ITextModel, lineNumber: number): Range {\n\t\t\tconst columnStart = model.getLineIndentColumn(lineNumber);\n\t\t\tconst lastNonWsColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\t\tconst columnEnd = Math.max(lastNonWsColumn, columnStart);\n\t\t\treturn new Range(lineNumber, columnStart, lineNumber, columnEnd);\n\t\t}\n\n\t\tconst selections = this._editorObs.selections.read(reader);\n\t\treturn selections?.some(s => {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\treturn this.textModel.getLineLength(s.startLineNumber) === 0;\n\t\t\t} else {\n\t\t\t\treturn isMultiLine(s) || s.containsRange(getNonIndentationRange(this.textModel, s.startLineNumber));\n\t\t\t}\n\t\t});\n\t});\n\n\tpublic readonly tabShouldJumpToInlineEdit = derived(this, reader => {\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !s.cursorAtInlineEdit;\n\t});\n\n\tpublic readonly tabShouldAcceptInlineEdit = derived(this, reader => {\n\t\tif (this._jumpedTo.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\treturn s.cursorAtInlineEdit;\n\t});\n\n\tprivate async _deltaSelectedInlineCompletionIndex(delta: 1 | -1): Promise<void> {\n\t\tawait this.triggerExplicitly();\n\n\t\tconst completions = this._filteredInlineCompletionItems.get() || [];\n\t\tif (completions.length > 0) {\n\t\t\tconst newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n\t\t\tthis._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n\t\t} else {\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t}\n\t}\n\n\tpublic async next(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(1); }\n\n\tpublic async previous(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(-1); }\n\n\tpublic async accept(editor: ICodeEditor = this._editor): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tlet completion: InlineCompletionItem;\n\n\t\tconst state = this.state.get();\n\t\tif (state?.kind === 'ghostText') {\n\t\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcompletion = state.inlineCompletion.toInlineCompletion(undefined);\n\t\t} else if (state?.kind === 'inlineEdit') {\n\t\t\tcompletion = state.inlineCompletion.toInlineCompletion(undefined);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (completion.command) {\n\t\t\t// Make sure the completion list will not be disposed.\n\t\t\tcompletion.source.addRef();\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\tif (completion.snippetInfo) {\n\t\t\teditor.executeEdits(\n\t\t\t\t'inlineSuggestion.accept',\n\t\t\t\t[\n\t\t\t\t\tEditOperation.replace(completion.range, ''),\n\t\t\t\t\t...completion.additionalTextEdits\n\t\t\t\t]\n\t\t\t);\n\t\t\teditor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n\t\t\tSnippetController2.get(editor)?.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n\t\t} else {\n\t\t\tconst edits = state.edits;\n\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\teditor.executeEdits('inlineSuggestion.accept', [\n\t\t\t\t...edits.map(edit => EditOperation.replace(edit.range, edit.text)),\n\t\t\t\t...completion.additionalTextEdits\n\t\t\t]);\n\t\t\teditor.setSelections(selections, 'inlineCompletionAccept');\n\t\t}\n\n\t\t// Reset before invoking the command, as the command might cause a follow up trigger (which we don't want to reset).\n\t\tthis.stop();\n\n\t\tif (completion.command) {\n\t\t\tawait this._commandService\n\t\t\t\t.executeCommand(completion.command.id, ...(completion.command.arguments || []))\n\t\t\t\t.then(undefined, onUnexpectedExternalError);\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\n\t\tthis._inAcceptFlow.set(true, undefined);\n\t}\n\n\tpublic async acceptNextWord(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n\t\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId);\n\t\t\tconst wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n\n\t\t\tconst m1 = text.match(wordRegExp);\n\t\t\tlet acceptUntilIndexExclusive = 0;\n\t\t\tif (m1 && m1.index !== undefined) {\n\t\t\t\tif (m1.index === 0) {\n\t\t\t\t\tacceptUntilIndexExclusive = m1[0].length;\n\t\t\t\t} else {\n\t\t\t\t\tacceptUntilIndexExclusive = m1.index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tacceptUntilIndexExclusive = text.length;\n\t\t\t}\n\n\t\t\tconst wsRegExp = /\\s+/g;\n\t\t\tconst m2 = wsRegExp.exec(text);\n\t\t\tif (m2 && m2.index !== undefined) {\n\t\t\t\tif (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n\t\t\t\t\tacceptUntilIndexExclusive = m2.index + m2[0].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acceptUntilIndexExclusive;\n\t\t}, PartialAcceptTriggerKind.Word);\n\t}\n\n\tpublic async acceptNextLine(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst m = text.match(/\\n/);\n\t\t\tif (m && m.index !== undefined) {\n\t\t\t\treturn m.index + 1;\n\t\t\t}\n\t\t\treturn text.length;\n\t\t}, PartialAcceptTriggerKind.Line);\n\t}\n\n\tprivate async _acceptNext(editor: ICodeEditor, getAcceptUntilIndex: (position: Position, text: string) => number, kind: PartialAcceptTriggerKind): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.inlineCompletionState.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst ghostText = state.primaryGhostText;\n\t\tconst completion = state.inlineCompletion.toInlineCompletion(undefined);\n\n\t\tif (completion.snippetInfo || completion.filterText !== completion.insertText) {\n\t\t\t// not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n\t\t\tawait this.accept(editor);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstPart = ghostText.parts[0];\n\t\tconst ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n\t\tconst ghostTextVal = firstPart.text;\n\t\tconst acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n\t\tif (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n\t\t\tthis.accept(editor);\n\t\t\treturn;\n\t\t}\n\t\tconst partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n\n\t\tconst positions = this._positions.get();\n\t\tconst cursorPosition = positions[0];\n\n\t\t// Executing the edit might free the completion, so we have to hold a reference on it.\n\t\tcompletion.source.addRef();\n\t\ttry {\n\t\t\tthis._isAcceptingPartially = true;\n\t\t\ttry {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\tconst replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n\t\t\t\tconst newText = editor.getModel()!.getValueInRange(replaceRange) + partialGhostTextVal;\n\t\t\t\tconst primaryEdit = new SingleTextEdit(replaceRange, newText);\n\t\t\t\tconst edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n\t\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\t\teditor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n\t\t\t\teditor.setSelections(selections, 'inlineCompletionPartialAccept');\n\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(editor.getPosition()!, ScrollType.Immediate);\n\t\t\t} finally {\n\t\t\t\tthis._isAcceptingPartially = false;\n\t\t\t}\n\n\t\t\tif (completion.source.provider.handlePartialAccept) {\n\t\t\t\tconst acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n\t\t\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\t\t\tconst text = editor.getModel()!.getValueInRange(acceptedRange, EndOfLinePreference.LF);\n\t\t\t\tcompletion.source.provider.handlePartialAccept(\n\t\t\t\t\tcompletion.source.inlineCompletions,\n\t\t\t\t\tcompletion.sourceInlineCompletion,\n\t\t\t\t\ttext.length,\n\t\t\t\t\t{ kind, }\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\t}\n\n\tpublic handleSuggestAccepted(item: SuggestItemInfo) {\n\t\tconst itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n\t\tconst augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n\t\tif (!augmentedCompletion) { return; }\n\n\t\tconst source = augmentedCompletion.completion.source;\n\t\tconst sourceInlineCompletion = augmentedCompletion.completion.sourceInlineCompletion;\n\t\tsource.provider.handlePartialAccept?.(\n\t\t\tsource.inlineCompletions,\n\t\t\tsourceInlineCompletion,\n\t\t\titemEdit.text.length,\n\t\t\t{\n\t\t\t\tkind: PartialAcceptTriggerKind.Suggest,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic extractReproSample(): Repro {\n\t\tconst value = this.textModel.getValue();\n\t\tconst item = this.state.get()?.inlineCompletion?.toInlineCompletion(undefined);\n\t\treturn {\n\t\t\tdocumentValue: value,\n\t\t\tinlineCompletion: item?.sourceInlineCompletion,\n\t\t};\n\t}\n\n\tprivate _jumpedTo = observableValue(this, false);\n\tprivate _inAcceptFlow = observableValue(this, false);\n\n\tpublic jump(): void {\n\t\tconst s = this.inlineEditState.get();\n\t\tif (!s) { return; }\n\n\t\ttransaction(tx => {\n\t\t\tthis._jumpedTo.set(true, tx);\n\t\t\tthis.dontRefetchSignal.trigger(tx);\n\t\t\tconst edit = s.inlineCompletion.toSingleTextEdit(undefined);\n\t\t\tthis._editor.setPosition(edit.range.getStartPosition(), 'inlineCompletions.jump');\n\n\t\t\t// TODO: consider using view information to reveal it\n\t\t\tconst isSingleLineChange = edit.range.startLineNumber === edit.range.endLineNumber && !edit.text.includes('\\n');\n\t\t\tif (isSingleLineChange) {\n\t\t\t\tthis._editor.revealPosition(edit.range.getStartPosition());\n\t\t\t} else {\n\t\t\t\tconst revealRange = new Range(edit.range.startLineNumber - 1, 1, edit.range.endLineNumber + 1, 1);\n\t\t\t\tthis._editor.revealRange(revealRange, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tthis._editor.focus();\n\t\t});\n\t}\n\n\tpublic async handleInlineCompletionShown(inlineCompletion: InlineCompletionItem): Promise<void> {\n\t\tif (!inlineCompletion.shownCommand) {\n\t\t\treturn;\n\t\t}\n\t\tif (inlineCompletion.didShow) {\n\t\t\treturn;\n\t\t}\n\t\tinlineCompletion.markAsShown();\n\t\tawait this._commandService.executeCommand(inlineCompletion.shownCommand.id, ...(inlineCompletion.shownCommand.arguments || []));\n\t}\n}\n\ninterface Repro {\n\tdocumentValue: string;\n\tinlineCompletion: InlineCompletion | undefined;\n}\n\nexport enum VersionIdChangeReason {\n\tUndo,\n\tRedo,\n\tAcceptWord,\n\tOther,\n}\n\nexport function getSecondaryEdits(textModel: ITextModel, positions: readonly Position[], primaryEdit: SingleTextEdit): SingleTextEdit[] {\n\tif (positions.length === 1) {\n\t\t// No secondary cursor positions\n\t\treturn [];\n\t}\n\tconst primaryPosition = positions[0];\n\tconst secondaryPositions = positions.slice(1);\n\tconst primaryEditStartPosition = primaryEdit.range.getStartPosition();\n\tconst primaryEditEndPosition = primaryEdit.range.getEndPosition();\n\tconst replacedTextAfterPrimaryCursor = textModel.getValueInRange(\n\t\tRange.fromPositions(primaryPosition, primaryEditEndPosition)\n\t);\n\tconst positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n\tif (positionWithinTextEdit.lineNumber < 1) {\n\t\tonUnexpectedError(new BugIndicatingError(\n\t\t\t`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`\n\t\t));\n\t\treturn [];\n\t}\n\tconst secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n\treturn secondaryPositions.map(pos => {\n\t\tconst posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n\t\tconst textAfterSecondaryCursor = textModel.getValueInRange(\n\t\t\tRange.fromPositions(pos, posEnd)\n\t\t);\n\t\tconst l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n\t\tconst range = Range.fromPositions(pos, pos.delta(0, l));\n\t\treturn new SingleTextEdit(range, secondaryEditText);\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFindFirst } from '../../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedError, onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IObservableWithChange, IReader, ITransaction, autorun, derived, derivedHandleChanges, derivedOpts, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { commonPrefixLength, firstNonWhitespaceIndex } from '../../../../../base/common/strings.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { CursorColumns } from '../../../../common/core/cursorColumns.js';\nimport { EditOperation } from '../../../../common/core/editOperation.js';\nimport { LineRange } from '../../../../common/core/lineRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { SingleTextEdit } from '../../../../common/core/textEdit.js';\nimport { TextLength } from '../../../../common/core/textLength.js';\nimport { ScrollType } from '../../../../common/editorCommon.js';\nimport { Command, InlineCompletion, InlineCompletionContext, InlineCompletionTriggerKind, PartialAcceptTriggerKind } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { IModelContentChangedEvent } from '../../../../common/textModelEvents.js';\nimport { SnippetController2 } from '../../../snippet/browser/snippetController2.js';\nimport { addPositions, getEndPositionsAfterApplying, substringPos, subtractPositions } from '../utils.js';\nimport { computeGhostText } from './computeGhostText.js';\nimport { GhostText, GhostTextOrReplacement, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionWithUpdatedRange, InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { InlineEdit } from './inlineEdit.js';\nimport { InlineCompletionItem } from './provideInlineCompletions.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\nimport { SuggestItemInfo } from './suggestWidgetAdapter.js';\n\nexport class InlineCompletionsModel extends Disposable {\n\tprivate readonly _source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this._textModelVersionId, this._debounceValue));\n\tprivate readonly _isActive = observableValue<boolean>(this, false);\n\tprivate readonly _onlyRequestInlineEditsSignal = observableSignal(this);\n\tprivate readonly _forceUpdateExplicitlySignal = observableSignal(this);\n\n\t// We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n\tprivate readonly _selectedInlineCompletionId = observableValue<string | undefined>(this, undefined);\n\tpublic readonly primaryPosition = derived(this, reader => this._positions.read(reader)[0] ?? new Position(1, 1));\n\n\tprivate _isAcceptingPartially = false;\n\tpublic get isAcceptingPartially() { return this._isAcceptingPartially; }\n\n\tprivate readonly _editorObs = observableCodeEditor(this._editor);\n\n\tprivate readonly _suggestPreviewEnabled = this._editorObs.getOption(EditorOption.suggest).map(v => v.preview);\n\tprivate readonly _suggestPreviewMode = this._editorObs.getOption(EditorOption.suggest).map(v => v.previewMode);\n\tprivate readonly _inlineSuggestMode = this._editorObs.getOption(EditorOption.inlineSuggest).map(v => v.mode);\n\tprivate readonly _inlineEditsEnabled = this._editorObs.getOption(EditorOption.inlineSuggest).map(v => !!v.edits.enabled);\n\n\tconstructor(\n\t\tpublic readonly textModel: ITextModel,\n\t\tprivate readonly _selectedSuggestItem: IObservable<SuggestItemInfo | undefined>,\n\t\tpublic readonly _textModelVersionId: IObservableWithChange<number | null, IModelContentChangedEvent | undefined>,\n\t\tprivate readonly _positions: IObservable<readonly Position[]>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\tprivate readonly _enabled: IObservable<boolean>,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n\n\t\tlet lastItem: InlineCompletionWithUpdatedRange | undefined = undefined;\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description call handleItemDidShow */\n\t\t\tconst item = this.inlineCompletionState.read(reader);\n\t\t\tconst completion = item?.inlineCompletion;\n\t\t\tif (completion?.semanticId !== lastItem?.semanticId) {\n\t\t\t\tlastItem = completion;\n\t\t\t\tif (completion) {\n\t\t\t\t\tconst i = completion.inlineCompletion;\n\t\t\t\t\tconst src = i.source;\n\t\t\t\t\tsrc.provider.handleItemDidShow?.(src.inlineCompletions, i.sourceInlineCompletion, i.insertText);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description handle text edits collapsing */\n\t\t\tconst inlineCompletions = this._source.inlineCompletions.read(reader);\n\t\t\tif (!inlineCompletions) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const inlineCompletion of inlineCompletions.inlineCompletions) {\n\t\t\t\tconst singleEdit = inlineCompletion.toSingleTextEdit(reader);\n\t\t\t\tif (singleEdit.isEmpty) {\n\t\t\t\t\tthis.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._editorObs.versionId.read(reader);\n\t\t\tthis._inAcceptFlow.set(false, undefined);\n\t\t}));\n\n\n\t}\n\n\tpublic debugGetSelectedSuggestItem(): IObservable<SuggestItemInfo | undefined> {\n\t\treturn this._selectedSuggestItem;\n\t}\n\n\tpublic getIndentationInfo(reader: IReader) {\n\t\tlet startsWithIndentation = false;\n\t\tlet startsWithIndentationLessThanTabSize = true;\n\t\tconst ghostText = this?.primaryGhostText.read(reader);\n\t\tif (!!this?._selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\tconst firstLine = lines[0];\n\n\t\t\tconst indentationEndColumn = this.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\tif (inIndentation) {\n\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t}\n\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\tconst tabSize = this.textModel.getOptions().tabSize;\n\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tstartsWithIndentation,\n\t\t\tstartsWithIndentationLessThanTabSize,\n\t\t};\n\t}\n\n\tprivate readonly _preserveCurrentCompletionReasons = new Set([\n\t\tVersionIdChangeReason.Redo,\n\t\tVersionIdChangeReason.Undo,\n\t\tVersionIdChangeReason.AcceptWord,\n\t]);\n\n\tprivate _getReason(e: IModelContentChangedEvent | undefined): VersionIdChangeReason {\n\t\tif (e?.isUndoing) { return VersionIdChangeReason.Undo; }\n\t\tif (e?.isRedoing) { return VersionIdChangeReason.Redo; }\n\t\tif (this.isAcceptingPartially) { return VersionIdChangeReason.AcceptWord; }\n\t\treturn VersionIdChangeReason.Other;\n\t}\n\n\tpublic readonly dontRefetchSignal = observableSignal(this);\n\n\tprivate readonly _fetchInlineCompletionsPromise = derivedHandleChanges({\n\t\towner: this,\n\t\tcreateEmptyChangeSummary: () => ({\n\t\t\tdontRefetch: false,\n\t\t\tpreserveCurrentCompletion: false,\n\t\t\tinlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic,\n\t\t\tonlyRequestInlineEdits: false,\n\t\t}),\n\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t/** @description fetch inline completions */\n\t\t\tif (ctx.didChange(this._textModelVersionId) && this._preserveCurrentCompletionReasons.has(this._getReason(ctx.change))) {\n\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t} else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n\t\t\t\tchangeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n\t\t\t} else if (ctx.didChange(this.dontRefetchSignal)) {\n\t\t\t\tchangeSummary.dontRefetch = true;\n\t\t\t} else if (ctx.didChange(this._onlyRequestInlineEditsSignal)) {\n\t\t\t\tchangeSummary.onlyRequestInlineEdits = true;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\t}, (reader, changeSummary) => {\n\t\tthis.dontRefetchSignal.read(reader);\n\t\tthis._onlyRequestInlineEditsSignal.read(reader);\n\t\tthis._forceUpdateExplicitlySignal.read(reader);\n\t\tconst shouldUpdate = (this._enabled.read(reader) && this._selectedSuggestItem.read(reader)) || this._isActive.read(reader);\n\t\tif (!shouldUpdate) {\n\t\t\tthis._source.cancelUpdate();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._textModelVersionId.read(reader); // Refetch on text change\n\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (suggestWidgetInlineCompletions && !suggestItem) {\n\t\t\tconst inlineCompletions = this._source.inlineCompletions.get();\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Seed inline completions with (newer) suggest widget inline completions */\n\t\t\t\tif (!inlineCompletions || suggestWidgetInlineCompletions.request.versionId > inlineCompletions.request.versionId) {\n\t\t\t\t\tthis._source.inlineCompletions.set(suggestWidgetInlineCompletions.clone(), tx);\n\t\t\t\t}\n\t\t\t\tthis._source.clearSuggestWidgetInlineCompletions(tx);\n\t\t\t});\n\t\t}\n\n\t\tconst cursorPosition = this.primaryPosition.get();\n\t\tif (changeSummary.dontRefetch) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tconst context: InlineCompletionContext = {\n\t\t\ttriggerKind: changeSummary.inlineCompletionTriggerKind,\n\t\t\tselectedSuggestionInfo: suggestItem?.toSelectedSuggestionInfo(),\n\t\t\tincludeInlineCompletions: !changeSummary.onlyRequestInlineEdits,\n\t\t\tincludeInlineEdits: this._inlineEditsEnabled.read(reader),\n\t\t};\n\t\tconst itemToPreserveCandidate = this.selectedInlineCompletion.get() ?? this._inlineCompletionItems.get()?.inlineEdit;\n\t\tconst itemToPreserve = changeSummary.preserveCurrentCompletion || itemToPreserveCandidate?.forwardStable\n\t\t\t? itemToPreserveCandidate : undefined;\n\t\treturn this._source.fetch(cursorPosition, context, itemToPreserve);\n\t});\n\n\tpublic async trigger(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic async triggerExplicitly(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t\tthis._inAcceptFlow.set(true, tx);\n\t\t\tthis._forceUpdateExplicitlySignal.trigger(tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic stop(stopReason: 'explicitCancel' | 'automatic' = 'automatic', tx?: ITransaction): void {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (stopReason === 'explicitCancel') {\n\t\t\t\tconst inlineCompletion = this.state.get()?.inlineCompletion;\n\t\t\t\tconst source = inlineCompletion?.source;\n\t\t\t\tconst sourceInlineCompletion = inlineCompletion?.sourceInlineCompletion;\n\t\t\t\tif (sourceInlineCompletion && source?.provider.handleRejection) {\n\t\t\t\t\tsource.provider.handleRejection(source.inlineCompletions, sourceInlineCompletion);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isActive.set(false, tx);\n\t\t\tthis._source.clear(tx);\n\t\t});\n\t}\n\n\tprivate readonly _collapsedInlineEditId = observableValue<string | undefined>(this, undefined);\n\n\tpublic collapseInlineEdit(): void {\n\t\tconst currentInlineEdit = this.inlineEditState.get()?.inlineCompletion;\n\t\tif (!currentInlineEdit) { return; }\n\t\tthis._collapsedInlineEditId.set(currentInlineEdit.semanticId, undefined);\n\t}\n\n\tprivate readonly _inlineCompletionItems = derivedOpts({ owner: this }, reader => {\n\t\tconst c = this._source.inlineCompletions.read(reader);\n\t\tif (!c) { return undefined; }\n\t\tconst cursorPosition = this.primaryPosition.read(reader);\n\t\tlet inlineEdit: InlineCompletionWithUpdatedRange | undefined = undefined;\n\t\tconst visibleCompletions: InlineCompletionWithUpdatedRange[] = [];\n\t\tfor (const completion of c.inlineCompletions) {\n\t\t\tif (!completion.sourceInlineCompletion.isInlineEdit) {\n\t\t\t\tif (completion.isVisible(this.textModel, cursorPosition, reader)) {\n\t\t\t\t\tvisibleCompletions.push(completion);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinlineEdit = completion;\n\t\t\t}\n\t\t}\n\n\t\tif (visibleCompletions.length !== 0) {\n\t\t\t// Don't show the inline edit if there is a visible completion\n\t\t\tinlineEdit = undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tinlineCompletions: visibleCompletions,\n\t\t\tinlineEdit,\n\t\t};\n\t});\n\n\tprivate readonly _filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n\t\tconst c = this._inlineCompletionItems.read(reader);\n\t\treturn c?.inlineCompletions ?? [];\n\t});\n\n\tpublic readonly selectedInlineCompletionIndex = derived<number>(this, (reader) => {\n\t\tconst selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this._selectedInlineCompletionId === undefined ? -1\n\t\t\t: filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n\t\tif (idx === -1) {\n\t\t\t// Reset the selection so that the selection does not jump back when it appears again\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t\treturn 0;\n\t\t}\n\t\treturn idx;\n\t});\n\n\tpublic readonly selectedInlineCompletion = derived<InlineCompletionWithUpdatedRange | undefined>(this, (reader) => {\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this.selectedInlineCompletionIndex.read(reader);\n\t\treturn filteredCompletions[idx];\n\t});\n\n\tpublic readonly activeCommands = derivedOpts<Command[]>({ owner: this, equalsFn: itemsEquals() },\n\t\tr => this.selectedInlineCompletion.read(r)?.source.inlineCompletions.commands ?? []\n\t);\n\n\tpublic readonly lastTriggerKind: IObservable<InlineCompletionTriggerKind | undefined>\n\t\t= this._source.inlineCompletions.map(this, v => v?.request.context.triggerKind);\n\n\tpublic readonly inlineCompletionsCount = derived<number | undefined>(this, reader => {\n\t\tif (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n\t\t\treturn this._filteredInlineCompletionItems.read(reader).length;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tpublic readonly state = derivedOpts<{\n\t\tkind: 'ghostText';\n\t\tedits: readonly SingleTextEdit[];\n\t\tprimaryGhostText: GhostTextOrReplacement;\n\t\tghostTexts: readonly GhostTextOrReplacement[];\n\t\tsuggestItem: SuggestItemInfo | undefined;\n\t\tinlineCompletion: InlineCompletionWithUpdatedRange | undefined;\n\t} | {\n\t\tkind: 'inlineEdit';\n\t\tedits: readonly SingleTextEdit[];\n\t\tinlineEdit: InlineEdit;\n\t\tinlineCompletion: InlineCompletionWithUpdatedRange;\n\t\tcursorAtInlineEdit: boolean;\n\t} | undefined>({\n\t\towner: this,\n\t\tequalsFn: (a, b) => {\n\t\t\tif (!a || !b) { return a === b; }\n\n\t\t\tif (a.kind === 'ghostText' && b.kind === 'ghostText') {\n\t\t\t\treturn ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n\t\t\t\t\t&& a.inlineCompletion === b.inlineCompletion\n\t\t\t\t\t&& a.suggestItem === b.suggestItem;\n\t\t\t} else if (a.kind === 'inlineEdit' && b.kind === 'inlineEdit') {\n\t\t\t\treturn a.inlineEdit.equals(b.inlineEdit) && a.cursorAtInlineEdit === b.cursorAtInlineEdit;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}, (reader) => {\n\t\tconst model = this.textModel;\n\n\t\tconst item = this._inlineCompletionItems.read(reader);\n\t\tconst inlineEditResult = item?.inlineEdit;\n\t\tif (inlineEditResult) {\n\t\t\tlet edit = inlineEditResult.toSingleTextEdit(reader);\n\t\t\tedit = singleTextRemoveCommonPrefix(edit, model);\n\n\t\t\tconst cursorPos = this.primaryPosition.read(reader);\n\t\t\tconst cursorAtInlineEdit = LineRange.fromRangeInclusive(edit.range).addMargin(1, 1).contains(cursorPos.lineNumber);\n\t\t\tconst cursorInsideShowRange = cursorAtInlineEdit || (inlineEditResult.inlineCompletion.cursorShowRange?.containsPosition(cursorPos) ?? true);\n\n\t\t\tif (!cursorInsideShowRange && !this._inAcceptFlow.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst cursorDist = LineRange.fromRange(edit.range).distanceToLine(this.primaryPosition.read(reader).lineNumber);\n\t\t\tconst disableCollapsing = true;\n\t\t\tconst currentItemIsCollapsed = !disableCollapsing && (cursorDist > 1 && this._collapsedInlineEditId.read(reader) === inlineEditResult.semanticId);\n\n\t\t\tconst commands = inlineEditResult.inlineCompletion.source.inlineCompletions.commands;\n\t\t\tconst renderExplicitly = this._jumpedTo.read(reader);\n\t\t\tconst inlineEdit = new InlineEdit(edit, currentItemIsCollapsed, renderExplicitly, commands ?? [], inlineEditResult.inlineCompletion);\n\n\t\t\treturn { kind: 'inlineEdit', inlineEdit, inlineCompletion: inlineEditResult, edits: [edit], cursorAtInlineEdit };\n\t\t}\n\n\t\tthis._jumpedTo.set(false, undefined);\n\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (suggestItem) {\n\t\t\tconst suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.toSingleTextEdit(), model);\n\t\t\tconst augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n\n\t\t\tconst isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n\t\t\tif (!isSuggestionPreviewEnabled && !augmentation) { return undefined; }\n\n\t\t\tconst fullEdit = augmentation?.edit ?? suggestCompletionEdit;\n\t\t\tconst fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n\n\t\t\tconst mode = this._suggestPreviewMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength))\n\t\t\t\t.filter(isDefined);\n\t\t\tconst primaryGhostText = ghostTexts[0] ?? new GhostText(fullEdit.range.endLineNumber, []);\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation?.completion, suggestItem };\n\t\t} else {\n\t\t\tif (!this._isActive.read(reader)) { return undefined; }\n\t\t\tconst inlineCompletion = this.selectedInlineCompletion.read(reader);\n\t\t\tif (!inlineCompletion) { return undefined; }\n\n\t\t\tconst replacement = inlineCompletion.toSingleTextEdit(reader);\n\t\t\tconst mode = this._inlineSuggestMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst edits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n\t\t\tconst ghostTexts = edits\n\t\t\t\t.map((edit, idx) => computeGhostText(edit, model, mode, positions[idx], 0))\n\t\t\t\t.filter(isDefined);\n\t\t\tif (!ghostTexts[0]) { return undefined; }\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n\t\t}\n\t});\n\n\tpublic readonly status = derived(this, reader => {\n\t\tif (this._source.loading.read(reader)) { return 'loading'; }\n\t\tconst s = this.state.read(reader);\n\t\tif (s?.kind === 'ghostText') { return 'ghostText'; }\n\t\tif (s?.kind === 'inlineEdit') { return 'inlineEdit'; }\n\t\treturn 'noSuggestion';\n\t});\n\n\tpublic readonly inlineCompletionState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'ghostText') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._editorObs.inComposition.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'inlineEdit') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditAvailable = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\treturn !!s;\n\t});\n\n\tprivate _computeAugmentation(suggestCompletion: SingleTextEdit, reader: IReader | undefined) {\n\t\tconst model = this.textModel;\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n\t\tconst candidateInlineCompletions = suggestWidgetInlineCompletions\n\t\t\t? suggestWidgetInlineCompletions.inlineCompletions\n\t\t\t: [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n\n\t\tconst augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n\t\t\tlet r = completion.toSingleTextEdit(reader);\n\t\t\tr = singleTextRemoveCommonPrefix(\n\t\t\t\tr,\n\t\t\t\tmodel,\n\t\t\t\tRange.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition())\n\t\t\t);\n\t\t\treturn singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n\t\t});\n\n\t\treturn augmentedCompletion;\n\t}\n\n\tpublic readonly ghostTexts = derivedOpts({ owner: this, equalsFn: ghostTextsOrReplacementsEqual }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v.ghostTexts;\n\t});\n\n\tpublic readonly primaryGhostText = derivedOpts({ owner: this, equalsFn: ghostTextOrReplacementEquals }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v?.primaryGhostText;\n\t});\n\n\tprivate readonly _tabShouldIndent = derived(this, reader => {\n\t\tif (this._inAcceptFlow.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction isMultiLine(range: Range): boolean {\n\t\t\treturn range.startLineNumber !== range.endLineNumber;\n\t\t}\n\n\t\tfunction getNonIndentationRange(model: ITextModel, lineNumber: number): Range {\n\t\t\tconst columnStart = model.getLineIndentColumn(lineNumber);\n\t\t\tconst lastNonWsColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\t\tconst columnEnd = Math.max(lastNonWsColumn, columnStart);\n\t\t\treturn new Range(lineNumber, columnStart, lineNumber, columnEnd);\n\t\t}\n\n\t\tconst selections = this._editorObs.selections.read(reader);\n\t\treturn selections?.some(s => {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\treturn this.textModel.getLineLength(s.startLineNumber) === 0;\n\t\t\t} else {\n\t\t\t\treturn isMultiLine(s) || s.containsRange(getNonIndentationRange(this.textModel, s.startLineNumber));\n\t\t\t}\n\t\t});\n\t});\n\n\tpublic readonly tabShouldJumpToInlineEdit = derived(this, reader => {\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !s.cursorAtInlineEdit;\n\t});\n\n\tpublic readonly tabShouldAcceptInlineEdit = derived(this, reader => {\n\t\tif (this._jumpedTo.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\treturn s.cursorAtInlineEdit;\n\t});\n\n\tprivate async _deltaSelectedInlineCompletionIndex(delta: 1 | -1): Promise<void> {\n\t\tawait this.triggerExplicitly();\n\n\t\tconst completions = this._filteredInlineCompletionItems.get() || [];\n\t\tif (completions.length > 0) {\n\t\t\tconst newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n\t\t\tthis._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n\t\t} else {\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t}\n\t}\n\n\tpublic async next(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(1); }\n\n\tpublic async previous(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(-1); }\n\n\tpublic async accept(editor: ICodeEditor = this._editor): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tlet completion: InlineCompletionItem;\n\n\t\tconst state = this.state.get();\n\t\tif (state?.kind === 'ghostText') {\n\t\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcompletion = state.inlineCompletion.toInlineCompletion(undefined);\n\t\t} else if (state?.kind === 'inlineEdit') {\n\t\t\tcompletion = state.inlineCompletion.toInlineCompletion(undefined);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (completion.command) {\n\t\t\t// Make sure the completion list will not be disposed.\n\t\t\tcompletion.source.addRef();\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\tif (completion.snippetInfo) {\n\t\t\teditor.executeEdits(\n\t\t\t\t'inlineSuggestion.accept',\n\t\t\t\t[\n\t\t\t\t\tEditOperation.replace(completion.range, ''),\n\t\t\t\t\t...completion.additionalTextEdits\n\t\t\t\t]\n\t\t\t);\n\t\t\teditor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n\t\t\tSnippetController2.get(editor)?.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n\t\t} else {\n\t\t\tconst edits = state.edits;\n\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\teditor.executeEdits('inlineSuggestion.accept', [\n\t\t\t\t...edits.map(edit => EditOperation.replace(edit.range, edit.text)),\n\t\t\t\t...completion.additionalTextEdits\n\t\t\t]);\n\t\t\teditor.setSelections(selections, 'inlineCompletionAccept');\n\t\t}\n\n\t\t// Reset before invoking the command, as the command might cause a follow up trigger (which we don't want to reset).\n\t\tthis.stop();\n\n\t\tif (completion.command) {\n\t\t\tawait this._commandService\n\t\t\t\t.executeCommand(completion.command.id, ...(completion.command.arguments || []))\n\t\t\t\t.then(undefined, onUnexpectedExternalError);\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\n\t\tthis._inAcceptFlow.set(true, undefined);\n\t}\n\n\tpublic async acceptNextWord(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n\t\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId);\n\t\t\tconst wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n\n\t\t\tconst m1 = text.match(wordRegExp);\n\t\t\tlet acceptUntilIndexExclusive = 0;\n\t\t\tif (m1 && m1.index !== undefined) {\n\t\t\t\tif (m1.index === 0) {\n\t\t\t\t\tacceptUntilIndexExclusive = m1[0].length;\n\t\t\t\t} else {\n\t\t\t\t\tacceptUntilIndexExclusive = m1.index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tacceptUntilIndexExclusive = text.length;\n\t\t\t}\n\n\t\t\tconst wsRegExp = /\\s+/g;\n\t\t\tconst m2 = wsRegExp.exec(text);\n\t\t\tif (m2 && m2.index !== undefined) {\n\t\t\t\tif (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n\t\t\t\t\tacceptUntilIndexExclusive = m2.index + m2[0].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acceptUntilIndexExclusive;\n\t\t}, PartialAcceptTriggerKind.Word);\n\t}\n\n\tpublic async acceptNextLine(editor: ICodeEditor): Promise<void> {\n\t\tawait this._acceptNext(editor, (pos, text) => {\n\t\t\tconst m = text.match(/\\n/);\n\t\t\tif (m && m.index !== undefined) {\n\t\t\t\treturn m.index + 1;\n\t\t\t}\n\t\t\treturn text.length;\n\t\t}, PartialAcceptTriggerKind.Line);\n\t}\n\n\tprivate async _acceptNext(editor: ICodeEditor, getAcceptUntilIndex: (position: Position, text: string) => number, kind: PartialAcceptTriggerKind): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.inlineCompletionState.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst ghostText = state.primaryGhostText;\n\t\tconst completion = state.inlineCompletion.toInlineCompletion(undefined);\n\n\t\tif (completion.snippetInfo || completion.filterText !== completion.insertText) {\n\t\t\t// not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n\t\t\tawait this.accept(editor);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstPart = ghostText.parts[0];\n\t\tconst ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n\t\tconst ghostTextVal = firstPart.text;\n\t\tconst acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n\t\tif (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n\t\t\tthis.accept(editor);\n\t\t\treturn;\n\t\t}\n\t\tconst partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n\n\t\tconst positions = this._positions.get();\n\t\tconst cursorPosition = positions[0];\n\n\t\t// Executing the edit might free the completion, so we have to hold a reference on it.\n\t\tcompletion.source.addRef();\n\t\ttry {\n\t\t\tthis._isAcceptingPartially = true;\n\t\t\ttry {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\tconst replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n\t\t\t\tconst newText = editor.getModel()!.getValueInRange(replaceRange) + partialGhostTextVal;\n\t\t\t\tconst primaryEdit = new SingleTextEdit(replaceRange, newText);\n\t\t\t\tconst edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)];\n\t\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\t\t\t\teditor.executeEdits('inlineSuggestion.accept', edits.map(edit => EditOperation.replace(edit.range, edit.text)));\n\t\t\t\teditor.setSelections(selections, 'inlineCompletionPartialAccept');\n\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(editor.getPosition()!, ScrollType.Immediate);\n\t\t\t} finally {\n\t\t\t\tthis._isAcceptingPartially = false;\n\t\t\t}\n\n\t\t\tif (completion.source.provider.handlePartialAccept) {\n\t\t\t\tconst acceptedRange = Range.fromPositions(completion.range.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n\t\t\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\t\t\tconst text = editor.getModel()!.getValueInRange(acceptedRange, EndOfLinePreference.LF);\n\t\t\t\tcompletion.source.provider.handlePartialAccept(\n\t\t\t\t\tcompletion.source.inlineCompletions,\n\t\t\t\t\tcompletion.sourceInlineCompletion,\n\t\t\t\t\ttext.length,\n\t\t\t\t\t{ kind, }\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tcompletion.source.removeRef();\n\t\t}\n\t}\n\n\tpublic handleSuggestAccepted(item: SuggestItemInfo) {\n\t\tconst itemEdit = singleTextRemoveCommonPrefix(item.toSingleTextEdit(), this.textModel);\n\t\tconst augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n\t\tif (!augmentedCompletion) { return; }\n\n\t\tconst source = augmentedCompletion.completion.source;\n\t\tconst sourceInlineCompletion = augmentedCompletion.completion.sourceInlineCompletion;\n\t\tsource.provider.handlePartialAccept?.(\n\t\t\tsource.inlineCompletions,\n\t\t\tsourceInlineCompletion,\n\t\t\titemEdit.text.length,\n\t\t\t{\n\t\t\t\tkind: PartialAcceptTriggerKind.Suggest,\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic extractReproSample(): Repro {\n\t\tconst value = this.textModel.getValue();\n\t\tconst item = this.state.get()?.inlineCompletion?.toInlineCompletion(undefined);\n\t\treturn {\n\t\t\tdocumentValue: value,\n\t\t\tinlineCompletion: item?.sourceInlineCompletion,\n\t\t};\n\t}\n\n\tprivate _jumpedTo = observableValue(this, false);\n\tprivate _inAcceptFlow = observableValue(this, false);\n\n\tpublic jump(): void {\n\t\tconst s = this.inlineEditState.get();\n\t\tif (!s) { return; }\n\n\t\ttransaction(tx => {\n\t\t\tthis._jumpedTo.set(true, tx);\n\t\t\tthis.dontRefetchSignal.trigger(tx);\n\t\t\tconst edit = s.inlineCompletion.toSingleTextEdit(undefined);\n\t\t\tthis._editor.setPosition(edit.range.getStartPosition(), 'inlineCompletions.jump');\n\n\t\t\t// TODO: consider using view information to reveal it\n\t\t\tconst isSingleLineChange = edit.range.startLineNumber === edit.range.endLineNumber && !edit.text.includes('\\n');\n\t\t\tif (isSingleLineChange) {\n\t\t\t\tthis._editor.revealPosition(edit.range.getStartPosition());\n\t\t\t} else {\n\t\t\t\tconst revealRange = new Range(edit.range.startLineNumber - 1, 1, edit.range.endLineNumber + 1, 1);\n\t\t\t\tthis._editor.revealRange(revealRange, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tthis._editor.focus();\n\t\t});\n\t}\n\n\tpublic async handleInlineCompletionShown(inlineCompletion: InlineCompletionItem): Promise<void> {\n\t\tif (!inlineCompletion.shownCommand) {\n\t\t\treturn;\n\t\t}\n\t\tif (inlineCompletion.didShow) {\n\t\t\treturn;\n\t\t}\n\t\tinlineCompletion.markAsShown();\n\t\tawait this._commandService.executeCommand(inlineCompletion.shownCommand.id, ...(inlineCompletion.shownCommand.arguments || []));\n\t}\n}\n\ninterface Repro {\n\tdocumentValue: string;\n\tinlineCompletion: InlineCompletion | undefined;\n}\n\nexport enum VersionIdChangeReason {\n\tUndo,\n\tRedo,\n\tAcceptWord,\n\tOther,\n}\n\nexport function getSecondaryEdits(textModel: ITextModel, positions: readonly Position[], primaryEdit: SingleTextEdit): SingleTextEdit[] {\n\tif (positions.length === 1) {\n\t\t// No secondary cursor positions\n\t\treturn [];\n\t}\n\tconst primaryPosition = positions[0];\n\tconst secondaryPositions = positions.slice(1);\n\tconst primaryEditStartPosition = primaryEdit.range.getStartPosition();\n\tconst primaryEditEndPosition = primaryEdit.range.getEndPosition();\n\tconst replacedTextAfterPrimaryCursor = textModel.getValueInRange(\n\t\tRange.fromPositions(primaryPosition, primaryEditEndPosition)\n\t);\n\tconst positionWithinTextEdit = subtractPositions(primaryPosition, primaryEditStartPosition);\n\tif (positionWithinTextEdit.lineNumber < 1) {\n\t\tonUnexpectedError(new BugIndicatingError(\n\t\t\t`positionWithinTextEdit line number should be bigger than 0.\n\t\t\tInvalid subtraction between ${primaryPosition.toString()} and ${primaryEditStartPosition.toString()}`\n\t\t));\n\t\treturn [];\n\t}\n\tconst secondaryEditText = substringPos(primaryEdit.text, positionWithinTextEdit);\n\treturn secondaryPositions.map(pos => {\n\t\tconst posEnd = addPositions(subtractPositions(pos, primaryEditStartPosition), primaryEditEndPosition);\n\t\tconst textAfterSecondaryCursor = textModel.getValueInRange(\n\t\t\tRange.fromPositions(pos, posEnd)\n\t\t);\n\t\tconst l = commonPrefixLength(replacedTextAfterPrimaryCursor, textAfterSecondaryCursor);\n\t\tconst range = Range.fromPositions(pos, pos.delta(0, l));\n\t\treturn new SingleTextEdit(range, secondaryEditText);\n\t});\n}\n"]}