{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionsAccessibleView.ts","vs/editor/contrib/inlineCompletions/browser/inlineCompletionsAccessibleView.ts"],"names":[],"mappings":"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","file":"inlineCompletionsAccessibleView.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { InlineCompletionContextKeys } from './controller/inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './controller/inlineCompletionsController.js';\nimport { AccessibleViewType, AccessibleViewProviderId, IAccessibleViewContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplementation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InlineCompletionsModel } from './model/inlineCompletionsModel.js';\n\nexport class InlineCompletionsAccessibleView implements IAccessibleViewImplementation {\n\treadonly type = AccessibleViewType.View;\n\treadonly priority = 95;\n\treadonly name = 'inline-completions';\n\treadonly when = ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible);\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = InlineCompletionsController.get(editor)?.model.get();\n\t\tif (!model?.inlineCompletionState.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new InlineCompletionsAccessibleViewContentProvider(editor, model);\n\t}\n}\n\nclass InlineCompletionsAccessibleViewContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: InlineCompletionsModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic readonly id = AccessibleViewProviderId.InlineCompletions;\n\tpublic readonly verbositySettingKey = 'accessibility.verbosity.inlineCompletions';\n\tpublic readonly options = { language: this._editor.getModel()?.getLanguageId() ?? undefined, type: AccessibleViewType.View };\n\n\tpublic provideContent(): string {\n\t\tconst state = this._model.inlineCompletionState.get();\n\t\tif (!state) {\n\t\t\tthrow new Error('Inline completion is visible but state is not available');\n\t\t}\n\t\tconst lineText = this._model.textModel.getLineContent(state.primaryGhostText.lineNumber);\n\t\tconst ghostText = state.primaryGhostText.renderForScreenReader(lineText);\n\t\tif (!ghostText) {\n\t\t\tthrow new Error('Inline completion is visible but ghost text is not available');\n\t\t}\n\t\treturn lineText + ghostText;\n\t}\n\tpublic provideNextContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.next().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic providePreviousContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.previous().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic onClose(): void {\n\t\tthis._model.stop();\n\t\tthis._editor.focus();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { InlineCompletionContextKeys } from './controller/inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './controller/inlineCompletionsController.js';\nimport { AccessibleViewType, AccessibleViewProviderId, IAccessibleViewContentProvider } from '../../../../platform/accessibility/browser/accessibleView.js';\nimport { IAccessibleViewImplementation } from '../../../../platform/accessibility/browser/accessibleViewRegistry.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InlineCompletionsModel } from './model/inlineCompletionsModel.js';\n\nexport class InlineCompletionsAccessibleView implements IAccessibleViewImplementation {\n\treadonly type = AccessibleViewType.View;\n\treadonly priority = 95;\n\treadonly name = 'inline-completions';\n\treadonly when = ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible);\n\tgetProvider(accessor: ServicesAccessor) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst editor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = InlineCompletionsController.get(editor)?.model.get();\n\t\tif (!model?.inlineCompletionState.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn new InlineCompletionsAccessibleViewContentProvider(editor, model);\n\t}\n}\n\nclass InlineCompletionsAccessibleViewContentProvider extends Disposable implements IAccessibleViewContentProvider {\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: InlineCompletionsModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic readonly id = AccessibleViewProviderId.InlineCompletions;\n\tpublic readonly verbositySettingKey = 'accessibility.verbosity.inlineCompletions';\n\tpublic readonly options = { language: this._editor.getModel()?.getLanguageId() ?? undefined, type: AccessibleViewType.View };\n\n\tpublic provideContent(): string {\n\t\tconst state = this._model.inlineCompletionState.get();\n\t\tif (!state) {\n\t\t\tthrow new Error('Inline completion is visible but state is not available');\n\t\t}\n\t\tconst lineText = this._model.textModel.getLineContent(state.primaryGhostText.lineNumber);\n\t\tconst ghostText = state.primaryGhostText.renderForScreenReader(lineText);\n\t\tif (!ghostText) {\n\t\t\tthrow new Error('Inline completion is visible but ghost text is not available');\n\t\t}\n\t\treturn lineText + ghostText;\n\t}\n\tpublic provideNextContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.next().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic providePreviousContent(): string | undefined {\n\t\t// asynchronously update the model and fire the event\n\t\tthis._model.previous().then((() => this._onDidChangeContent.fire()));\n\t\treturn;\n\t}\n\tpublic onClose(): void {\n\t\tthis._model.stop();\n\t\tthis._editor.focus();\n\t}\n}\n"]}