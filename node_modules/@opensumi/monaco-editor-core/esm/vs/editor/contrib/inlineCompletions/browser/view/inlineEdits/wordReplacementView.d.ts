import { Disposable } from '../../../../../../base/common/lifecycle.js';
import { ObservableCodeEditor } from '../../../../../browser/observableCodeEditor.js';
import { SingleTextEdit } from '../../../../../common/core/textEdit.js';
import { ILanguageService } from '../../../../../common/languages/language.js';
import { IInlineEditsView } from './sideBySideDiff.js';
import { Range } from '../../../../../common/core/range.js';
import { LineRange } from '../../../../../common/core/lineRange.js';
export declare const transparentHoverBackground: string;
export declare class WordReplacementView extends Disposable implements IInlineEditsView {
    private readonly _editor;
    /** Must be single-line in both sides */
    private readonly _edit;
    private readonly _innerEdits;
    private readonly _languageService;
    static MAX_LENGTH: number;
    private readonly _start;
    private readonly _end;
    private readonly _line;
    private readonly _text;
    private readonly _editLocations;
    private readonly _layout;
    private readonly _div;
    readonly isHovered: import("../../../../../../base/common/observable.js").IObservable<boolean>;
    constructor(_editor: ObservableCodeEditor, 
    /** Must be single-line in both sides */
    _edit: SingleTextEdit, _innerEdits: SingleTextEdit[], _languageService: ILanguageService);
}
export declare class LineReplacementView extends Disposable implements IInlineEditsView {
    private readonly _editor;
    private readonly _originalRange;
    private readonly _modifiedRange;
    private readonly _modifiedLines;
    private readonly _replacements;
    private readonly _languageService;
    private readonly _originalBubblesDecorationCollection;
    private readonly _originalBubblesDecorationOptions;
    private readonly _maxPrefixTrim;
    private readonly _modifiedLineElements;
    private readonly _viewZoneInfo;
    private readonly _layout;
    private _previousViewZoneInfo;
    protected readonly _viewZone: import("../../../../../../base/common/observable.js").IObservable<void>;
    private removePreviousViewZone;
    private addViewZone;
    private readonly _div;
    readonly isHovered: import("../../../../../../base/common/observable.js").IObservable<boolean>;
    constructor(_editor: ObservableCodeEditor, _originalRange: LineRange, _modifiedRange: LineRange, _modifiedLines: string[], _replacements: readonly Replacement[], _languageService: ILanguageService);
}
export interface Replacement {
    originalRange: Range;
    modifiedRange: Range;
}
