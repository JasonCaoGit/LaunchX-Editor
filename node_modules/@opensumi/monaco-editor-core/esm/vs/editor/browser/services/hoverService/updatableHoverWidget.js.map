{"version":3,"sources":["vs/editor/browser/services/hoverService/updatableHoverWidget.ts"],"names":[],"mappings":"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","file":"updatableHoverWidget.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isHTMLElement } from '../../../../base/browser/dom.js';\nimport { IHoverWidget, IManagedHoverContent, IManagedHoverOptions } from '../../../../base/browser/ui/hover/hover.js';\nimport { IHoverDelegate, IHoverDelegateOptions, IHoverDelegateTarget } from '../../../../base/browser/ui/hover/hoverDelegate.js';\nimport { HoverPosition } from '../../../../base/browser/ui/hover/hoverWidget.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { isMarkdownString, type IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { isFunction, isString } from '../../../../base/common/types.js';\nimport { localize } from '../../../../nls.js';\n\ntype IManagedHoverResolvedContent = IMarkdownString | string | HTMLElement | undefined;\n\nexport class ManagedHoverWidget implements IDisposable {\n\n\tprivate _hoverWidget: IHoverWidget | undefined;\n\tprivate _cancellationTokenSource: CancellationTokenSource | undefined;\n\n\tconstructor(private hoverDelegate: IHoverDelegate, private target: IHoverDelegateTarget | HTMLElement, private fadeInAnimation: boolean) {\n\t}\n\n\tasync update(content: IManagedHoverContent, focus?: boolean, options?: IManagedHoverOptions): Promise<void> {\n\t\tif (this._cancellationTokenSource) {\n\t\t\t// there's an computation ongoing, cancel it\n\t\t\tthis._cancellationTokenSource.dispose(true);\n\t\t\tthis._cancellationTokenSource = undefined;\n\t\t}\n\t\tif (this.isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet resolvedContent;\n\t\tif (content === undefined || isString(content) || isHTMLElement(content)) {\n\t\t\tresolvedContent = content;\n\t\t} else if (!isFunction(content.markdown)) {\n\t\t\tresolvedContent = content.markdown ?? content.markdownNotSupportedFallback;\n\t\t} else {\n\t\t\t// compute the content, potentially long-running\n\n\t\t\t// show 'Loading' if no hover is up yet\n\t\t\tif (!this._hoverWidget) {\n\t\t\t\tthis.show(localize('iconLabel.loading', \"Loading...\"), focus, options);\n\t\t\t}\n\n\t\t\t// compute the content\n\t\t\tthis._cancellationTokenSource = new CancellationTokenSource();\n\t\t\tconst token = this._cancellationTokenSource.token;\n\t\t\tresolvedContent = await content.markdown(token);\n\t\t\tif (resolvedContent === undefined) {\n\t\t\t\tresolvedContent = content.markdownNotSupportedFallback;\n\t\t\t}\n\n\t\t\tif (this.isDisposed || token.isCancellationRequested) {\n\t\t\t\t// either the widget has been closed in the meantime\n\t\t\t\t// or there has been a new call to `update`\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.show(resolvedContent, focus, options);\n\t}\n\n\tprivate show(content: IManagedHoverResolvedContent, focus?: boolean, options?: IManagedHoverOptions): void {\n\t\tconst oldHoverWidget = this._hoverWidget;\n\n\t\tif (this.hasContent(content)) {\n\t\t\tconst hoverOptions: IHoverDelegateOptions = {\n\t\t\t\tcontent,\n\t\t\t\ttarget: this.target,\n\t\t\t\tactions: options?.actions,\n\t\t\t\tlinkHandler: options?.linkHandler,\n\t\t\t\ttrapFocus: options?.trapFocus,\n\t\t\t\tappearance: {\n\t\t\t\t\tshowPointer: this.hoverDelegate.placement === 'element',\n\t\t\t\t\tskipFadeInAnimation: !this.fadeInAnimation || !!oldHoverWidget, // do not fade in if the hover is already showing\n\t\t\t\t\tshowHoverHint: options?.appearance?.showHoverHint,\n\t\t\t\t},\n\t\t\t\tposition: {\n\t\t\t\t\thoverPosition: HoverPosition.BELOW,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tthis._hoverWidget = this.hoverDelegate.showHover(hoverOptions, focus);\n\t\t}\n\t\toldHoverWidget?.dispose();\n\t}\n\n\tprivate hasContent(content: IManagedHoverResolvedContent): content is NonNullable<IManagedHoverResolvedContent> {\n\t\tif (!content) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isMarkdownString(content)) {\n\t\t\treturn !!content.value;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget isDisposed() {\n\t\treturn this._hoverWidget?.isDisposed;\n\t}\n\n\tdispose(): void {\n\t\tthis._hoverWidget?.dispose();\n\t\tthis._cancellationTokenSource?.dispose(true);\n\t\tthis._cancellationTokenSource = undefined;\n\t}\n}\n"]}