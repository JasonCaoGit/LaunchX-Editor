{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/browser/controller/editContext/native/nativeEditContext.ts","vs/editor/browser/controller/editContext/native/nativeEditContext.ts"],"names":[],"mappings":"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","file":"nativeEditContext.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './nativeEditContext.css';\nimport { isFirefox } from '../../../../../base/browser/browser.js';\nimport { addDisposableListener, getActiveWindow, getWindow, getWindowId } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { EndOfLinePreference, EndOfLineSequence, IModelDeltaDecoration } from '../../../../common/model.js';\nimport { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent, ViewDecorationsChangedEvent, ViewFlushedEvent, ViewLinesChangedEvent, ViewLinesDeletedEvent, ViewLinesInsertedEvent, ViewScrollChangedEvent, ViewZonesChangedEvent } from '../../../../common/viewEvents.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { RestrictedRenderingContext, RenderingContext } from '../../../view/renderingContext.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { ClipboardEventUtils, ClipboardStoredMetadata, getDataToCopy, InMemoryClipboardMetadataManager } from '../clipboardUtils.js';\nimport { AbstractEditContext } from '../editContext.js';\nimport { editContextAddDisposableListener, FocusTracker, ITypeData } from './nativeEditContextUtils.js';\nimport { ScreenReaderSupport } from './screenReaderSupport.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { IVisibleRangeProvider } from '../textArea/textAreaEditContext.js';\nimport { PositionOffsetTransformer } from '../../../../common/core/positionToOffset.js';\nimport { IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { EditContext } from './editContextFactory.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { NativeEditContextRegistry } from './nativeEditContextRegistry.js';\nimport { IEditorAriaOptions } from '../../../editorBrowser.js';\n\n// Corresponds to classes in nativeEditContext.css\nenum CompositionClassName {\n\tNONE = 'edit-context-composition-none',\n\tSECONDARY = 'edit-context-composition-secondary',\n\tPRIMARY = 'edit-context-composition-primary',\n}\n\nexport class NativeEditContext extends AbstractEditContext {\n\n\t// Text area used to handle paste events\n\tpublic readonly textArea: FastDomNode<HTMLTextAreaElement>;\n\tpublic readonly domNode: FastDomNode<HTMLDivElement>;\n\tprivate readonly _editContext: EditContext;\n\tprivate readonly _screenReaderSupport: ScreenReaderSupport;\n\tprivate _editContextPrimarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\t// Overflow guard container\n\tprivate _parent: HTMLElement | undefined;\n\tprivate _decorations: string[] = [];\n\tprivate _primarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\n\tprivate _targetWindowId: number = -1;\n\tprivate _scrollTop: number = 0;\n\tprivate _scrollLeft: number = 0;\n\n\tprivate readonly _focusTracker: FocusTracker;\n\n\tprivate readonly _selectionChangeListener: MutableDisposable<IDisposable>;\n\n\tconstructor(\n\t\townerID: string,\n\t\tcontext: ViewContext,\n\t\toverflowGuardContainer: FastDomNode<HTMLElement>,\n\t\tviewController: ViewController,\n\t\tprivate readonly _visibleRangeProvider: IVisibleRangeProvider,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper(context);\n\n\t\tthis.domNode = new FastDomNode(document.createElement('div'));\n\t\tthis.domNode.setClassName(`native-edit-context`);\n\t\tthis.textArea = new FastDomNode(document.createElement('textarea'));\n\t\tthis.textArea.setClassName('native-edit-context-textarea');\n\t\tthis.textArea.setAttribute('tabindex', '-1');\n\n\t\tthis._updateDomAttributes();\n\n\t\toverflowGuardContainer.appendChild(this.domNode);\n\t\toverflowGuardContainer.appendChild(this.textArea);\n\t\tthis._parent = overflowGuardContainer.domNode;\n\n\t\tthis._selectionChangeListener = this._register(new MutableDisposable());\n\t\tthis._focusTracker = this._register(new FocusTracker(this.domNode.domNode, (newFocusValue: boolean) => {\n\t\t\tif (newFocusValue) {\n\t\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener(viewController);\n\t\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onFocus');\n\t\t\t} else {\n\t\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t\t}\n\t\t\tthis._context.viewModel.setHasFocus(newFocusValue);\n\t\t}));\n\n\t\tconst window = getWindow(this.domNode.domNode);\n\t\tthis._editContext = EditContext.create(window);\n\t\tthis.setEditContextOnDomNode();\n\n\t\tthis._screenReaderSupport = instantiationService.createInstance(ScreenReaderSupport, this.domNode, context);\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'copy', (e) => this._ensureClipboardGetsEditorSelection(e)));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'cut', (e) => {\n\t\t\t// Pretend here we touched the text area, as the `cut` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onCut');\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\tviewController.cut();\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keyup', (e) => viewController.emitKeyUp(new StandardKeyboardEvent(e))));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keydown', async (e) => {\n\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t// When the IME is visible, the keys, like arrow-left and arrow-right, should be used to navigate in the IME, and should not be propagated further\n\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.KEY_IN_COMPOSITION) {\n\t\t\t\tstandardKeyboardEvent.stopPropagation();\n\t\t\t}\n\t\t\tviewController.emitKeyDown(standardKeyboardEvent);\n\t\t}));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'beforeinput', async (e) => {\n\t\t\tif (e.inputType === 'insertParagraph' || e.inputType === 'insertLineBreak') {\n\t\t\t\tthis._onType(viewController, { text: '\\n', replacePrevCharCnt: 0, replaceNextCharCnt: 0, positionDelta: 0 });\n\t\t\t}\n\t\t}));\n\n\t\t// Edit context events\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textformatupdate', (e) => this._handleTextFormatUpdate(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'characterboundsupdate', (e) => this._updateCharacterBounds(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textupdate', (e) => {\n\t\t\tthis._emitTypeEvent(viewController, e);\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionstart', (e) => {\n\t\t\t// Utlimately fires onDidCompositionStart() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionStart();\n\t\t\t// Emits ViewCompositionStartEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionend', (e) => {\n\t\t\t// Utlimately fires compositionEnd() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionEnd();\n\t\t\t// Emits ViewCompositionEndEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t}));\n\t\tthis._register(addDisposableListener(this.textArea.domNode, 'paste', (e) => {\n\t\t\t// Pretend here we touched the text area, as the `paste` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onPaste');\n\t\t\te.preventDefault();\n\t\t\tif (!e.clipboardData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\t\tif (!text) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmetadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n\t\t\tlet pasteOnNewLine = false;\n\t\t\tlet multicursorText: string[] | null = null;\n\t\t\tlet mode: string | null = null;\n\t\t\tif (metadata) {\n\t\t\t\tconst options = this._context.configuration.options;\n\t\t\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\t\t\tpasteOnNewLine = emptySelectionClipboard && !!metadata.isFromEmptySelection;\n\t\t\t\tmulticursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n\t\t\t\tmode = metadata.mode;\n\t\t\t}\n\t\t\tviewController.paste(text, pasteOnNewLine, multicursorText, mode);\n\t\t}));\n\t\tthis._register(NativeEditContextRegistry.register(ownerID, this));\n\t}\n\n\t// --- Public methods ---\n\n\tpublic override dispose(): void {\n\t\t// Force blue the dom node so can write in pane with no native edit context after disposal\n\t\tthis.domNode.domNode.blur();\n\t\tthis.domNode.domNode.remove();\n\t\tthis.textArea.domNode.remove();\n\t\tsuper.dispose();\n\t}\n\n\tpublic setAriaOptions(options: IEditorAriaOptions): void {\n\t\tthis._screenReaderSupport.setAriaOptions(options);\n\t}\n\n\t/* Last rendered data needed for correct hit-testing and determining the mouse position.\n\t * Without this, the selection will blink as incorrect mouse position is calculated */\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._primarySelection.getPosition();\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._screenReaderSupport.prepareRender(ctx);\n\t\tthis._updateEditContext();\n\t\tthis._updateSelectionAndControlBounds(ctx);\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._screenReaderSupport.render(ctx);\n\t}\n\n\tpublic override onCursorStateChanged(e: ViewCursorStateChangedEvent): boolean {\n\t\tthis._primarySelection = e.modelSelections[0] ?? new Selection(1, 1, 1, 1);\n\t\tthis._screenReaderSupport.onCursorStateChanged(e);\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(e: ViewConfigurationChangedEvent): boolean {\n\t\tthis._screenReaderSupport.onConfigurationChanged(e);\n\t\tthis._updateDomAttributes();\n\t\treturn true;\n\t}\n\n\tpublic override onDecorationsChanged(e: ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;\n\t}\n\n\tpublic override onFlushed(e: ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesChanged(e: ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesDeleted(e: ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesInserted(e: ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\tthis._scrollLeft = e.scrollLeft;\n\t\tthis._scrollTop = e.scrollTop;\n\t\treturn true;\n\t}\n\n\tpublic override onZonesChanged(e: ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\tpublic writeScreenReaderContent(): void {\n\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._focusTracker.isFocused || (getActiveWindow().document.activeElement === this.textArea.domNode);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._focusTracker.focus();\n\n\t\t// If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\t\tthis.refreshFocusState();\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tthis._focusTracker.refreshFocusState();\n\t}\n\n\t// TODO: added as a workaround fix for https://github.com/microsoft/vscode/issues/229825\n\t// When this issue will be fixed the following should be removed.\n\tpublic setEditContextOnDomNode(): void {\n\t\tconst targetWindow = getWindow(this.domNode.domNode);\n\t\tconst targetWindowId = getWindowId(targetWindow);\n\t\tif (this._targetWindowId !== targetWindowId) {\n\t\t\tthis.domNode.domNode.editContext = this._editContext;\n\t\t\tthis._targetWindowId = targetWindowId;\n\t\t}\n\t}\n\n\t// --- Private methods ---\n\n\tprivate _updateDomAttributes(): void {\n\t\tconst options = this._context.configuration.options;\n\t\tthis.domNode.domNode.setAttribute('tabindex', String(options.get(EditorOption.tabIndex)));\n\t}\n\n\tprivate _updateEditContext(): void {\n\t\tconst editContextState = this._getNewEditContextState();\n\t\tif (!editContextState) {\n\t\t\treturn;\n\t\t}\n\t\tthis._editContext.updateText(0, Number.MAX_SAFE_INTEGER, editContextState.text);\n\t\tthis._editContext.updateSelection(editContextState.selectionStartOffset, editContextState.selectionEndOffset);\n\t\tthis._editContextPrimarySelection = editContextState.editContextPrimarySelection;\n\t}\n\n\tprivate _emitTypeEvent(viewController: ViewController, e: TextUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editContextPrimarySelection.equalsSelection(this._primarySelection)) {\n\t\t\tthis._updateEditContext();\n\t\t}\n\t\tconst model = this._context.viewModel.model;\n\t\tconst startPositionOfEditContext = this._editContextStartPosition();\n\t\tconst offsetOfStartOfText = model.getOffsetAt(startPositionOfEditContext);\n\t\tconst offsetOfSelectionEnd = model.getOffsetAt(this._primarySelection.getEndPosition());\n\t\tconst offsetOfSelectionStart = model.getOffsetAt(this._primarySelection.getStartPosition());\n\t\tconst selectionEndOffset = offsetOfSelectionEnd - offsetOfStartOfText;\n\t\tconst selectionStartOffset = offsetOfSelectionStart - offsetOfStartOfText;\n\n\t\tlet replaceNextCharCnt = 0;\n\t\tlet replacePrevCharCnt = 0;\n\t\tif (e.updateRangeEnd > selectionEndOffset) {\n\t\t\treplaceNextCharCnt = e.updateRangeEnd - selectionEndOffset;\n\t\t}\n\t\tif (e.updateRangeStart < selectionStartOffset) {\n\t\t\treplacePrevCharCnt = selectionStartOffset - e.updateRangeStart;\n\t\t}\n\t\tlet text = '';\n\t\tif (selectionStartOffset < e.updateRangeStart) {\n\t\t\ttext += this._editContext.text.substring(selectionStartOffset, e.updateRangeStart);\n\t\t}\n\t\ttext += e.text;\n\t\tif (selectionEndOffset > e.updateRangeEnd) {\n\t\t\ttext += this._editContext.text.substring(e.updateRangeEnd, selectionEndOffset);\n\t\t}\n\t\tlet positionDelta = 0;\n\t\tif (e.selectionStart === e.selectionEnd && selectionStartOffset === selectionEndOffset) {\n\t\t\tpositionDelta = e.selectionStart - (e.updateRangeStart + e.text.length);\n\t\t}\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta\n\t\t};\n\t\tthis._onType(viewController, typeInput);\n\n\t\t// It could be that the typed letter does not produce a change in the editor text,\n\t\t// for example if an extension registers a custom typing command, and the typing operation does something else like scrolling\n\t\t// Need to update the edit context to reflect this\n\t\tthis._updateEditContext();\n\t}\n\n\tprivate _onType(viewController: ViewController, typeInput: ITypeData): void {\n\t\tif (typeInput.replacePrevCharCnt || typeInput.replaceNextCharCnt || typeInput.positionDelta) {\n\t\t\tviewController.compositionType(typeInput.text, typeInput.replacePrevCharCnt, typeInput.replaceNextCharCnt, typeInput.positionDelta);\n\t\t} else {\n\t\t\tviewController.type(typeInput.text);\n\t\t}\n\t}\n\n\tprivate _getNewEditContextState(): { text: string; selectionStartOffset: number; selectionEndOffset: number; editContextPrimarySelection: Selection } | undefined {\n\t\tconst editContextPrimarySelection = this._primarySelection;\n\t\tconst model = this._context.viewModel.model;\n\t\tif (!model.isValidRange(editContextPrimarySelection)) {\n\t\t\treturn;\n\t\t}\n\t\tconst primarySelectionStartLine = editContextPrimarySelection.startLineNumber;\n\t\tconst primarySelectionEndLine = editContextPrimarySelection.endLineNumber;\n\t\tconst endColumnOfEndLineNumber = model.getLineMaxColumn(primarySelectionEndLine);\n\t\tconst rangeOfText = new Range(primarySelectionStartLine, 1, primarySelectionEndLine, endColumnOfEndLineNumber);\n\t\tconst text = model.getValueInRange(rangeOfText, EndOfLinePreference.TextDefined);\n\t\tconst selectionStartOffset = editContextPrimarySelection.startColumn - 1;\n\t\tconst selectionEndOffset = text.length + editContextPrimarySelection.endColumn - endColumnOfEndLineNumber;\n\t\treturn {\n\t\t\ttext,\n\t\t\tselectionStartOffset,\n\t\t\tselectionEndOffset,\n\t\t\teditContextPrimarySelection\n\t\t};\n\t}\n\n\tprivate _editContextStartPosition(): Position {\n\t\treturn new Position(this._editContextPrimarySelection.startLineNumber, 1);\n\t}\n\n\tprivate _handleTextFormatUpdate(e: TextFormatUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst formats = e.getTextFormats();\n\t\tconst editContextStartPosition = this._editContextStartPosition();\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tformats.forEach(f => {\n\t\t\tconst textModel = this._context.viewModel.model;\n\t\t\tconst offsetOfEditContextText = textModel.getOffsetAt(editContextStartPosition);\n\t\t\tconst startPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeStart);\n\t\t\tconst endPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeEnd);\n\t\t\tconst decorationRange = Range.fromPositions(startPositionOfDecoration, endPositionOfDecoration);\n\t\t\tconst thickness = f.underlineThickness.toLowerCase();\n\t\t\tlet decorationClassName: string = CompositionClassName.NONE;\n\t\t\tswitch (thickness) {\n\t\t\t\tcase 'thin':\n\t\t\t\t\tdecorationClassName = CompositionClassName.SECONDARY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'thick':\n\t\t\t\t\tdecorationClassName = CompositionClassName.PRIMARY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdecorations.push({\n\t\t\t\trange: decorationRange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'textFormatDecoration',\n\t\t\t\t\tinlineClassName: decorationClassName,\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis._decorations = this._context.viewModel.model.deltaDecorations(this._decorations, decorations);\n\t}\n\n\tprivate _updateSelectionAndControlBounds(ctx: RenderingContext) {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst modelStartPosition = this._primarySelection.getStartPosition();\n\t\tconst viewStartPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelStartPosition);\n\t\tconst verticalOffsetStart = this._context.viewLayout.getVerticalOffsetForLineNumber(viewStartPosition.lineNumber);\n\n\t\tconst top = parentBounds.top + verticalOffsetStart - this._scrollTop;\n\t\tconst height = (this._primarySelection.endLineNumber - this._primarySelection.startLineNumber + 1) * lineHeight;\n\t\tlet left = parentBounds.left + contentLeft - this._scrollLeft;\n\t\tlet width: number;\n\n\t\tif (this._primarySelection.isEmpty()) {\n\t\t\tconst linesVisibleRanges = ctx.visibleRangeForPosition(viewStartPosition);\n\t\t\tif (linesVisibleRanges) {\n\t\t\t\tleft += linesVisibleRanges.left;\n\t\t\t}\n\t\t\twidth = 0;\n\t\t} else {\n\t\t\twidth = parentBounds.width - contentLeft;\n\t\t}\n\n\t\tconst selectionBounds = new DOMRect(left, top, width, height);\n\t\tthis._editContext.updateSelectionBounds(selectionBounds);\n\t\tthis._editContext.updateControlBounds(selectionBounds);\n\t}\n\n\tprivate _updateCharacterBounds(e: CharacterBoundsUpdateEvent): void {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst typicalHalfWidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\n\t\tconst characterBounds: DOMRect[] = [];\n\t\tconst offsetTransformer = new PositionOffsetTransformer(this._editContext.text);\n\t\tfor (let offset = e.rangeStart; offset < e.rangeEnd; offset++) {\n\t\t\tconst editContextStartPosition = offsetTransformer.getPosition(offset);\n\t\t\tconst textStartLineOffsetWithinEditor = this._editContextPrimarySelection.startLineNumber - 1;\n\t\t\tconst characterStartPosition = new Position(textStartLineOffsetWithinEditor + editContextStartPosition.lineNumber, editContextStartPosition.column);\n\t\t\tconst characterEndPosition = characterStartPosition.delta(0, 1);\n\t\t\tconst characterModelRange = Range.fromPositions(characterStartPosition, characterEndPosition);\n\t\t\tconst characterViewRange = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(characterModelRange);\n\t\t\tconst characterLinesVisibleRanges = this._visibleRangeProvider.linesVisibleRangesForRange(characterViewRange, true) ?? [];\n\t\t\tconst characterVerticalOffset = this._context.viewLayout.getVerticalOffsetForLineNumber(characterViewRange.startLineNumber);\n\t\t\tconst top = parentBounds.top + characterVerticalOffset - this._scrollTop;\n\n\t\t\tlet left = 0;\n\t\t\tlet width = typicalHalfWidthCharacterWidth;\n\t\t\tif (characterLinesVisibleRanges.length > 0) {\n\t\t\t\tfor (const visibleRange of characterLinesVisibleRanges[0].ranges) {\n\t\t\t\t\tleft = visibleRange.left;\n\t\t\t\t\twidth = visibleRange.width;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcharacterBounds.push(new DOMRect(parentBounds.left + contentLeft + left - this._scrollLeft, top, width, lineHeight));\n\t\t}\n\t\tthis._editContext.updateCharacterBounds(e.rangeStart, characterBounds);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(e: ClipboardEvent): void {\n\t\tconst options = this._context.configuration.options;\n\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tconst copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tconst selections = this._context.viewModel.getCursorStates().map(cursorState => cursorState.modelState.selection);\n\t\tconst dataToCopy = getDataToCopy(this._context.viewModel, selections, emptySelectionClipboard, copyWithSyntaxHighlighting);\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\t\te.preventDefault();\n\t\tif (e.clipboardData) {\n\t\t\tClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n\t\t}\n\t}\n\n\tprivate _setSelectionChangeListener(viewController: ViewController): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this.domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!this.isFocused() || !isScreenReaderOptimized) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst screenReaderContentState = this._screenReaderSupport.screenReaderContentState;\n\t\t\tif (!screenReaderContentState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._screenReaderSupport.getIgnoreSelectionChangeTime();\n\t\t\tthis._screenReaderSupport.resetSelectionChangeTime();\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the textarea\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeDocument = getActiveWindow().document;\n\t\t\tconst activeDocumentSelection = activeDocument.getSelection();\n\t\t\tif (!activeDocumentSelection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rangeCount = activeDocumentSelection.rangeCount;\n\t\t\tif (rangeCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst range = activeDocumentSelection.getRangeAt(0);\n\t\t\tconst viewModel = this._context.viewModel;\n\t\t\tconst model = viewModel.model;\n\t\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\t\tconst modelScreenReaderContentStartPositionWithinEditor = coordinatesConverter.convertViewPositionToModelPosition(screenReaderContentState.startPositionWithinEditor);\n\t\t\tconst offsetOfStartOfScreenReaderContent = model.getOffsetAt(modelScreenReaderContentStartPositionWithinEditor);\n\t\t\tlet offsetOfSelectionStart = range.startOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tlet offsetOfSelectionEnd = range.endOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tconst modelUsesCRLF = model.getEndOfLineSequence() === EndOfLineSequence.CRLF;\n\t\t\tif (modelUsesCRLF) {\n\t\t\t\tconst screenReaderContentText = screenReaderContentState.value;\n\t\t\t\tconst offsetTransformer = new PositionOffsetTransformer(screenReaderContentText);\n\t\t\t\tconst positionOfStartWithinText = offsetTransformer.getPosition(range.startOffset);\n\t\t\t\tconst positionOfEndWithinText = offsetTransformer.getPosition(range.endOffset);\n\t\t\t\toffsetOfSelectionStart += positionOfStartWithinText.lineNumber - 1;\n\t\t\t\toffsetOfSelectionEnd += positionOfEndWithinText.lineNumber - 1;\n\t\t\t}\n\t\t\tconst positionOfSelectionStart = model.getPositionAt(offsetOfSelectionStart);\n\t\t\tconst positionOfSelectionEnd = model.getPositionAt(offsetOfSelectionEnd);\n\t\t\tconst newSelection = Selection.fromPositions(positionOfSelectionStart, positionOfSelectionEnd);\n\t\t\tviewController.setSelection(newSelection);\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './nativeEditContext.css';\nimport { isFirefox } from '../../../../../base/browser/browser.js';\nimport { addDisposableListener, getActiveWindow, getWindow, getWindowId } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { EndOfLinePreference, EndOfLineSequence, IModelDeltaDecoration } from '../../../../common/model.js';\nimport { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent, ViewDecorationsChangedEvent, ViewFlushedEvent, ViewLinesChangedEvent, ViewLinesDeletedEvent, ViewLinesInsertedEvent, ViewScrollChangedEvent, ViewZonesChangedEvent } from '../../../../common/viewEvents.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { RestrictedRenderingContext, RenderingContext } from '../../../view/renderingContext.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { ClipboardEventUtils, ClipboardStoredMetadata, getDataToCopy, InMemoryClipboardMetadataManager } from '../clipboardUtils.js';\nimport { AbstractEditContext } from '../editContext.js';\nimport { editContextAddDisposableListener, FocusTracker, ITypeData } from './nativeEditContextUtils.js';\nimport { ScreenReaderSupport } from './screenReaderSupport.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { IVisibleRangeProvider } from '../textArea/textAreaEditContext.js';\nimport { PositionOffsetTransformer } from '../../../../common/core/positionToOffset.js';\nimport { IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { EditContext } from './editContextFactory.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { NativeEditContextRegistry } from './nativeEditContextRegistry.js';\nimport { IEditorAriaOptions } from '../../../editorBrowser.js';\n\n// Corresponds to classes in nativeEditContext.css\nenum CompositionClassName {\n\tNONE = 'edit-context-composition-none',\n\tSECONDARY = 'edit-context-composition-secondary',\n\tPRIMARY = 'edit-context-composition-primary',\n}\n\nexport class NativeEditContext extends AbstractEditContext {\n\n\t// Text area used to handle paste events\n\tpublic readonly textArea: FastDomNode<HTMLTextAreaElement>;\n\tpublic readonly domNode: FastDomNode<HTMLDivElement>;\n\tprivate readonly _editContext: EditContext;\n\tprivate readonly _screenReaderSupport: ScreenReaderSupport;\n\tprivate _editContextPrimarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\t// Overflow guard container\n\tprivate _parent: HTMLElement | undefined;\n\tprivate _decorations: string[] = [];\n\tprivate _primarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\n\tprivate _targetWindowId: number = -1;\n\tprivate _scrollTop: number = 0;\n\tprivate _scrollLeft: number = 0;\n\n\tprivate readonly _focusTracker: FocusTracker;\n\n\tprivate readonly _selectionChangeListener: MutableDisposable<IDisposable>;\n\n\tconstructor(\n\t\townerID: string,\n\t\tcontext: ViewContext,\n\t\toverflowGuardContainer: FastDomNode<HTMLElement>,\n\t\tviewController: ViewController,\n\t\tprivate readonly _visibleRangeProvider: IVisibleRangeProvider,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper(context);\n\n\t\tthis.domNode = new FastDomNode(document.createElement('div'));\n\t\tthis.domNode.setClassName(`native-edit-context`);\n\t\tthis.textArea = new FastDomNode(document.createElement('textarea'));\n\t\tthis.textArea.setClassName('native-edit-context-textarea');\n\t\tthis.textArea.setAttribute('tabindex', '-1');\n\n\t\tthis._updateDomAttributes();\n\n\t\toverflowGuardContainer.appendChild(this.domNode);\n\t\toverflowGuardContainer.appendChild(this.textArea);\n\t\tthis._parent = overflowGuardContainer.domNode;\n\n\t\tthis._selectionChangeListener = this._register(new MutableDisposable());\n\t\tthis._focusTracker = this._register(new FocusTracker(this.domNode.domNode, (newFocusValue: boolean) => {\n\t\t\tif (newFocusValue) {\n\t\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener(viewController);\n\t\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onFocus');\n\t\t\t} else {\n\t\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t\t}\n\t\t\tthis._context.viewModel.setHasFocus(newFocusValue);\n\t\t}));\n\n\t\tconst window = getWindow(this.domNode.domNode);\n\t\tthis._editContext = EditContext.create(window);\n\t\tthis.setEditContextOnDomNode();\n\n\t\tthis._screenReaderSupport = instantiationService.createInstance(ScreenReaderSupport, this.domNode, context);\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'copy', (e) => this._ensureClipboardGetsEditorSelection(e)));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'cut', (e) => {\n\t\t\t// Pretend here we touched the text area, as the `cut` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onCut');\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\tviewController.cut();\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keyup', (e) => viewController.emitKeyUp(new StandardKeyboardEvent(e))));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keydown', async (e) => {\n\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t// When the IME is visible, the keys, like arrow-left and arrow-right, should be used to navigate in the IME, and should not be propagated further\n\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.KEY_IN_COMPOSITION) {\n\t\t\t\tstandardKeyboardEvent.stopPropagation();\n\t\t\t}\n\t\t\tviewController.emitKeyDown(standardKeyboardEvent);\n\t\t}));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'beforeinput', async (e) => {\n\t\t\tif (e.inputType === 'insertParagraph' || e.inputType === 'insertLineBreak') {\n\t\t\t\tthis._onType(viewController, { text: '\\n', replacePrevCharCnt: 0, replaceNextCharCnt: 0, positionDelta: 0 });\n\t\t\t}\n\t\t}));\n\n\t\t// Edit context events\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textformatupdate', (e) => this._handleTextFormatUpdate(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'characterboundsupdate', (e) => this._updateCharacterBounds(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textupdate', (e) => {\n\t\t\tthis._emitTypeEvent(viewController, e);\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionstart', (e) => {\n\t\t\t// Utlimately fires onDidCompositionStart() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionStart();\n\t\t\t// Emits ViewCompositionStartEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionend', (e) => {\n\t\t\t// Utlimately fires compositionEnd() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionEnd();\n\t\t\t// Emits ViewCompositionEndEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t}));\n\t\tthis._register(addDisposableListener(this.textArea.domNode, 'paste', (e) => {\n\t\t\t// Pretend here we touched the text area, as the `paste` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onPaste');\n\t\t\te.preventDefault();\n\t\t\tif (!e.clipboardData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\t\tif (!text) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmetadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n\t\t\tlet pasteOnNewLine = false;\n\t\t\tlet multicursorText: string[] | null = null;\n\t\t\tlet mode: string | null = null;\n\t\t\tif (metadata) {\n\t\t\t\tconst options = this._context.configuration.options;\n\t\t\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\t\t\tpasteOnNewLine = emptySelectionClipboard && !!metadata.isFromEmptySelection;\n\t\t\t\tmulticursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n\t\t\t\tmode = metadata.mode;\n\t\t\t}\n\t\t\tviewController.paste(text, pasteOnNewLine, multicursorText, mode);\n\t\t}));\n\t\tthis._register(NativeEditContextRegistry.register(ownerID, this));\n\t}\n\n\t// --- Public methods ---\n\n\tpublic override dispose(): void {\n\t\t// Force blue the dom node so can write in pane with no native edit context after disposal\n\t\tthis.domNode.domNode.blur();\n\t\tthis.domNode.domNode.remove();\n\t\tthis.textArea.domNode.remove();\n\t\tsuper.dispose();\n\t}\n\n\tpublic setAriaOptions(options: IEditorAriaOptions): void {\n\t\tthis._screenReaderSupport.setAriaOptions(options);\n\t}\n\n\t/* Last rendered data needed for correct hit-testing and determining the mouse position.\n\t * Without this, the selection will blink as incorrect mouse position is calculated */\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._primarySelection.getPosition();\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._screenReaderSupport.prepareRender(ctx);\n\t\tthis._updateEditContext();\n\t\tthis._updateSelectionAndControlBounds(ctx);\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._screenReaderSupport.render(ctx);\n\t}\n\n\tpublic override onCursorStateChanged(e: ViewCursorStateChangedEvent): boolean {\n\t\tthis._primarySelection = e.modelSelections[0] ?? new Selection(1, 1, 1, 1);\n\t\tthis._screenReaderSupport.onCursorStateChanged(e);\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(e: ViewConfigurationChangedEvent): boolean {\n\t\tthis._screenReaderSupport.onConfigurationChanged(e);\n\t\tthis._updateDomAttributes();\n\t\treturn true;\n\t}\n\n\tpublic override onDecorationsChanged(e: ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;\n\t}\n\n\tpublic override onFlushed(e: ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesChanged(e: ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesDeleted(e: ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onLinesInserted(e: ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic override onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\tthis._scrollLeft = e.scrollLeft;\n\t\tthis._scrollTop = e.scrollTop;\n\t\treturn true;\n\t}\n\n\tpublic override onZonesChanged(e: ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._screenReaderSupport.setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\tpublic writeScreenReaderContent(): void {\n\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._focusTracker.isFocused || (getActiveWindow().document.activeElement === this.textArea.domNode);\n\t}\n\n\tpublic focus(): void {\n\t\tthis._focusTracker.focus();\n\n\t\t// If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\t\tthis.refreshFocusState();\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tthis._focusTracker.refreshFocusState();\n\t}\n\n\t// TODO: added as a workaround fix for https://github.com/microsoft/vscode/issues/229825\n\t// When this issue will be fixed the following should be removed.\n\tpublic setEditContextOnDomNode(): void {\n\t\tconst targetWindow = getWindow(this.domNode.domNode);\n\t\tconst targetWindowId = getWindowId(targetWindow);\n\t\tif (this._targetWindowId !== targetWindowId) {\n\t\t\tthis.domNode.domNode.editContext = this._editContext;\n\t\t\tthis._targetWindowId = targetWindowId;\n\t\t}\n\t}\n\n\t// --- Private methods ---\n\n\tprivate _updateDomAttributes(): void {\n\t\tconst options = this._context.configuration.options;\n\t\tthis.domNode.domNode.setAttribute('tabindex', String(options.get(EditorOption.tabIndex)));\n\t}\n\n\tprivate _updateEditContext(): void {\n\t\tconst editContextState = this._getNewEditContextState();\n\t\tif (!editContextState) {\n\t\t\treturn;\n\t\t}\n\t\tthis._editContext.updateText(0, Number.MAX_SAFE_INTEGER, editContextState.text);\n\t\tthis._editContext.updateSelection(editContextState.selectionStartOffset, editContextState.selectionEndOffset);\n\t\tthis._editContextPrimarySelection = editContextState.editContextPrimarySelection;\n\t}\n\n\tprivate _emitTypeEvent(viewController: ViewController, e: TextUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editContextPrimarySelection.equalsSelection(this._primarySelection)) {\n\t\t\tthis._updateEditContext();\n\t\t}\n\t\tconst model = this._context.viewModel.model;\n\t\tconst startPositionOfEditContext = this._editContextStartPosition();\n\t\tconst offsetOfStartOfText = model.getOffsetAt(startPositionOfEditContext);\n\t\tconst offsetOfSelectionEnd = model.getOffsetAt(this._primarySelection.getEndPosition());\n\t\tconst offsetOfSelectionStart = model.getOffsetAt(this._primarySelection.getStartPosition());\n\t\tconst selectionEndOffset = offsetOfSelectionEnd - offsetOfStartOfText;\n\t\tconst selectionStartOffset = offsetOfSelectionStart - offsetOfStartOfText;\n\n\t\tlet replaceNextCharCnt = 0;\n\t\tlet replacePrevCharCnt = 0;\n\t\tif (e.updateRangeEnd > selectionEndOffset) {\n\t\t\treplaceNextCharCnt = e.updateRangeEnd - selectionEndOffset;\n\t\t}\n\t\tif (e.updateRangeStart < selectionStartOffset) {\n\t\t\treplacePrevCharCnt = selectionStartOffset - e.updateRangeStart;\n\t\t}\n\t\tlet text = '';\n\t\tif (selectionStartOffset < e.updateRangeStart) {\n\t\t\ttext += this._editContext.text.substring(selectionStartOffset, e.updateRangeStart);\n\t\t}\n\t\ttext += e.text;\n\t\tif (selectionEndOffset > e.updateRangeEnd) {\n\t\t\ttext += this._editContext.text.substring(e.updateRangeEnd, selectionEndOffset);\n\t\t}\n\t\tlet positionDelta = 0;\n\t\tif (e.selectionStart === e.selectionEnd && selectionStartOffset === selectionEndOffset) {\n\t\t\tpositionDelta = e.selectionStart - (e.updateRangeStart + e.text.length);\n\t\t}\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta\n\t\t};\n\t\tthis._onType(viewController, typeInput);\n\n\t\t// It could be that the typed letter does not produce a change in the editor text,\n\t\t// for example if an extension registers a custom typing command, and the typing operation does something else like scrolling\n\t\t// Need to update the edit context to reflect this\n\t\tthis._updateEditContext();\n\t}\n\n\tprivate _onType(viewController: ViewController, typeInput: ITypeData): void {\n\t\tif (typeInput.replacePrevCharCnt || typeInput.replaceNextCharCnt || typeInput.positionDelta) {\n\t\t\tviewController.compositionType(typeInput.text, typeInput.replacePrevCharCnt, typeInput.replaceNextCharCnt, typeInput.positionDelta);\n\t\t} else {\n\t\t\tviewController.type(typeInput.text);\n\t\t}\n\t}\n\n\tprivate _getNewEditContextState(): { text: string; selectionStartOffset: number; selectionEndOffset: number; editContextPrimarySelection: Selection } | undefined {\n\t\tconst editContextPrimarySelection = this._primarySelection;\n\t\tconst model = this._context.viewModel.model;\n\t\tif (!model.isValidRange(editContextPrimarySelection)) {\n\t\t\treturn;\n\t\t}\n\t\tconst primarySelectionStartLine = editContextPrimarySelection.startLineNumber;\n\t\tconst primarySelectionEndLine = editContextPrimarySelection.endLineNumber;\n\t\tconst endColumnOfEndLineNumber = model.getLineMaxColumn(primarySelectionEndLine);\n\t\tconst rangeOfText = new Range(primarySelectionStartLine, 1, primarySelectionEndLine, endColumnOfEndLineNumber);\n\t\tconst text = model.getValueInRange(rangeOfText, EndOfLinePreference.TextDefined);\n\t\tconst selectionStartOffset = editContextPrimarySelection.startColumn - 1;\n\t\tconst selectionEndOffset = text.length + editContextPrimarySelection.endColumn - endColumnOfEndLineNumber;\n\t\treturn {\n\t\t\ttext,\n\t\t\tselectionStartOffset,\n\t\t\tselectionEndOffset,\n\t\t\teditContextPrimarySelection\n\t\t};\n\t}\n\n\tprivate _editContextStartPosition(): Position {\n\t\treturn new Position(this._editContextPrimarySelection.startLineNumber, 1);\n\t}\n\n\tprivate _handleTextFormatUpdate(e: TextFormatUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst formats = e.getTextFormats();\n\t\tconst editContextStartPosition = this._editContextStartPosition();\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tformats.forEach(f => {\n\t\t\tconst textModel = this._context.viewModel.model;\n\t\t\tconst offsetOfEditContextText = textModel.getOffsetAt(editContextStartPosition);\n\t\t\tconst startPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeStart);\n\t\t\tconst endPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeEnd);\n\t\t\tconst decorationRange = Range.fromPositions(startPositionOfDecoration, endPositionOfDecoration);\n\t\t\tconst thickness = f.underlineThickness.toLowerCase();\n\t\t\tlet decorationClassName: string = CompositionClassName.NONE;\n\t\t\tswitch (thickness) {\n\t\t\t\tcase 'thin':\n\t\t\t\t\tdecorationClassName = CompositionClassName.SECONDARY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'thick':\n\t\t\t\t\tdecorationClassName = CompositionClassName.PRIMARY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdecorations.push({\n\t\t\t\trange: decorationRange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'textFormatDecoration',\n\t\t\t\t\tinlineClassName: decorationClassName,\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis._decorations = this._context.viewModel.model.deltaDecorations(this._decorations, decorations);\n\t}\n\n\tprivate _updateSelectionAndControlBounds(ctx: RenderingContext) {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst modelStartPosition = this._primarySelection.getStartPosition();\n\t\tconst viewStartPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelStartPosition);\n\t\tconst verticalOffsetStart = this._context.viewLayout.getVerticalOffsetForLineNumber(viewStartPosition.lineNumber);\n\n\t\tconst top = parentBounds.top + verticalOffsetStart - this._scrollTop;\n\t\tconst height = (this._primarySelection.endLineNumber - this._primarySelection.startLineNumber + 1) * lineHeight;\n\t\tlet left = parentBounds.left + contentLeft - this._scrollLeft;\n\t\tlet width: number;\n\n\t\tif (this._primarySelection.isEmpty()) {\n\t\t\tconst linesVisibleRanges = ctx.visibleRangeForPosition(viewStartPosition);\n\t\t\tif (linesVisibleRanges) {\n\t\t\t\tleft += linesVisibleRanges.left;\n\t\t\t}\n\t\t\twidth = 0;\n\t\t} else {\n\t\t\twidth = parentBounds.width - contentLeft;\n\t\t}\n\n\t\tconst selectionBounds = new DOMRect(left, top, width, height);\n\t\tthis._editContext.updateSelectionBounds(selectionBounds);\n\t\tthis._editContext.updateControlBounds(selectionBounds);\n\t}\n\n\tprivate _updateCharacterBounds(e: CharacterBoundsUpdateEvent): void {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst typicalHalfWidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\n\t\tconst characterBounds: DOMRect[] = [];\n\t\tconst offsetTransformer = new PositionOffsetTransformer(this._editContext.text);\n\t\tfor (let offset = e.rangeStart; offset < e.rangeEnd; offset++) {\n\t\t\tconst editContextStartPosition = offsetTransformer.getPosition(offset);\n\t\t\tconst textStartLineOffsetWithinEditor = this._editContextPrimarySelection.startLineNumber - 1;\n\t\t\tconst characterStartPosition = new Position(textStartLineOffsetWithinEditor + editContextStartPosition.lineNumber, editContextStartPosition.column);\n\t\t\tconst characterEndPosition = characterStartPosition.delta(0, 1);\n\t\t\tconst characterModelRange = Range.fromPositions(characterStartPosition, characterEndPosition);\n\t\t\tconst characterViewRange = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(characterModelRange);\n\t\t\tconst characterLinesVisibleRanges = this._visibleRangeProvider.linesVisibleRangesForRange(characterViewRange, true) ?? [];\n\t\t\tconst characterVerticalOffset = this._context.viewLayout.getVerticalOffsetForLineNumber(characterViewRange.startLineNumber);\n\t\t\tconst top = parentBounds.top + characterVerticalOffset - this._scrollTop;\n\n\t\t\tlet left = 0;\n\t\t\tlet width = typicalHalfWidthCharacterWidth;\n\t\t\tif (characterLinesVisibleRanges.length > 0) {\n\t\t\t\tfor (const visibleRange of characterLinesVisibleRanges[0].ranges) {\n\t\t\t\t\tleft = visibleRange.left;\n\t\t\t\t\twidth = visibleRange.width;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcharacterBounds.push(new DOMRect(parentBounds.left + contentLeft + left - this._scrollLeft, top, width, lineHeight));\n\t\t}\n\t\tthis._editContext.updateCharacterBounds(e.rangeStart, characterBounds);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(e: ClipboardEvent): void {\n\t\tconst options = this._context.configuration.options;\n\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tconst copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tconst selections = this._context.viewModel.getCursorStates().map(cursorState => cursorState.modelState.selection);\n\t\tconst dataToCopy = getDataToCopy(this._context.viewModel, selections, emptySelectionClipboard, copyWithSyntaxHighlighting);\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\t\te.preventDefault();\n\t\tif (e.clipboardData) {\n\t\t\tClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n\t\t}\n\t}\n\n\tprivate _setSelectionChangeListener(viewController: ViewController): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this.domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!this.isFocused() || !isScreenReaderOptimized) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst screenReaderContentState = this._screenReaderSupport.screenReaderContentState;\n\t\t\tif (!screenReaderContentState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._screenReaderSupport.getIgnoreSelectionChangeTime();\n\t\t\tthis._screenReaderSupport.resetSelectionChangeTime();\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the textarea\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeDocument = getActiveWindow().document;\n\t\t\tconst activeDocumentSelection = activeDocument.getSelection();\n\t\t\tif (!activeDocumentSelection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rangeCount = activeDocumentSelection.rangeCount;\n\t\t\tif (rangeCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst range = activeDocumentSelection.getRangeAt(0);\n\t\t\tconst viewModel = this._context.viewModel;\n\t\t\tconst model = viewModel.model;\n\t\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\t\tconst modelScreenReaderContentStartPositionWithinEditor = coordinatesConverter.convertViewPositionToModelPosition(screenReaderContentState.startPositionWithinEditor);\n\t\t\tconst offsetOfStartOfScreenReaderContent = model.getOffsetAt(modelScreenReaderContentStartPositionWithinEditor);\n\t\t\tlet offsetOfSelectionStart = range.startOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tlet offsetOfSelectionEnd = range.endOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tconst modelUsesCRLF = model.getEndOfLineSequence() === EndOfLineSequence.CRLF;\n\t\t\tif (modelUsesCRLF) {\n\t\t\t\tconst screenReaderContentText = screenReaderContentState.value;\n\t\t\t\tconst offsetTransformer = new PositionOffsetTransformer(screenReaderContentText);\n\t\t\t\tconst positionOfStartWithinText = offsetTransformer.getPosition(range.startOffset);\n\t\t\t\tconst positionOfEndWithinText = offsetTransformer.getPosition(range.endOffset);\n\t\t\t\toffsetOfSelectionStart += positionOfStartWithinText.lineNumber - 1;\n\t\t\t\toffsetOfSelectionEnd += positionOfEndWithinText.lineNumber - 1;\n\t\t\t}\n\t\t\tconst positionOfSelectionStart = model.getPositionAt(offsetOfSelectionStart);\n\t\t\tconst positionOfSelectionEnd = model.getPositionAt(offsetOfSelectionEnd);\n\t\t\tconst newSelection = Selection.fromPositions(positionOfSelectionStart, positionOfSelectionEnd);\n\t\t\tviewController.setSelection(newSelection);\n\t\t});\n\t}\n}\n"]}