{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/editor/browser/controller/editContext/native/nativeEditContextUtils.ts","vs/editor/browser/controller/editContext/native/nativeEditContextUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,qBAAqB,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAC5F,OAAO,EAAe,UAAU,EAAE,MAAM,yCAAyC,CAAC;AASlF,MAAM,OAAO,YAAa,SAAQ,UAAU;IAG3C,YACkB,QAAqB,EACrB,cAAgD;QAEjE,KAAK,EAAE,CAAC;QAHS,aAAQ,GAAR,QAAQ,CAAa;QACrB,mBAAc,GAAd,cAAc,CAAkC;QAJ1D,eAAU,GAAY,KAAK,CAAC;QAOnC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvG,CAAC;IAEO,qBAAqB,CAAC,OAAgB;QAC7C,IAAI,IAAI,CAAC,UAAU,KAAK,OAAO,EAAE,CAAC;YACjC,OAAO;QACR,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK;QACX,2DAA2D;QAC3D,6IAA6I;QAC7I,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAEM,iBAAiB;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,KAAK,eAAe,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC;QAC3E,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,IAAI,SAAS;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;CACD;AAED,MAAM,UAAU,gCAAgC,CAAmD,MAAmB,EAAE,IAAO,EAAE,QAAqF,EAAE,OAA2C;IAClQ,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAe,EAAE,OAAO,CAAC,CAAC;IACxD,OAAO;QACN,OAAO;YACN,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAe,CAAC,CAAC;QACnD,CAAC;KACD,CAAC;AACH,CAAC","file":"nativeEditContextUtils.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow } from '../../../../../base/browser/dom.js';\nimport { IDisposable, Disposable } from '../../../../../base/common/lifecycle.js';\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class FocusTracker extends Disposable {\n\tprivate _isFocused: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly _onFocusChange: (newFocusValue: boolean) => void,\n\t) {\n\t\tsuper();\n\t\tthis._register(addDisposableListener(this._domNode, 'focus', () => this._handleFocusedChanged(true)));\n\t\tthis._register(addDisposableListener(this._domNode, 'blur', () => this._handleFocusedChanged(false)));\n\t}\n\n\tprivate _handleFocusedChanged(focused: boolean): void {\n\t\tif (this._isFocused === focused) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isFocused = focused;\n\t\tthis._onFocusChange(this._isFocused);\n\t}\n\n\tpublic focus(): void {\n\t\t// fixes: https://github.com/microsoft/vscode/issues/228147\n\t\t// Immediately call this method in order to directly set the field isFocused to true so the textInputFocus context key is evaluated correctly\n\t\tthis._handleFocusedChanged(true);\n\t\tthis._domNode.focus();\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tconst focused = this._domNode === getActiveWindow().document.activeElement;\n\t\tthis._handleFocusedChanged(focused);\n\t}\n\n\tget isFocused(): boolean {\n\t\treturn this._isFocused;\n\t}\n}\n\nexport function editContextAddDisposableListener<K extends keyof EditContextEventHandlersEventMap>(target: EventTarget, type: K, listener: (this: GlobalEventHandlers, ev: EditContextEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): IDisposable {\n\ttarget.addEventListener(type, listener as any, options);\n\treturn {\n\t\tdispose() {\n\t\t\ttarget.removeEventListener(type, listener as any);\n\t\t}\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow } from '../../../../../base/browser/dom.js';\nimport { IDisposable, Disposable } from '../../../../../base/common/lifecycle.js';\n\nexport interface ITypeData {\n\ttext: string;\n\treplacePrevCharCnt: number;\n\treplaceNextCharCnt: number;\n\tpositionDelta: number;\n}\n\nexport class FocusTracker extends Disposable {\n\tprivate _isFocused: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly _onFocusChange: (newFocusValue: boolean) => void,\n\t) {\n\t\tsuper();\n\t\tthis._register(addDisposableListener(this._domNode, 'focus', () => this._handleFocusedChanged(true)));\n\t\tthis._register(addDisposableListener(this._domNode, 'blur', () => this._handleFocusedChanged(false)));\n\t}\n\n\tprivate _handleFocusedChanged(focused: boolean): void {\n\t\tif (this._isFocused === focused) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isFocused = focused;\n\t\tthis._onFocusChange(this._isFocused);\n\t}\n\n\tpublic focus(): void {\n\t\t// fixes: https://github.com/microsoft/vscode/issues/228147\n\t\t// Immediately call this method in order to directly set the field isFocused to true so the textInputFocus context key is evaluated correctly\n\t\tthis._handleFocusedChanged(true);\n\t\tthis._domNode.focus();\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tconst focused = this._domNode === getActiveWindow().document.activeElement;\n\t\tthis._handleFocusedChanged(focused);\n\t}\n\n\tget isFocused(): boolean {\n\t\treturn this._isFocused;\n\t}\n}\n\nexport function editContextAddDisposableListener<K extends keyof EditContextEventHandlersEventMap>(target: EventTarget, type: K, listener: (this: GlobalEventHandlers, ev: EditContextEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): IDisposable {\n\ttarget.addEventListener(type, listener as any, options);\n\treturn {\n\t\tdispose() {\n\t\t\ttarget.removeEventListener(type, listener as any);\n\t\t}\n\t};\n}\n"]}