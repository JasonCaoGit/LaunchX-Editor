import { IContextMenuProvider } from '../../contextmenu.js';
import { IActionViewItemProvider } from '../actionbar/actionbar.js';
import { BaseActionViewItem, IBaseActionViewItemOptions } from '../actionbar/actionViewItems.js';
import { AnchorAlignment } from '../contextview/contextview.js';
import { IActionProvider } from './dropdown.js';
import { IAction, IActionRunner } from '../../../common/actions.js';
import { ResolvedKeybinding } from '../../../common/keybindings.js';
import './dropdown.css';
export interface IKeybindingProvider {
    (action: IAction): ResolvedKeybinding | undefined;
}
export interface IAnchorAlignmentProvider {
    (): AnchorAlignment;
}
export interface IDropdownMenuActionViewItemOptions extends IBaseActionViewItemOptions {
    readonly actionViewItemProvider?: IActionViewItemProvider;
    readonly keybindingProvider?: IKeybindingProvider;
    readonly actionRunner?: IActionRunner;
    readonly classNames?: string[] | string;
    readonly anchorAlignmentProvider?: IAnchorAlignmentProvider;
    readonly menuAsChild?: boolean;
    readonly skipTelemetry?: boolean;
}
export declare class DropdownMenuActionViewItem extends BaseActionViewItem {
    private menuActionsOrProvider;
    private dropdownMenu;
    private contextMenuProvider;
    private actionItem;
    private _onDidChangeVisibility;
    readonly onDidChangeVisibility: import("../../../common/event.js").Event<boolean>;
    protected readonly options: IDropdownMenuActionViewItemOptions;
    constructor(action: IAction, menuActionsOrProvider: readonly IAction[] | IActionProvider, contextMenuProvider: IContextMenuProvider, options?: IDropdownMenuActionViewItemOptions);
    render(container: HTMLElement): void;
    protected getTooltip(): string | undefined;
    setActionContext(newContext: unknown): void;
    show(): void;
    protected updateEnabled(): void;
}
