import { Event } from './event.js';
import { INavigator } from './navigator.js';
export interface IHistory<T> {
    delete(t: T): boolean;
    add(t: T): this;
    has(t: T): boolean;
    clear(): void;
    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;
    replace?(t: T[]): void;
    onDidChange?: Event<string[]>;
}
export declare class HistoryNavigator<T> implements INavigator<T> {
    private _history;
    private _limit;
    private _navigator;
    constructor(_history?: IHistory<T>, limit?: number);
    getHistory(): T[];
    add(t: T): void;
    next(): T | null;
    previous(): T | null;
    current(): T | null;
    first(): T | null;
    last(): T | null;
    isFirst(): boolean;
    isLast(): boolean;
    isNowhere(): boolean;
    has(t: T): boolean;
    clear(): void;
    private _onChange;
    private _reduceToLimit;
    private _currentPosition;
    private get _elements();
}
