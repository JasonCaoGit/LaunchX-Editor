{"version":3,"sources":["file:///Users/kw/github/monaco-editor-core/out-editor-esm/vs/base/common/numbers.ts","vs/base/common/numbers.ts"],"names":[],"mappings":"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","file":"numbers.js","sourceRoot":"file:///Users/kw/github/monaco-editor-core/out-editor-esm","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assert } from './assert.js';\n\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.min(Math.max(value, min), max);\n}\n\nexport class MovingAverage {\n\n\tprivate _n = 1;\n\tprivate _val = 0;\n\n\tupdate(value: number): number {\n\t\tthis._val = this._val + (value - this._val) / this._n;\n\t\tthis._n += 1;\n\t\treturn this._val;\n\t}\n\n\tget value(): number {\n\t\treturn this._val;\n\t}\n}\n\nexport class SlidingWindowAverage {\n\n\tprivate _n: number = 0;\n\tprivate _val = 0;\n\n\tprivate readonly _values: number[] = [];\n\tprivate _index: number = 0;\n\tprivate _sum = 0;\n\n\tconstructor(size: number) {\n\t\tthis._values = new Array(size);\n\t\tthis._values.fill(0, 0, size);\n\t}\n\n\tupdate(value: number): number {\n\t\tconst oldValue = this._values[this._index];\n\t\tthis._values[this._index] = value;\n\t\tthis._index = (this._index + 1) % this._values.length;\n\n\t\tthis._sum -= oldValue;\n\t\tthis._sum += value;\n\n\t\tif (this._n < this._values.length) {\n\t\t\tthis._n += 1;\n\t\t}\n\n\t\tthis._val = this._sum / this._n;\n\t\treturn this._val;\n\t}\n\n\tget value(): number {\n\t\treturn this._val;\n\t}\n}\n\n/**\n * Function to get a (pseudo)random integer from a provided `max`...[`min`] range.\n * Both `min` and `max` values are inclusive. The `min` value is optional and defaults\n * to `0` if not explicitely specified.\n *\n * @throws in the next cases:\n * \t- if provided `min` or `max` is not a number\n *  - if provided `min` or `max` is not finite\n *  - if provided `min` is larger than `max` value\n *\n * ## Examples\n *\n * Specifying a `max` value only uses `0` as the `min` value by default:\n *\n * ```typescript\n * // get a random integer between 0 and 10\n * const randomInt = randomInt(10);\n *\n * assert(\n *   randomInt >= 0,\n *   'Should be greater than or equal to 0.',\n * );\n *\n * assert(\n *   randomInt <= 10,\n *   'Should be less than or equal to 10.',\n * );\n * ```\n * * Specifying both `max` and `min` values:\n *\n * ```typescript\n * // get a random integer between 5 and 8\n * const randomInt = randomInt(8, 5);\n *\n * assert(\n *   randomInt >= 5,\n *   'Should be greater than or equal to 5.',\n * );\n *\n * assert(\n *   randomInt <= 8,\n *   'Should be less than or equal to 8.',\n * );\n * ```\n */\nexport const randomInt = (max: number, min: number = 0): number => {\n\tassert(!isNaN(min), '\"min\" param is not a number.');\n\tassert(!isNaN(max), '\"max\" param is not a number.');\n\n\tassert(isFinite(max), '\"max\" param is not finite.');\n\tassert(isFinite(min), '\"min\" param is not finite.');\n\n\tassert(max > min, `\"max\"(${max}) param should be greater than \"min\"(${min}).`);\n\n\tconst delta = max - min;\n\tconst randomFloat = delta * Math.random();\n\n\treturn Math.round(min + randomFloat);\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assert } from './assert.js';\n\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.min(Math.max(value, min), max);\n}\n\nexport class MovingAverage {\n\n\tprivate _n = 1;\n\tprivate _val = 0;\n\n\tupdate(value: number): number {\n\t\tthis._val = this._val + (value - this._val) / this._n;\n\t\tthis._n += 1;\n\t\treturn this._val;\n\t}\n\n\tget value(): number {\n\t\treturn this._val;\n\t}\n}\n\nexport class SlidingWindowAverage {\n\n\tprivate _n: number = 0;\n\tprivate _val = 0;\n\n\tprivate readonly _values: number[] = [];\n\tprivate _index: number = 0;\n\tprivate _sum = 0;\n\n\tconstructor(size: number) {\n\t\tthis._values = new Array(size);\n\t\tthis._values.fill(0, 0, size);\n\t}\n\n\tupdate(value: number): number {\n\t\tconst oldValue = this._values[this._index];\n\t\tthis._values[this._index] = value;\n\t\tthis._index = (this._index + 1) % this._values.length;\n\n\t\tthis._sum -= oldValue;\n\t\tthis._sum += value;\n\n\t\tif (this._n < this._values.length) {\n\t\t\tthis._n += 1;\n\t\t}\n\n\t\tthis._val = this._sum / this._n;\n\t\treturn this._val;\n\t}\n\n\tget value(): number {\n\t\treturn this._val;\n\t}\n}\n\n/**\n * Function to get a (pseudo)random integer from a provided `max`...[`min`] range.\n * Both `min` and `max` values are inclusive. The `min` value is optional and defaults\n * to `0` if not explicitely specified.\n *\n * @throws in the next cases:\n * \t- if provided `min` or `max` is not a number\n *  - if provided `min` or `max` is not finite\n *  - if provided `min` is larger than `max` value\n *\n * ## Examples\n *\n * Specifying a `max` value only uses `0` as the `min` value by default:\n *\n * ```typescript\n * // get a random integer between 0 and 10\n * const randomInt = randomInt(10);\n *\n * assert(\n *   randomInt >= 0,\n *   'Should be greater than or equal to 0.',\n * );\n *\n * assert(\n *   randomInt <= 10,\n *   'Should be less than or equal to 10.',\n * );\n * ```\n * * Specifying both `max` and `min` values:\n *\n * ```typescript\n * // get a random integer between 5 and 8\n * const randomInt = randomInt(8, 5);\n *\n * assert(\n *   randomInt >= 5,\n *   'Should be greater than or equal to 5.',\n * );\n *\n * assert(\n *   randomInt <= 8,\n *   'Should be less than or equal to 8.',\n * );\n * ```\n */\nexport const randomInt = (max: number, min: number = 0): number => {\n\tassert(!isNaN(min), '\"min\" param is not a number.');\n\tassert(!isNaN(max), '\"max\" param is not a number.');\n\n\tassert(isFinite(max), '\"max\" param is not finite.');\n\tassert(isFinite(min), '\"min\" param is not finite.');\n\n\tassert(max > min, `\"max\"(${max}) param should be greater than \"min\"(${min}).`);\n\n\tconst delta = max - min;\n\tconst randomFloat = delta * Math.random();\n\n\treturn Math.round(min + randomFloat);\n};\n"]}